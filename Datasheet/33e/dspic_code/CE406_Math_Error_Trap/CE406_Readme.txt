
                              Readme File for Code Example:
                        CE406 - Math Error Traps for Robust Operation
                        ----------------------------------------------

This file contains the following sections:
1. Code Example Description
2. Folder Contents
3. Suggested Development Resources
4. Reconfiguring the project for a different dsPIC33E device
5. Revision History


1. Code Example Description:
----------------------------
Microchip's 16-bit dsPIC® Digital Signal Controllers feature an on-chip mechanism to detect software errors and 
take corrective action. Specifically, the ability to detect arithmetic (math) errors is provided by means of 
automatic Math Error Trap detection.

Math errors may be caused by one of the following:

a. Divide by Zero

b. Accumulator A overflow (bit 31 destroyed)

c. Accumulator B Overflow (bit 31 destroyed)

d. Catastrophic overflow of Accumulator A (bit 39 destroyed)

e. Catastrophic overflow of Accumulator B (bit 39 destroyed)

f. Accumulator Shift count error

If the application defines an Math Error Trap service routine (trap handler), the processor will vector to the 
trap handler when it detects a math error.

NOTE: This routine also estimates the instruction that caused the math error trap to occur by examining the 
PC value that is stored in the stack prior to entering the Math Error Trap. Since the instruction that causes 
divide by zero error to occur is not executed, the stacked PC points to the offending instruction. 
However, the instructions that cause accumulator overflows to occur will be executed prior to the trap being caused. 
So the stacked PC will point to the instruction after the offending instruction. 
Thus, the estimation routines differ slightly for the Divide by Zero error and the Accumulator Overflow errors. 
It should also be noted that since this trap routine is written in C the estimation of the stacked PC will 
depend on the compiler optimization level set up for this file. In the trap routine presented here, a comiler 
optimization level of 0 is assumed for this file.

- The code in the "main.c" file simply performs an illegal math operations so as to cause a Math Error Trap.
  One can Select the Source that will cause Math Error using the following macros definitions
	#define ACCSHT_ERR  1
	#define DIV0_ERR    0
	#define ACCA_OV     0
	#define ACCB_OV     0
	#define ACCA_COV    0
	#define ACCB_COV    0

Note:
The user should note that the MPLAB® C30 C compiler will not intentionally generate any instructions that 
cause an arithmetic error trap to occur.

2. Folder Contents:
-------------------
This folder contains the following sub-folders:
a. C:\Program Files\Microchip\MPLAB C30\support\gld
        This folder will have the device GLD file, it is used for building the project. 
	This file was provided with the MPLAB® C30 toolsuite.

b. C:\Program Files\Microchip\MPLAB C30\support\h
        This folder contains C header files useful in building this
        project. Device register and bit definitions are provided in
        the *.h file that follows the device name. These files were provided
        with the MPLAB® C30 toolsuite.

c. C:\Program Files\Microchip\MPLAB C30\lib
        This folder contains library archive files, which are a
        collection of precompiled object files. The file
        named "libpic30-coff.a" contains the C run-time start-up
        library. These file were provided with the
        MPLAB® C30 toolsuite.

d. hex
        This folder contains three file types - coff, hex and map.
        These are files generated by the MPLAB® C30 toolsuite on build
        operation performed within MPLAB® IDE. The *.map file contains
        details on memory allocation for various variables, constants
        and dsPIC instructions specified in the source and library
        code. The *.hex file contains a binary file that may be
        programmed into the dsPIC device. The *.coff file contains
        a binary file that is used by MPLAB® IDE for simulation.

e. h
        This folder contains include files for the code example.


f. src
        This folder contains all the C and Assembler source files (*.c,
        *.s) used in demonstrating the described example. This folder
        also contains a sub-folder named "obj" that stores compiled
        object files generated when the project is built.


3. Suggested Development Resources:
-----------------------------------
        a. Explorer 16 Demo board with dsPIC33EP512MU810 controller

4. Reconfiguring the project for a different dsPIC33E device:
-------------------------------------------------------------
The Project/Workspace can be easily reconfigured for any dsPIC33E device.
Please use the following general guidelines:
        a. Change device selection within MPLAB® IDE to a dsPIC33E device of
        your choice by using the following menu option:
        MPLAB IDE>>Configure>>Select Device

        b. Provide the correct device linker script and header file for your
        device. Device linker scripts and header files are available in your
        MPLAB® C30 installation folder under:
        Device Linker Script-
                YourDrive:>Program Files\Microchip\MPLAB C30\support\gld
        Device C Header file-
                YourDrive:>Program Files\Microchip\MPLAB C30\support\h
        Device ASM Include file-
                YourDrive:>Program Files\Microchip\MPLAB C30\support\inc

        c. Provide the appropriate path to your MPLAB C30 support file locations
        using the menu option:
        MPLAB IDE>>Project>>Build Options>>Project

        d. Chose the development board applicable to your device. Some options
        are provided below:


        e. Re-build the MPLAB® project using the menu option:
        MPLAB IDE>>Project>>Build All

        f. Download the hex file into the device and run.

5. Revision History :
---------------------
        04/01/2006 - Initial Release of the Code Example
	07/01/2010 - Code Example updated for dsPIC33E

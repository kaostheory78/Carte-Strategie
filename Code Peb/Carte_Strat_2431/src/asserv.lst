

HI-TECH Software PICC-18 Macro Assembler V8.35PL3
Serial number: HCPIC18-33902                           Fri May 14 07:16:30 2010

Licensed to: HOME VER
     1                           	processor	18F2431
     2                           	opt	pw 80
     3                           	psect	__Z33902RS_,global,delta=1
     4                           	psect	text,global,reloc=2,class=CODE,delta=1
     5                           	psect	const,global,class=CODE,delta=1
     6                           	psect	bss,global,class=RAM,space=1,delta=1
     7                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     8                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97  000000                     
    98                           
    99                           	psect	__Z33902RS_
   100  000004                     
   101  000004                     
   102                           
   103                           	psect	text
   104  00033E                     _Asservissement:
   105                           ;	_PWM_moteurGauche assigned to ?a_Attente+2
   106  000000                     _Attente$PWM_moteurGauche	set	?a_Attente+2
   107                           ;	_PWM_moteurDroit assigned to ?a_Attente+0
   108  000000                     _Attente$PWM_moteurDroit	set	?a_Attente
   109                           ;asserv.c: 1011: void Attente(unsigned long long
      +                           timeout_final)
   110                           ;asserv.c: 1012: {
   111                           ;       param _timeout_final assigned to ?_Atten
      +                          te+0
   112  000000                     _Attente$timeout_final	set	?_Attente
   113                           ;asserv.c: 928: void Stop(int timeout_sec)
   114                           ;asserv.c: 929: {
   115                           ;       param _timeout_sec assigned to ?_Stop+0
   116  000000                     _Stop$timeout_sec	set	?_Stop
   117                           ;       param _mode assigned to ?_recule_callage
      +                          +16
   118  000000                     _recule_callage$mode	set	?_recule_callage+16
   119                           ;       param _timeout_final assigned to ?_recul
      +                          e_callage+12
   120  000000                     _recule_callage$timeout_final	set	?_recule_calla
      +                          ge+12
   121                           ;       param _y_mm assigned to ?_recule_callage
      +                          +8
   122  000000                     _recule_callage$y_mm	set	?_recule_callage+8
   123                           ;       param _x_mm assigned to ?_recule_callage
      +                          +4
   124  000000                     _recule_callage$x_mm	set	?_recule_callage+4
   125                           ;asserv.c: 786: void recule_callage(signed long 
      +                          long angle, signed long long x_mm, signed long l
      +                          ong y_mm, unsigned long long timeout_final, int 
      +                          mode)
   126                           ;asserv.c: 787: {
   127                           ;       param _angle assigned to ?_recule_callag
      +                          e+0
   128  000000                     _recule_callage$angle	set	?_recule_callage
   129                           ;asserv.c: 757: void avance_callage(unsigned lon
      +                          g long timeout_final)
   130                           ;asserv.c: 758: {
   131                           ;       param _timeout_final assigned to ?_avanc
      +                          e_callage+0
   132  000000                     _avance_callage$timeout_final	set	?_avance_calla
      +                          ge
   133                           ;	_compteur_sortie assigned to ?a_vas_vers+22
   134  000000                     _vas_vers$compteur_sortie	set	?a_vas_vers+22
   135                           ;	_timeout_local assigned to ?a_vas_vers+18
   136  000000                     _vas_vers$timeout_local	set	?a_vas_vers+18
   137                           ;	_angle_arrive assigned to ?a_vas_vers+15
   138  000000                     _vas_vers$angle_arrive	set	?a_vas_vers+15
   139                           ;	_consigne_finale assigned to ?a_vas_vers+12
   140  000000                     _vas_vers$consigne_finale	set	?a_vas_vers+12
   141                           ;	_seuil_distance_av assigned to ?a_vas_vers+9
   142  000000                     _vas_vers$seuil_distance_av	set	?a_vas_vers+9
   143                           ;	_seuil_distance_ar assigned to ?a_vas_vers+6
   144  000000                     _vas_vers$seuil_distance_ar	set	?a_vas_vers+6
   145                           ;	_seuil_angle_haut assigned to ?a_vas_vers+3
   146  000000                     _vas_vers$seuil_angle_haut	set	?a_vas_vers+3
   147                           ;	_seuil_angle_bas assigned to ?a_vas_vers+0
   148  000000                     _vas_vers$seuil_angle_bas	set	?a_vas_vers
   149                           ;       param _angle_force_deg assigned to ?_vas
      +                          _vers+12
   150  000000                     _vas_vers$angle_force_deg	set	?_vas_vers+12
   151                           ;       param _vitesse assigned to ?_vas_vers+8
   152  000000                     _vas_vers$vitesse	set	?_vas_vers+8
   153                           ;       param _y_consigne_mm assigned to ?_vas_v
      +                          ers+4
   154  000000                     _vas_vers$y_consigne_mm	set	?_vas_vers+4
   155                           ;asserv.c: 589: void vas_vers(signed long long x
      +                          _consigne_mm, signed long long y_consigne_mm, si
      +                          gned long long vitesse, signed long long angle_f
      +                          orce_deg)
   156                           ;asserv.c: 590: {
   157                           ;       param _x_consigne_mm assigned to ?_vas_v
      +                          ers+0
   158  000000                     _vas_vers$x_consigne_mm	set	?_vas_vers
   159                           ;	_consigne_angle_deg assigned to ?a_tourner_cib
      +                          le+10
   160  000000                     _tourner_cible$consigne_angle_deg	set	?a_tourner
      +                          _cible+10
   161                           ;	_compteur_sortie assigned to ?a_tourner_cible+
      +                          6
   162  000000                     _tourner_cible$compteur_sortie	set	?a_tourner_ci
      +                          ble+6
   163                           ;	_seuil_angle_haut assigned to ?a_tourner_cible
      +                          +3
   164  000000                     _tourner_cible$seuil_angle_haut	set	?a_tourner_c
      +                          ible+3
   165                           ;	_seuil_angle_bas assigned to ?a_tourner_cible+
      +                          0
   166  000000                     _tourner_cible$seuil_angle_bas	set	?a_tourner_ci
      +                          ble
   167                           ;       param _vitesse assigned to ?_tourner_cib
      +                          le+8
   168  000000                     _tourner_cible$vitesse	set	?_tourner_cible+8
   169                           ;       param _y_consigne_mm assigned to ?_tourn
      +                          er_cible+4
   170  000000                     _tourner_cible$y_consigne_mm	set	?_tourner_cible
      +                          +4
   171                           ;asserv.c: 490: void tourner_cible(signed long l
      +                          ong x_consigne_mm, signed long long y_consigne_m
      +                          m, signed long long vitesse)
   172                           ;asserv.c: 491: {
   173                           ;       param _x_consigne_mm assigned to ?_tourn
      +                          er_cible+0
   174  000000                     _tourner_cible$x_consigne_mm	set	?_tourner_cible
   175                           ;	_compteur_sortie assigned to ?a_tourner_angle+
      +                          6
   176  000000                     _tourner_angle$compteur_sortie	set	?a_tourner_an
      +                          gle+6
   177                           ;	_seuil_angle_haut assigned to ?a_tourner_angle
      +                          +3
   178  000000                     _tourner_angle$seuil_angle_haut	set	?a_tourner_a
      +                          ngle+3
   179                           ;	_seuil_angle_bas assigned to ?a_tourner_angle+
      +                          0
   180  000000                     _tourner_angle$seuil_angle_bas	set	?a_tourner_an
      +                          gle
   181                           ;       param _vitesse assigned to ?_tourner_ang
      +                          le+4
   182  000000                     _tourner_angle$vitesse	set	?_tourner_angle+4
   183                           ;asserv.c: 420: void tourner_angle(signed long l
      +                          ong consigne_angle_deg, signed long long vitesse
      +                          )
   184                           ;asserv.c: 421: {
   185                           ;       param _consigne_angle_deg assigned to ?_
      +                          tourner_angle+0
   186  000000                     _tourner_angle$consigne_angle_deg	set	?_tourner_
      +                          angle
   187                           ;asserv.c: 379: void inversion_repaire(int consi
      +                          gne_angle_deg)
   188                           ;asserv.c: 380: {
   189                           ;       param _consigne_angle_deg assigned to ?_
      +                          inversion_repaire+0
   190  000000                     _inversion_repaire$consigne_angle_deg	set	?_inve
      +                          rsion_repaire
   191                           ;	_PWM_moteurGauche assigned to ?a_ass_envoi_pwm
      +                          +2
   192  000000                     _ass_envoi_pwm$PWM_moteurGauche	set	?a_ass_envoi
      +                          _pwm+2
   193                           ;	_PWM_moteurDroit assigned to ?a_ass_envoi_pwm+
      +                          0
   194  000000                     _ass_envoi_pwm$PWM_moteurDroit	set	?a_ass_envoi_
      +                          pwm
   195                           ;	_vitesse_max_angle assigned to ?a_ass_saturati
      +                          on_vitesse+0
   196  000000                     _ass_saturation_vitesse$vitesse_max_angle	set	?a
      +                          _ass_saturation_vitesse
   197                           ;	_ecart_vitesse_roue_D assigned to ?a_ass_vites
      +                          se+0
   198  000000                     _ass_vitesse$ecart_vitesse_roue_D	set	?a_ass_vit
      +                          esse
   199                           ;	_commande_distance assigned to ?a_ass_distance
      +                          +12
   200  000000                     _ass_distance$commande_distance	set	?a_ass_dista
      +                          nce+12
   201                           ;	_ecart_distance assigned to ?a_ass_distance+9
   202  000000                     _ass_distance$ecart_distance	set	?a_ass_distance
      +                          +9
   203                           ;	_delta_y assigned to ?a_ass_distance+6
   204  000000                     _ass_distance$delta_y	set	?a_ass_distance+6
   205                           ;	_delta_x assigned to ?a_ass_distance+3
   206  000000                     _ass_distance$delta_x	set	?a_ass_distance+3
   207                           ;	_coef_Kp_hybride assigned to ?a_ass_distance+0
   208  000000                     _ass_distance$coef_Kp_hybride	set	?a_ass_distanc
      +                          e
   209                           ;	_ecart_angle assigned to ?a_ass_angle+9
   210  000000                     _ass_angle$ecart_angle	set	?a_ass_angle+9
   211                           ;	_correction_KD assigned to ?a_ass_angle+6
   212  000000                     _ass_angle$correction_KD	set	?a_ass_angle+6
   213                           ;	_ecart_max_sur_KP assigned to ?a_ass_angle+3
   214  000000                     _ass_angle$ecart_max_sur_KP	set	?a_ass_angle+3
   215                           ;	_correction_max_KD assigned to ?a_ass_angle+0
   216  000000                     _ass_angle$correction_max_KD	set	?a_ass_angle
   217                           ;	_delta_y assigned to ?a_Asservissement+3
   218  000000                     _Asservissement$delta_y	set	?a_Asservissement+3
   219  000000                     
   220                           ;	_delta_x assigned to ?a_Asservissement+0
   221  000000                     _Asservissement$delta_x	set	?a_Asservissement
   222                           ;asserv.c: 30: float delta_x = Asserv.x_consigne
      +                           - Asserv.x_actuel;
   223  00033E  0101               	movlb	(_Asserv+66) shr (0+8)
   224  000340  C17E  F000         	movff	_Asserv+126,btemp
   225  000344  5142               	movf	(_Asserv+66)& (0+255),w,b
   226  000346  5E00               	subwf	btemp,f
   227  000348  C17F  F001         	movff	_Asserv+127,btemp+1
   228  00034C  5143               	movf	(_Asserv+67)& (0+255),w,b
   229  00034E  5A01               	subwfb	btemp+1,f
   230  000350  C180  F002         	movff	_Asserv+128,btemp+2
   231  000354  5144               	movf	(_Asserv+68)& (0+255),w,b
   232  000356  5A02               	subwfb	btemp+2,f
   233  000358  C181  F003         	movff	_Asserv+129,btemp+3
   234  00035C  5145               	movf	(_Asserv+69)& (0+255),w,b
   235  00035E  5A03               	subwfb	btemp+3,f
   236  000360  ECD3  F01E         	call	altoft
   237  000364  C000  F0C7         	movff	btemp,?a_Asservissement
   238  000368  C001  F0C8         	movff	btemp+1,?a_Asservissement+1
   239  00036C  C002  F0C9         	movff	btemp+2,?a_Asservissement+2
   240                           ;asserv.c: 31: float delta_y = Asserv.y_consigne
      +                           - Asserv.y_actuel;
   241  000370  C182  F000         	movff	_Asserv+130,btemp
   242  000374  5146               	movf	(_Asserv+70)& (0+255),w,b
   243  000376  5E00               	subwf	btemp,f
   244  000378  C183  F001         	movff	_Asserv+131,btemp+1
   245  00037C  5147               	movf	(_Asserv+71)& (0+255),w,b
   246  00037E  5A01               	subwfb	btemp+1,f
   247  000380  C184  F002         	movff	_Asserv+132,btemp+2
   248  000384  5148               	movf	(_Asserv+72)& (0+255),w,b
   249  000386  5A02               	subwfb	btemp+2,f
   250  000388  C185  F003         	movff	_Asserv+133,btemp+3
   251  00038C  5149               	movf	(_Asserv+73)& (0+255),w,b
   252  00038E  5A03               	subwfb	btemp+3,f
   253  000390  ECD3  F01E         	call	altoft
   254  000394  C000  F0CA         	movff	btemp,?a_Asservissement+3
   255  000398  C001  F0CB         	movff	btemp+1,?a_Asservissement+4
   256  00039C  C002  F0CC         	movff	btemp+2,?a_Asservissement+5
   257                           ;asserv.c: 34: Asserv.consigne_angle_atan2 = ata
      +                          n2(delta_y, delta_x);
   258  0003A0  C0CA  F0CD         	movff	?a_Asservissement+3,?_atan2
   259  0003A4  C0CB  F0CE         	movff	?a_Asservissement+4,?_atan2+1
   260  0003A8  C0CC  F0CF         	movff	?a_Asservissement+5,?_atan2+2
   261  0003AC  C0C7  F0D0         	movff	?a_Asservissement,?_atan2+3
   262  0003B0  C0C8  F0D1         	movff	?a_Asservissement+1,?_atan2+4
   263  0003B4  C0C9  F0D2         	movff	?a_Asservissement+2,?_atan2+5
   264  0003B8  EC2C  F019         	call	_atan2	;wreg free
   265  0003BC  C000  F1BC         	movff	btemp,_Asserv+188
   266  0003C0  C001  F1BD         	movff	btemp+1,_Asserv+189
   267  0003C4  C002  F1BE         	movff	btemp+2,_Asserv+190
   268                           ;asserv.c: 37: Asserv.consigne_angle_atan2 *=(36
      +                          00/(2*3.14159265359));
   269  0003C8  0E3D               	movlw	61
   270  0003CA  6E03               	movwf	btemp+3
   271  0003CC  0E0F               	movlw	15
   272  0003CE  6E04               	movwf	btemp+4
   273  0003D0  0E44               	movlw	68
   274  0003D2  6E05               	movwf	btemp+5
   275  0003D4  EE01  F0BC         	lfsr	0,_Asserv+188
   276  0003D8  EC4F  F01F         	call	ftmul_f
   277                           ;asserv.c: 40: Asserv.flag_calcul_atan2 = 1;
   278  0003DC  0101               	movlb	(_Asserv+6) shr (0+8)
   279  0003DE  0E01               	movlw	1
   280  0003E0  6F06               	movwf	(_Asserv+6)& (0+255),b
   281  0003E2  6B07               	clrf	(_Asserv+7)& (0+255),b
   282                           ;asserv.c: 46: if (Asserv.flag_ass_distance)
   283  0003E4  510C               	movf	(_Asserv+12)& (0+255),w,b
   284  0003E6  110D               	iorwf	(_Asserv+13)& (0+255),w,b
   285  0003E8  B4D8               	btfsc	status,2,c
   286  0003EA  D002               	goto	l20
   287                           ;asserv.c: 47: {
   288  0003EC  D9AF               	call	_ass_distance	;wreg free
   289                           ;asserv.c: 49: }
   290  0003EE  D009               	goto	l21
   291  0003F0                     l20:
   292                           ;asserv.c: 51: {
   293  0003F0  0101               	movlb	(_Asserv+24) shr (0+8)
   294  0003F2  5118               	movf	(_Asserv+24)& (0+255),w,b
   295  0003F4  1119               	iorwf	(_Asserv+25)& (0+255),w,b
   296  0003F6  A4D8               	btfss	status,2,c
   297  0003F8  D004               	goto	l21
   298                           ;asserv.c: 53: Asserv.commande_distance = 0;
   299  0003FA  6B9B               	clrf	(_Asserv+155)& (0+255),b
   300  0003FC  6B9C               	clrf	(_Asserv+156)& (0+255),b
   301  0003FE  6B9D               	clrf	(_Asserv+157)& (0+255),b
   302  000400  6B9E               	clrf	(_Asserv+158)& (0+255),b
   303                           ;asserv.c: 54: }
   304  000402                     l21:
   305                           ;asserv.c: 56: if (Asserv.flag_ass_angle)
   306  000402  0101               	movlb	(_Asserv+14) shr (0+8)
   307  000404  510E               	movf	(_Asserv+14)& (0+255),w,b
   308  000406  110F               	iorwf	(_Asserv+15)& (0+255),w,b
   309  000408  B4D8               	btfsc	status,2,c
   310  00040A  D002               	goto	l23
   311                           ;asserv.c: 57: {
   312  00040C  D824               	call	_ass_angle	;wreg free
   313                           ;asserv.c: 59: }
   314  00040E  D005               	goto	l24
   315  000410                     l23:
   316                           ;asserv.c: 61: {
   317  000410  0101               	movlb	(_Asserv+194) shr (0+8)
   318  000412  6BC2               	clrf	(_Asserv+194)& (0+255),b
   319  000414  6BC3               	clrf	(_Asserv+195)& (0+255),b
   320  000416  6BC4               	clrf	(_Asserv+196)& (0+255),b
   321  000418  6BC5               	clrf	(_Asserv+197)& (0+255),b
   322  00041A                     l24:
   323                           ;asserv.c: 63: }
   324                           ;asserv.c: 65: if (Asserv.flag_ass_vitesse)
   325  00041A  0101               	movlb	(_Asserv+16) shr (0+8)
   326  00041C  5110               	movf	(_Asserv+16)& (0+255),w,b
   327  00041E  1111               	iorwf	(_Asserv+17)& (0+255),w,b
   328  000420  A4D8               	btfss	status,2,c
   329                           ;asserv.c: 66: ass_vitesse();
   330  000422  DB52               	call	_ass_vitesse	;wreg free
   331                           ;asserv.c: 68: if (Asserv.flag_ass_saturation_vi
      +                          tesse)
   332  000424  0101               	movlb	(_Asserv+18) shr (0+8)
   333  000426  5112               	movf	(_Asserv+18)& (0+255),w,b
   334  000428  1113               	iorwf	(_Asserv+19)& (0+255),w,b
   335  00042A  A4D8               	btfss	status,2,c
   336                           ;asserv.c: 69: ass_saturation_vitesse();
   337  00042C  DB87               	call	_ass_saturation_vitesse	;wreg free
   338                           ;asserv.c: 71: if (Asserv.flag_ass_saturation_ac
      +                          celeratio)
   339  00042E  0101               	movlb	(_Asserv+20) shr (0+8)
   340  000430  5114               	movf	(_Asserv+20)& (0+255),w,b
   341  000432  1115               	iorwf	(_Asserv+21)& (0+255),w,b
   342  000434  A4D8               	btfss	status,2,c
   343                           ;asserv.c: 72: ass_saturation_acceleration();
   344  000436  EC7E  F006         	call	_ass_saturation_acceleration	;wreg free
   345                           ;asserv.c: 74: if (Asserv.flag_ass_commande_mote
      +                          ur_polair)
   346  00043A  0101               	movlb	(_Asserv+22) shr (0+8)
   347  00043C  5116               	movf	(_Asserv+22)& (0+255),w,b
   348  00043E  1117               	iorwf	(_Asserv+23)& (0+255),w,b
   349  000440  A4D8               	btfss	status,2,c
   350                           ;asserv.c: 75: ass_commande_moteur_polaire();
   351  000442  EC00  F007         	call	_ass_commande_moteur_polaire	;wreg free
   352                           ;asserv.c: 77: if (Asserv.flag_evitement_adv)
   353  000446  0101               	movlb	(_Asserv+2) shr (0+8)
   354  000448  5102               	movf	(_Asserv+2)& (0+255),w,b
   355  00044A  1103               	iorwf	(_Asserv+3)& (0+255),w,b
   356  00044C  A4D8               	btfss	status,2,c
   357                           ;asserv.c: 78: StopAdv();
   358  00044E  ECBB  F00E         	call	_StopAdv	;wreg free
   359                           ;asserv.c: 83: ass_envoi_pwm();
   360  000452  EF31  F007         	goto	_ass_envoi_pwm	;wreg free
   361                           ;asserv.c: 84: }
   362                           ;asserv.c: 86: void ass_angle(void)
   363                           ;asserv.c: 87: {
   364  000456                     _ass_angle:
   365  000000                     
   366                           ;asserv.c: 91: float ecart_angle;
   367  000456  C15A  F162         	movff	_Asserv+90,_Asserv+98
   368  00045A  C15B  F163         	movff	_Asserv+91,_Asserv+99
   369  00045E  C15C  F164         	movff	_Asserv+92,_Asserv+100
   370  000462  C15D  F165         	movff	_Asserv+93,_Asserv+101
   371                           ;asserv.c: 103: Asserv.vitesse_ass_orientation =
      +                           (int)(Asserv.theta_actuel- Asserv.theta_precede
      +                          nt);
   372  000466  0101               	movlb	(_Asserv+54) shr (0+8)
   373  000468  C13A  FFE8         	movff	_Asserv+58,wreg
   374  00046C  5D36               	subwf	(_Asserv+54)& (0+255),w,b
   375  00046E  CFE8 F15A          	movff	wreg,_Asserv+90
   376  000472  C13B  FFE8         	movff	_Asserv+59,wreg
   377  000476  5937               	subwfb	(_Asserv+55)& (0+255),w,b
   378  000478  CFE8 F15B          	movff	wreg,_Asserv+91
   379  00047C  0B80               	andlw	128
   380  00047E  0E00               	movlw	0
   381  000480  A4D8               	btfss	status,2,c
   382  000482  0EFF               	movlw	255
   383  000484  CFE8 F15C          	movff	wreg,_Asserv+92
   384  000488  CFE8 F15D          	movff	wreg,_Asserv+93
   385                           ;asserv.c: 106: Asserv.theta_precedent = Asserv.
      +                          theta_actuel;
   386  00048C  C136  F13A         	movff	_Asserv+54,_Asserv+58
   387  000490  C137  F13B         	movff	_Asserv+55,_Asserv+59
   388  000494  C138  F13C         	movff	_Asserv+56,_Asserv+60
   389  000498  C139  F13D         	movff	_Asserv+57,_Asserv+61
   390                           ;asserv.c: 109: ecart_angle = Asserv.consigne_an
      +                          gle - Asserv.theta_actuel;
   391  00049C  C136  F000         	movff	_Asserv+54,btemp
   392  0004A0  C137  F001         	movff	_Asserv+55,btemp+1
   393  0004A4  C138  F002         	movff	_Asserv+56,btemp+2
   394  0004A8  C139  F003         	movff	_Asserv+57,btemp+3
   395  0004AC  ECD3  F01E         	call	altoft
   396  0004B0  C000  F0D9         	movff	btemp,?a_ass_angle+12
   397  0004B4  C001  F0DA         	movff	btemp+1,?a_ass_angle+13
   398  0004B8  C002  F0DB         	movff	btemp+2,?a_ass_angle+14
   399  0004BC  C1B9  F000         	movff	_Asserv+185,btemp
   400  0004C0  C1BA  F001         	movff	_Asserv+186,btemp+1
   401  0004C4  C1BB  F002         	movff	_Asserv+187,btemp+2
   402  0004C8  C0D9  F003         	movff	?a_ass_angle+12,btemp+3
   403  0004CC  C0DA  F004         	movff	?a_ass_angle+13,btemp+4
   404  0004D0  C0DB  F005         	movff	?a_ass_angle+14,btemp+5
   405  0004D4  ECD7  F01D         	call	ftsub
   406  0004D8  C000  F0D6         	movff	btemp,?a_ass_angle+9
   407  0004DC  C001  F0D7         	movff	btemp+1,?a_ass_angle+10
   408  0004E0  C002  F0D8         	movff	btemp+2,?a_ass_angle+11
   409                           ;asserv.c: 112: ecart_max_sur_KP = 1500/Asserv.t
      +                          ableau_correcteur_angle[0][Asserv.offset_correct
      +                          eur_angle];
   410  0004E4  0E03               	movlw	3
   411  0004E6  6E02               	movwf	btemp+2
   412  0004E8  6A03               	clrf	btemp+3
   413  0004EA  EE01  F0CA         	lfsr	0,_Asserv+202
   414  0004EE  CFEE F000          	movff	postinc0,btemp
   415  0004F2  CFED F001          	movff	postdec0,btemp+1
   416  0004F6  EC0E  F01F         	call	lwmul
   417  0004FA  0ECE               	movlw	low (_Asserv+206)
   418  0004FC  2404               	addwf	btemp+4,w
   419  0004FE  6EE9               	movwf	fsr0l,c
   420  000500  0E01               	movlw	high (_Asserv+206)
   421  000502  2005               	addwfc	btemp+5,w
   422  000504  6EEA               	movwf	fsr0h
   423  000506  CFEE F000          	movff	postinc0,btemp
   424  00050A  CFEE F001          	movff	postinc0,btemp+1
   425  00050E  CFEE F002          	movff	postinc0,btemp+2
   426  000512  C000  F0D9         	movff	btemp,?a_ass_angle+12
   427  000516  C001  F0DA         	movff	btemp+1,?a_ass_angle+13
   428  00051A  C002  F0DB         	movff	btemp+2,?a_ass_angle+14
   429  00051E  0E80               	movlw	128
   430  000520  6E00               	movwf	btemp
   431  000522  0EBB               	movlw	187
   432  000524  6E01               	movwf	btemp+1
   433  000526  0E44               	movlw	68
   434  000528  6E02               	movwf	btemp+2
   435  00052A  C0D9  F003         	movff	?a_ass_angle+12,btemp+3
   436  00052E  C0DA  F004         	movff	?a_ass_angle+13,btemp+4
   437  000532  C0DB  F005         	movff	?a_ass_angle+14,btemp+5
   438  000536  EC7E  F01D         	call	ftdiv
   439  00053A  C000  F0D0         	movff	btemp,?a_ass_angle+3
   440  00053E  C001  F0D1         	movff	btemp+1,?a_ass_angle+4
   441  000542  C002  F0D2         	movff	btemp+2,?a_ass_angle+5
   442                           ;asserv.c: 115: if (ecart_angle > ecart_max_sur_
      +                          KP)
   443  000546  C0D6  F003         	movff	?a_ass_angle+9,btemp+3
   444  00054A  C0D7  F004         	movff	?a_ass_angle+10,btemp+4
   445  00054E  C0D8  F005         	movff	?a_ass_angle+11,btemp+5
   446  000552  C0D0  F000         	movff	?a_ass_angle+3,btemp
   447  000556  C0D1  F001         	movff	?a_ass_angle+4,btemp+1
   448  00055A  C0D2  F002         	movff	?a_ass_angle+5,btemp+2
   449  00055E  EC9D  F01E         	call	ftcmp
   450  000562  B0D8               	btfsc	status,0,c
   451  000564  D006               	goto	l31
   452                           ;asserv.c: 116: {
   453  000566  C0D0  F0D6         	movff	?a_ass_angle+3,?a_ass_angle+9
   454  00056A  C0D1  F0D7         	movff	?a_ass_angle+4,?a_ass_angle+10
   455  00056E  C0D2  F0D8         	movff	?a_ass_angle+5,?a_ass_angle+11
   456  000572                     l31:
   457                           ;asserv.c: 118: }
   458  000572  C0D6  F1ED         	movff	?a_ass_angle+9,_Asserv+237
   459  000576  C0D7  F1EE         	movff	?a_ass_angle+10,_Asserv+238
   460  00057A  C0D8  F1EF         	movff	?a_ass_angle+11,_Asserv+239
   461                           ;asserv.c: 123: correction_KD = Asserv.tableau_c
      +                          orrecteur_angle[1][Asserv.offset_correcteur_angl
      +                          e] * (double)Asserv.vitesse_ass_orientation;
   462  00057E  0E03               	movlw	3
   463  000580  6E02               	movwf	btemp+2
   464  000582  6A03               	clrf	btemp+3
   465  000584  EE01  F0CA         	lfsr	0,_Asserv+202
   466  000588  CFEE F000          	movff	postinc0,btemp
   467  00058C  CFED F001          	movff	postdec0,btemp+1
   468  000590  EC0E  F01F         	call	lwmul
   469  000594  0ED7               	movlw	low (_Asserv+215)
   470  000596  2404               	addwf	btemp+4,w
   471  000598  6EE9               	movwf	fsr0l,c
   472  00059A  0E01               	movlw	high (_Asserv+215)
   473  00059C  2005               	addwfc	btemp+5,w
   474  00059E  6EEA               	movwf	fsr0h
   475  0005A0  CFEE F000          	movff	postinc0,btemp
   476  0005A4  CFEE F001          	movff	postinc0,btemp+1
   477  0005A8  CFEE F002          	movff	postinc0,btemp+2
   478  0005AC  C000  F0D9         	movff	btemp,?a_ass_angle+12
   479  0005B0  C001  F0DA         	movff	btemp+1,?a_ass_angle+13
   480  0005B4  C002  F0DB         	movff	btemp+2,?a_ass_angle+14
   481  0005B8  C15A  F000         	movff	_Asserv+90,btemp
   482  0005BC  C15B  F001         	movff	_Asserv+91,btemp+1
   483  0005C0  C15C  F002         	movff	_Asserv+92,btemp+2
   484  0005C4  C15D  F003         	movff	_Asserv+93,btemp+3
   485  0005C8  ECD3  F01E         	call	altoft
   486  0005CC  C0D9  F003         	movff	?a_ass_angle+12,btemp+3
   487  0005D0  C0DA  F004         	movff	?a_ass_angle+13,btemp+4
   488  0005D4  C0DB  F005         	movff	?a_ass_angle+14,btemp+5
   489  0005D8  ECA2  F01C         	call	ftmul
   490  0005DC  C000  F0D3         	movff	btemp,?a_ass_angle+6
   491  0005E0  C001  F0D4         	movff	btemp+1,?a_ass_angle+7
   492  0005E4  C002  F0D5         	movff	btemp+2,?a_ass_angle+8
   493                           ;asserv.c: 124: correction_max_KD = Asserv.table
      +                          au_correcteur_angle[1][Asserv.offset_correcteur_
      +                          angle]*13 * ((double)Asserv.vitesse_ass_orientat
      +                          ion/100);
   494  0005E8  6A00               	clrf	btemp
   495  0005EA  0E50               	movlw	80
   496  0005EC  6E01               	movwf	btemp+1
   497  0005EE  0E41               	movlw	65
   498  0005F0  6E02               	movwf	btemp+2
   499  0005F2  C000  F0D9         	movff	btemp,?a_ass_angle+12
   500  0005F6  C001  F0DA         	movff	btemp+1,?a_ass_angle+13
   501  0005FA  C002  F0DB         	movff	btemp+2,?a_ass_angle+14
   502  0005FE  0E03               	movlw	3
   503  000600  6E02               	movwf	btemp+2
   504  000602  6A03               	clrf	btemp+3
   505  000604  EE01  F0CA         	lfsr	0,_Asserv+202
   506  000608  CFEE F000          	movff	postinc0,btemp
   507  00060C  CFED F001          	movff	postdec0,btemp+1
   508  000610  EC0E  F01F         	call	lwmul
   509  000614  0ED7               	movlw	low (_Asserv+215)
   510  000616  2404               	addwf	btemp+4,w
   511  000618  6EE9               	movwf	fsr0l,c
   512  00061A  0E01               	movlw	high (_Asserv+215)
   513  00061C  2005               	addwfc	btemp+5,w
   514  00061E  6EEA               	movwf	fsr0h
   515  000620  CFEE F000          	movff	postinc0,btemp
   516  000624  CFEE F001          	movff	postinc0,btemp+1
   517  000628  CFEE F002          	movff	postinc0,btemp+2
   518  00062C  C000  F0DC         	movff	btemp,?a_ass_angle+15
   519  000630  C001  F0DD         	movff	btemp+1,?a_ass_angle+16
   520  000634  C002  F0DE         	movff	btemp+2,?a_ass_angle+17
   521  000638  6A00               	clrf	btemp
   522  00063A  0EC8               	movlw	200
   523  00063C  6E01               	movwf	btemp+1
   524  00063E  0E42               	movlw	66
   525  000640  6E02               	movwf	btemp+2
   526  000642  C000  F0DF         	movff	btemp,?a_ass_angle+18
   527  000646  C001  F0E0         	movff	btemp+1,?a_ass_angle+19
   528  00064A  C002  F0E1         	movff	btemp+2,?a_ass_angle+20
   529  00064E  C15A  F000         	movff	_Asserv+90,btemp
   530  000652  C15B  F001         	movff	_Asserv+91,btemp+1
   531  000656  C15C  F002         	movff	_Asserv+92,btemp+2
   532  00065A  C15D  F003         	movff	_Asserv+93,btemp+3
   533  00065E  ECD3  F01E         	call	altoft
   534  000662  C0DF  F003         	movff	?a_ass_angle+18,btemp+3
   535  000666  C0E0  F004         	movff	?a_ass_angle+19,btemp+4
   536  00066A  C0E1  F005         	movff	?a_ass_angle+20,btemp+5
   537  00066E  EC7E  F01D         	call	ftdiv
   538  000672  C0DC  F003         	movff	?a_ass_angle+15,btemp+3
   539  000676  C0DD  F004         	movff	?a_ass_angle+16,btemp+4
   540  00067A  C0DE  F005         	movff	?a_ass_angle+17,btemp+5
   541  00067E  ECA2  F01C         	call	ftmul
   542  000682  C0D9  F003         	movff	?a_ass_angle+12,btemp+3
   543  000686  C0DA  F004         	movff	?a_ass_angle+13,btemp+4
   544  00068A  C0DB  F005         	movff	?a_ass_angle+14,btemp+5
   545  00068E  ECA2  F01C         	call	ftmul
   546  000692  C000  F0CD         	movff	btemp,?a_ass_angle
   547  000696  C001  F0CE         	movff	btemp+1,?a_ass_angle+1
   548  00069A  C002  F0CF         	movff	btemp+2,?a_ass_angle+2
   549                           ;asserv.c: 127: if (correction_KD > correction_m
      +                          ax_KD)
   550  00069E  C0D3  F003         	movff	?a_ass_angle+6,btemp+3
   551  0006A2  C0D4  F004         	movff	?a_ass_angle+7,btemp+4
   552  0006A6  C0D5  F005         	movff	?a_ass_angle+8,btemp+5
   553  0006AA  C0CD  F000         	movff	?a_ass_angle,btemp
   554  0006AE  C0CE  F001         	movff	?a_ass_angle+1,btemp+1
   555  0006B2  C0CF  F002         	movff	?a_ass_angle+2,btemp+2
   556  0006B6  EC9D  F01E         	call	ftcmp
   557  0006BA  B0D8               	btfsc	status,0,c
   558  0006BC  D006               	goto	l32
   559                           ;asserv.c: 128: {
   560  0006BE  C0CD  F0D3         	movff	?a_ass_angle,?a_ass_angle+6
   561  0006C2  C0CE  F0D4         	movff	?a_ass_angle+1,?a_ass_angle+7
   562  0006C6  C0CF  F0D5         	movff	?a_ass_angle+2,?a_ass_angle+8
   563  0006CA                     l32:
   564                           ;asserv.c: 130: }
   565  0006CA  0E03               	movlw	3
   566  0006CC  6E02               	movwf	btemp+2
   567  0006CE  6A03               	clrf	btemp+3
   568  0006D0  EE01  F0CA         	lfsr	0,_Asserv+202
   569  0006D4  CFEE F000          	movff	postinc0,btemp
   570  0006D8  CFED F001          	movff	postdec0,btemp+1
   571  0006DC  EC0E  F01F         	call	lwmul
   572  0006E0  0ECE               	movlw	low (_Asserv+206)
   573  0006E2  2404               	addwf	btemp+4,w
   574  0006E4  6EE9               	movwf	fsr0l,c
   575  0006E6  0E01               	movlw	high (_Asserv+206)
   576  0006E8  2005               	addwfc	btemp+5,w
   577  0006EA  6EEA               	movwf	fsr0h
   578  0006EC  CFEE F000          	movff	postinc0,btemp
   579  0006F0  CFEE F001          	movff	postinc0,btemp+1
   580  0006F4  CFEE F002          	movff	postinc0,btemp+2
   581  0006F8  C0D6  F003         	movff	?a_ass_angle+9,btemp+3
   582  0006FC  C0D7  F004         	movff	?a_ass_angle+10,btemp+4
   583  000700  C0D8  F005         	movff	?a_ass_angle+11,btemp+5
   584  000704  ECA2  F01C         	call	ftmul
   585  000708  EC34  F01E         	call	fttol
   586  00070C  0101               	movlb	(_Asserv+194) shr (0+8)
   587  00070E  C000  F1C2         	movff	btemp,_Asserv+194
   588  000712  C001  F1C3         	movff	btemp+1,_Asserv+195
   589  000716  0E00               	movlw	0
   590  000718  BFC3               	btfsc	(_Asserv+195)& (0+255),7
   591  00071A  0EFF               	movlw	255
   592  00071C  6FC4               	movwf	(_Asserv+196)& (0+255),b
   593  00071E  6FC5               	movwf	(_Asserv+197)& (0+255),b
   594                           ;asserv.c: 134: Asserv.commande_angle -= (int)(c
      +                          orrection_KD);
   595  000720  C0D3  F000         	movff	?a_ass_angle+6,btemp
   596  000724  C0D4  F001         	movff	?a_ass_angle+7,btemp+1
   597  000728  C0D5  F002         	movff	?a_ass_angle+8,btemp+2
   598  00072C  EC34  F01E         	call	fttol
   599  000730  EE01  F0C2         	lfsr	0,_Asserv+194
   600  000734  5000               	movf	btemp,w
   601  000736  5EEE               	subwf	postinc0,f,c
   602  000738  5001               	movf	btemp+1,w
   603  00073A  5AEE               	subwfb	postinc0,f,c
   604  00073C  0E00               	movlw	0
   605  00073E  BE01               	btfsc	btemp+1,7
   606  000740  0EFF               	movlw	255
   607  000742  5AEE               	subwfb	postinc0,f,c
   608  000744  5AED               	subwfb	postdec0,f,c
   609  000746  52ED               	movf	postdec0,f,c
   610  000748  52ED               	movf	postdec0,f,c
   611                           ;asserv.c: 135: }
   612  00074A  0012               	return	
   613                           ;asserv.c: 137: void ass_distance(void)
   614                           ;asserv.c: 138: {
   615  00074C                     _ass_distance:
   616  000000                     
   617                           ;asserv.c: 142: float commande_distance;
   618  00074C  0101               	movlb	(_Asserv+66) shr (0+8)
   619  00074E  C17E  F000         	movff	_Asserv+126,btemp
   620  000752  5142               	movf	(_Asserv+66)& (0+255),w,b
   621  000754  5E00               	subwf	btemp,f
   622  000756  C17F  F001         	movff	_Asserv+127,btemp+1
   623  00075A  5143               	movf	(_Asserv+67)& (0+255),w,b
   624  00075C  5A01               	subwfb	btemp+1,f
   625  00075E  C180  F002         	movff	_Asserv+128,btemp+2
   626  000762  5144               	movf	(_Asserv+68)& (0+255),w,b
   627  000764  5A02               	subwfb	btemp+2,f
   628  000766  C181  F003         	movff	_Asserv+129,btemp+3
   629  00076A  5145               	movf	(_Asserv+69)& (0+255),w,b
   630  00076C  5A03               	subwfb	btemp+3,f
   631  00076E  ECD3  F01E         	call	altoft
   632  000772  C000  F0D0         	movff	btemp,?a_ass_distance+3
   633  000776  C001  F0D1         	movff	btemp+1,?a_ass_distance+4
   634  00077A  C002  F0D2         	movff	btemp+2,?a_ass_distance+5
   635                           ;asserv.c: 146: float delta_y = Asserv.y_consign
      +                          e - Asserv.y_actuel;
   636  00077E  C182  F000         	movff	_Asserv+130,btemp
   637  000782  5146               	movf	(_Asserv+70)& (0+255),w,b
   638  000784  5E00               	subwf	btemp,f
   639  000786  C183  F001         	movff	_Asserv+131,btemp+1
   640  00078A  5147               	movf	(_Asserv+71)& (0+255),w,b
   641  00078C  5A01               	subwfb	btemp+1,f
   642  00078E  C184  F002         	movff	_Asserv+132,btemp+2
   643  000792  5148               	movf	(_Asserv+72)& (0+255),w,b
   644  000794  5A02               	subwfb	btemp+2,f
   645  000796  C185  F003         	movff	_Asserv+133,btemp+3
   646  00079A  5149               	movf	(_Asserv+73)& (0+255),w,b
   647  00079C  5A03               	subwfb	btemp+3,f
   648  00079E  ECD3  F01E         	call	altoft
   649  0007A2  C000  F0D3         	movff	btemp,?a_ass_distance+6
   650  0007A6  C001  F0D4         	movff	btemp+1,?a_ass_distance+7
   651  0007AA  C002  F0D5         	movff	btemp+2,?a_ass_distance+8
   652                           ;asserv.c: 152: Asserv.vitesse_ass_distance_prec
      +                          edente = Asserv.vitesse_ass_distance;
   653  0007AE  C156  F15E         	movff	_Asserv+86,_Asserv+94
   654  0007B2  C157  F15F         	movff	_Asserv+87,_Asserv+95
   655  0007B6  C158  F160         	movff	_Asserv+88,_Asserv+96
   656  0007BA  C159  F161         	movff	_Asserv+89,_Asserv+97
   657                           ;asserv.c: 155: Asserv.vitesse_ass_distance = (i
      +                          nt)(((Asserv.x_precedent - Asserv.x_actuel)+ (As
      +                          serv.y_precedent - Asserv.y_actuel))/2);
   658  0007BE  0E02               	movlw	2
   659  0007C0  6E04               	movwf	btemp+4
   660  0007C2  6A05               	clrf	btemp+5
   661  0007C4  6A06               	clrf	btemp+6
   662  0007C6  6A07               	clrf	btemp+7
   663  0007C8  C14E  F008         	movff	_Asserv+78,btemp+8
   664  0007CC  5146               	movf	(_Asserv+70)& (0+255),w,b
   665  0007CE  5E08               	subwf	btemp+8,f
   666  0007D0  C14F  F009         	movff	_Asserv+79,btemp+9
   667  0007D4  5147               	movf	(_Asserv+71)& (0+255),w,b
   668  0007D6  5A09               	subwfb	btemp+9,f
   669  0007D8  C150  F00A         	movff	_Asserv+80,btemp+10
   670  0007DC  5148               	movf	(_Asserv+72)& (0+255),w,b
   671  0007DE  5A0A               	subwfb	btemp+10,f
   672  0007E0  C151  F00B         	movff	_Asserv+81,btemp+11
   673  0007E4  5149               	movf	(_Asserv+73)& (0+255),w,b
   674  0007E6  5A0B               	subwfb	btemp+11,f
   675  0007E8  C14A  F000         	movff	_Asserv+74,btemp
   676  0007EC  5142               	movf	(_Asserv+66)& (0+255),w,b
   677  0007EE  5E00               	subwf	btemp,f
   678  0007F0  C14B  F001         	movff	_Asserv+75,btemp+1
   679  0007F4  5143               	movf	(_Asserv+67)& (0+255),w,b
   680  0007F6  5A01               	subwfb	btemp+1,f
   681  0007F8  C14C  F002         	movff	_Asserv+76,btemp+2
   682  0007FC  5144               	movf	(_Asserv+68)& (0+255),w,b
   683  0007FE  5A02               	subwfb	btemp+2,f
   684  000800  C14D  F003         	movff	_Asserv+77,btemp+3
   685  000804  5145               	movf	(_Asserv+69)& (0+255),w,b
   686  000806  5A03               	subwfb	btemp+3,f
   687  000808  5008               	movf	btemp+8,w
   688  00080A  2600               	addwf	btemp,f
   689  00080C  5009               	movf	btemp+9,w
   690  00080E  2201               	addwfc	btemp+1,f
   691  000810  500A               	movf	btemp+10,w
   692  000812  2202               	addwfc	btemp+2,f
   693  000814  500B               	movf	btemp+11,w
   694  000816  2203               	addwfc	btemp+3,f
   695  000818  EC7F  F01E         	call	aldiv
   696  00081C  C000  F156         	movff	btemp,_Asserv+86
   697  000820  C001  F157         	movff	btemp+1,_Asserv+87
   698  000824  0E00               	movlw	0
   699  000826  BF57               	btfsc	(_Asserv+87)& (0+255),7
   700  000828  0EFF               	movlw	255
   701  00082A  6F58               	movwf	(_Asserv+88)& (0+255),b
   702  00082C  6F59               	movwf	(_Asserv+89)& (0+255),b
   703                           ;asserv.c: 158: Asserv.consigne_distance = sqrt(
      +                          ((delta_x)*(delta_x)) + ((delta_y)*(delta_y))) -
      +                           100;
   704  00082E  6A00               	clrf	btemp
   705  000830  0EC8               	movlw	200
   706  000832  6E01               	movwf	btemp+1
   707  000834  0E42               	movlw	66
   708  000836  6E02               	movwf	btemp+2
   709  000838  C000  F0DC         	movff	btemp,?a_ass_distance+15
   710  00083C  C001  F0DD         	movff	btemp+1,?a_ass_distance+16
   711  000840  C002  F0DE         	movff	btemp+2,?a_ass_distance+17
   712  000844  C0D3  F000         	movff	?a_ass_distance+6,btemp
   713  000848  C0D4  F001         	movff	?a_ass_distance+7,btemp+1
   714  00084C  C0D5  F002         	movff	?a_ass_distance+8,btemp+2
   715  000850  C0D3  F003         	movff	?a_ass_distance+6,btemp+3
   716  000854  C0D4  F004         	movff	?a_ass_distance+7,btemp+4
   717  000858  C0D5  F005         	movff	?a_ass_distance+8,btemp+5
   718  00085C  ECA2  F01C         	call	ftmul
   719  000860  C000  F0DF         	movff	btemp,?a_ass_distance+18
   720  000864  C001  F0E0         	movff	btemp+1,?a_ass_distance+19
   721  000868  C002  F0E1         	movff	btemp+2,?a_ass_distance+20
   722  00086C  C0D0  F000         	movff	?a_ass_distance+3,btemp
   723  000870  C0D1  F001         	movff	?a_ass_distance+4,btemp+1
   724  000874  C0D2  F002         	movff	?a_ass_distance+5,btemp+2
   725  000878  C0D0  F003         	movff	?a_ass_distance+3,btemp+3
   726  00087C  C0D1  F004         	movff	?a_ass_distance+4,btemp+4
   727  000880  C0D2  F005         	movff	?a_ass_distance+5,btemp+5
   728  000884  ECA2  F01C         	call	ftmul
   729  000888  C0DF  F003         	movff	?a_ass_distance+18,btemp+3
   730  00088C  C0E0  F004         	movff	?a_ass_distance+19,btemp+4
   731  000890  C0E1  F005         	movff	?a_ass_distance+20,btemp+5
   732  000894  ECD9  F01D         	call	ftadd
   733  000898  C000  F0E8         	movff	btemp,?_sqrt
   734  00089C  C001  F0E9         	movff	btemp+1,?_sqrt+1
   735  0008A0  C002  F0EA         	movff	btemp+2,?_sqrt+2
   736  0008A4  EC32  F000         	call	_sqrt	;wreg free
   737  0008A8  C0DC  F003         	movff	?a_ass_distance+15,btemp+3
   738  0008AC  C0DD  F004         	movff	?a_ass_distance+16,btemp+4
   739  0008B0  C0DE  F005         	movff	?a_ass_distance+17,btemp+5
   740  0008B4  ECD7  F01D         	call	ftsub
   741  0008B8  C000  F198         	movff	btemp,_Asserv+152
   742  0008BC  C001  F199         	movff	btemp+1,_Asserv+153
   743  0008C0  C002  F19A         	movff	btemp+2,_Asserv+154
   744                           ;asserv.c: 169: ecart_distance = Asserv.consigne
      +                          _distance;
   745  0008C4  C198  F0D6         	movff	_Asserv+152,?a_ass_distance+9
   746  0008C8  C199  F0D7         	movff	_Asserv+153,?a_ass_distance+10
   747  0008CC  C19A  F0D8         	movff	_Asserv+154,?a_ass_distance+11
   748                           ;asserv.c: 171: Asserv.debug[1] = ecart_distance
      +                          ;
   749  0008D0  C0D6  F1F0         	movff	?a_ass_distance+9,_Asserv+240
   750  0008D4  C0D7  F1F1         	movff	?a_ass_distance+10,_Asserv+241
   751  0008D8  C0D8  F1F2         	movff	?a_ass_distance+11,_Asserv+242
   752                           ;asserv.c: 174: coef_Kp_hybride = 1.2*(1 - (fabs
      +                          (Asserv.consigne_angle - Asserv.theta_actuel)/18
      +                          00));
   753  0008DC  0E9A               	movlw	154
   754  0008DE  6E00               	movwf	btemp
   755  0008E0  0E99               	movlw	153
   756  0008E2  6E01               	movwf	btemp+1
   757  0008E4  0E3F               	movlw	63
   758  0008E6  6E02               	movwf	btemp+2
   759  0008E8  C000  F0DC         	movff	btemp,?a_ass_distance+15
   760  0008EC  C001  F0DD         	movff	btemp+1,?a_ass_distance+16
   761  0008F0  C002  F0DE         	movff	btemp+2,?a_ass_distance+17
   762  0008F4  6A00               	clrf	btemp
   763  0008F6  0EE1               	movlw	225
   764  0008F8  6E01               	movwf	btemp+1
   765  0008FA  0E44               	movlw	68
   766  0008FC  6E02               	movwf	btemp+2
   767  0008FE  C000  F0DF         	movff	btemp,?a_ass_distance+18
   768  000902  C001  F0E0         	movff	btemp+1,?a_ass_distance+19
   769  000906  C002  F0E1         	movff	btemp+2,?a_ass_distance+20
   770  00090A  C136  F000         	movff	_Asserv+54,btemp
   771  00090E  C137  F001         	movff	_Asserv+55,btemp+1
   772  000912  C138  F002         	movff	_Asserv+56,btemp+2
   773  000916  C139  F003         	movff	_Asserv+57,btemp+3
   774  00091A  ECD3  F01E         	call	altoft
   775  00091E  C000  F0E2         	movff	btemp,?a_ass_distance+21
   776  000922  C001  F0E3         	movff	btemp+1,?a_ass_distance+22
   777  000926  C002  F0E4         	movff	btemp+2,?a_ass_distance+23
   778  00092A  C1B9  F000         	movff	_Asserv+185,btemp
   779  00092E  C1BA  F001         	movff	_Asserv+186,btemp+1
   780  000932  C1BB  F002         	movff	_Asserv+187,btemp+2
   781  000936  C0E2  F003         	movff	?a_ass_distance+21,btemp+3
   782  00093A  C0E3  F004         	movff	?a_ass_distance+22,btemp+4
   783  00093E  C0E4  F005         	movff	?a_ass_distance+23,btemp+5
   784  000942  ECD7  F01D         	call	ftsub
   785  000946  C000  F000         	movff	btemp,?_fabs
   786  00094A  C001  F001         	movff	btemp+1,?_fabs+1
   787  00094E  C002  F002         	movff	btemp+2,?_fabs+2
   788  000952  EC02  F000         	call	_fabs	;wreg free
   789  000956  C0DF  F003         	movff	?a_ass_distance+18,btemp+3
   790  00095A  C0E0  F004         	movff	?a_ass_distance+19,btemp+4
   791  00095E  C0E1  F005         	movff	?a_ass_distance+20,btemp+5
   792  000962  EC7E  F01D         	call	ftdiv
   793  000966  C000  F0E5         	movff	btemp,?a_ass_distance+24
   794  00096A  C001  F0E6         	movff	btemp+1,?a_ass_distance+25
   795  00096E  C002  F0E7         	movff	btemp+2,?a_ass_distance+26
   796  000972  6A00               	clrf	btemp
   797  000974  0E80               	movlw	128
   798  000976  6E01               	movwf	btemp+1
   799  000978  0E3F               	movlw	63
   800  00097A  6E02               	movwf	btemp+2
   801  00097C  C0E5  F003         	movff	?a_ass_distance+24,btemp+3
   802  000980  C0E6  F004         	movff	?a_ass_distance+25,btemp+4
   803  000984  C0E7  F005         	movff	?a_ass_distance+26,btemp+5
   804  000988  ECD7  F01D         	call	ftsub
   805  00098C  C0DC  F003         	movff	?a_ass_distance+15,btemp+3
   806  000990  C0DD  F004         	movff	?a_ass_distance+16,btemp+4
   807  000994  C0DE  F005         	movff	?a_ass_distance+17,btemp+5
   808  000998  ECA2  F01C         	call	ftmul
   809  00099C  C000  F0CD         	movff	btemp,?a_ass_distance
   810  0009A0  C001  F0CE         	movff	btemp+1,?a_ass_distance+1
   811  0009A4  C002  F0CF         	movff	btemp+2,?a_ass_distance+2
   812                           ;asserv.c: 177: commande_distance = (ecart_dista
      +                          nce * Asserv.tableau_correcteur_distance[0][Asse
      +                          rv.offset_correcteur_distance] );
   813  0009A8  0E03               	movlw	3
   814  0009AA  6E02               	movwf	btemp+2
   815  0009AC  6A03               	clrf	btemp+3
   816  0009AE  EE01  F0A3         	lfsr	0,_Asserv+163
   817  0009B2  CFEE F000          	movff	postinc0,btemp
   818  0009B6  CFED F001          	movff	postdec0,btemp+1
   819  0009BA  EC0E  F01F         	call	lwmul
   820  0009BE  0EA7               	movlw	low (_Asserv+167)
   821  0009C0  2404               	addwf	btemp+4,w
   822  0009C2  6EE9               	movwf	fsr0l,c
   823  0009C4  0E01               	movlw	high (_Asserv+167)
   824  0009C6  2005               	addwfc	btemp+5,w
   825  0009C8  6EEA               	movwf	fsr0h
   826  0009CA  CFEE F000          	movff	postinc0,btemp
   827  0009CE  CFEE F001          	movff	postinc0,btemp+1
   828  0009D2  CFEE F002          	movff	postinc0,btemp+2
   829  0009D6  C0D6  F003         	movff	?a_ass_distance+9,btemp+3
   830  0009DA  C0D7  F004         	movff	?a_ass_distance+10,btemp+4
   831  0009DE  C0D8  F005         	movff	?a_ass_distance+11,btemp+5
   832  0009E2  ECA2  F01C         	call	ftmul
   833  0009E6  C000  F0D9         	movff	btemp,?a_ass_distance+12
   834  0009EA  C001  F0DA         	movff	btemp+1,?a_ass_distance+13
   835  0009EE  C002  F0DB         	movff	btemp+2,?a_ass_distance+14
   836                           ;asserv.c: 178: commande_distance -= Asserv.tabl
      +                          eau_correcteur_distance[1][Asserv.offset_correct
      +                          eur_distance] * Asserv.vitesse_ass_distance;
   837  0009F2  0E03               	movlw	3
   838  0009F4  6E02               	movwf	btemp+2
   839  0009F6  6A03               	clrf	btemp+3
   840  0009F8  EE01  F0A3         	lfsr	0,_Asserv+163
   841  0009FC  CFEE F000          	movff	postinc0,btemp
   842  000A00  CFED F001          	movff	postdec0,btemp+1
   843  000A04  EC0E  F01F         	call	lwmul
   844  000A08  0EB0               	movlw	low (_Asserv+176)
   845  000A0A  2404               	addwf	btemp+4,w
   846  000A0C  6EE9               	movwf	fsr0l,c
   847  000A0E  0E01               	movlw	high (_Asserv+176)
   848  000A10  2005               	addwfc	btemp+5,w
   849  000A12  6EEA               	movwf	fsr0h
   850  000A14  CFEE F000          	movff	postinc0,btemp
   851  000A18  CFEE F001          	movff	postinc0,btemp+1
   852  000A1C  CFEE F002          	movff	postinc0,btemp+2
   853  000A20  C000  F0DC         	movff	btemp,?a_ass_distance+15
   854  000A24  C001  F0DD         	movff	btemp+1,?a_ass_distance+16
   855  000A28  C002  F0DE         	movff	btemp+2,?a_ass_distance+17
   856  000A2C  C156  F000         	movff	_Asserv+86,btemp
   857  000A30  C157  F001         	movff	_Asserv+87,btemp+1
   858  000A34  C158  F002         	movff	_Asserv+88,btemp+2
   859  000A38  C159  F003         	movff	_Asserv+89,btemp+3
   860  000A3C  ECD3  F01E         	call	altoft
   861  000A40  C0DC  F003         	movff	?a_ass_distance+15,btemp+3
   862  000A44  C0DD  F004         	movff	?a_ass_distance+16,btemp+4
   863  000A48  C0DE  F005         	movff	?a_ass_distance+17,btemp+5
   864  000A4C  ECA2  F01C         	call	ftmul
   865  000A50  C000  F003         	movff	btemp,btemp+3
   866  000A54  C001  F004         	movff	btemp+1,btemp+4
   867  000A58  C002  F005         	movff	btemp+2,btemp+5
   868  000A5C  0ED9               	movlw	low (?a_ass_distance+12)
   869  000A5E  6EE9               	movwf	fsr0l,c
   870  000A60  0E00               	movlw	high (?a_ass_distance+12)
   871  000A62  6EEA               	movwf	fsr0h,c
   872  000A64  EC31  F01F         	call	ftsub_f
   873                           ;asserv.c: 179: commande_distance *= coef_Kp_hyb
      +                          ride;
   874  000A68  C0CD  F003         	movff	?a_ass_distance,btemp+3
   875  000A6C  C0CE  F004         	movff	?a_ass_distance+1,btemp+4
   876  000A70  C0CF  F005         	movff	?a_ass_distance+2,btemp+5
   877  000A74  0ED9               	movlw	low (?a_ass_distance+12)
   878  000A76  6EE9               	movwf	fsr0l,c
   879  000A78  0E00               	movlw	high (?a_ass_distance+12)
   880  000A7A  6EEA               	movwf	fsr0h,c
   881  000A7C  EC4F  F01F         	call	ftmul_f
   882                           ;asserv.c: 180: Asserv.commande_distance = (int)
      +                          commande_distance;
   883  000A80  C0D9  F000         	movff	?a_ass_distance+12,btemp
   884  000A84  C0DA  F001         	movff	?a_ass_distance+13,btemp+1
   885  000A88  C0DB  F002         	movff	?a_ass_distance+14,btemp+2
   886  000A8C  EC34  F01E         	call	fttol
   887  000A90  0101               	movlb	(_Asserv+155) shr (0+8)
   888  000A92  C000  F19B         	movff	btemp,_Asserv+155
   889  000A96  C001  F19C         	movff	btemp+1,_Asserv+156
   890  000A9A  0E00               	movlw	0
   891  000A9C  BF9C               	btfsc	(_Asserv+156)& (0+255),7
   892  000A9E  0EFF               	movlw	255
   893  000AA0  6F9D               	movwf	(_Asserv+157)& (0+255),b
   894  000AA2  6F9E               	movwf	(_Asserv+158)& (0+255),b
   895                           ;asserv.c: 183: Asserv.ecart_distance_precedent 
      +                          = (int)ecart_distance;
   896  000AA4  C0D6  F000         	movff	?a_ass_distance+9,btemp
   897  000AA8  C0D7  F001         	movff	?a_ass_distance+10,btemp+1
   898  000AAC  C0D8  F002         	movff	?a_ass_distance+11,btemp+2
   899  000AB0  EC34  F01E         	call	fttol
   900  000AB4  C000  F194         	movff	btemp,_Asserv+148
   901  000AB8  C001  F195         	movff	btemp+1,_Asserv+149
   902  000ABC  0E00               	movlw	0
   903  000ABE  BF95               	btfsc	(_Asserv+149)& (0+255),7
   904  000AC0  0EFF               	movlw	255
   905  000AC2  6F96               	movwf	(_Asserv+150)& (0+255),b
   906  000AC4  6F97               	movwf	(_Asserv+151)& (0+255),b
   907                           ;asserv.c: 192: }
   908  000AC6  0012               	return	
   909                           ;asserv.c: 194: void ass_vitesse(void)
   910                           ;asserv.c: 195: {
   911  000AC8                     _ass_vitesse:
   912  000000                     
   913                           ;asserv.c: 199: signed long long ecart_vitesse_r
      +                          oue_D;
   914  000AC8  0101               	movlb	(_Asserv+134) shr (0+8)
   915  000ACA  C166  F000         	movff	_Asserv+102,btemp
   916  000ACE  5186               	movf	(_Asserv+134)& (0+255),w,b
   917  000AD0  5E00               	subwf	btemp,f
   918  000AD2  C167  F001         	movff	_Asserv+103,btemp+1
   919  000AD6  5187               	movf	(_Asserv+135)& (0+255),w,b
   920  000AD8  5A01               	subwfb	btemp+1,f
   921  000ADA  C168  F002         	movff	_Asserv+104,btemp+2
   922  000ADE  5188               	movf	(_Asserv+136)& (0+255),w,b
   923  000AE0  5A02               	subwfb	btemp+2,f
   924  000AE2  C169  F003         	movff	_Asserv+105,btemp+3
   925  000AE6  5189               	movf	(_Asserv+137)& (0+255),w,b
   926  000AE8  5A03               	subwfb	btemp+3,f
   927  000AEA  C000  F0CD         	movff	btemp,?a_ass_vitesse
   928  000AEE  C001  F0CE         	movff	btemp+1,?a_ass_vitesse+1
   929  000AF2  C002  F0CF         	movff	btemp+2,?a_ass_vitesse+2
   930  000AF6  C003  F0D0         	movff	btemp+3,?a_ass_vitesse+3
   931                           ;asserv.c: 208: ecart_vitesse_roue_G = Asserv.vi
      +                          tesse_roue_G - Asserv.consigne_vitesse;
   932  000AFA  C16A  F000         	movff	_Asserv+106,btemp
   933  000AFE  5186               	movf	(_Asserv+134)& (0+255),w,b
   934  000B00  5E00               	subwf	btemp,f
   935  000B02  C16B  F001         	movff	_Asserv+107,btemp+1
   936  000B06  5187               	movf	(_Asserv+135)& (0+255),w,b
   937  000B08  5A01               	subwfb	btemp+1,f
   938  000B0A  C16C  F002         	movff	_Asserv+108,btemp+2
   939  000B0E  5188               	movf	(_Asserv+136)& (0+255),w,b
   940  000B10  5A02               	subwfb	btemp+2,f
   941  000B12  C16D  F003         	movff	_Asserv+109,btemp+3
   942  000B16  5189               	movf	(_Asserv+137)& (0+255),w,b
   943  000B18  5A03               	subwfb	btemp+3,f
   944  000B1A  C000  F004         	movff	btemp,btemp+4
   945  000B1E  C001  F005         	movff	btemp+1,btemp+5
   946  000B22  C002  F006         	movff	btemp+2,btemp+6
   947  000B26  C003  F007         	movff	btemp+3,btemp+7
   948                           ;asserv.c: 211: Asserv.commande_roue_D = (ecart_
      +                          vitesse_roue_D * 1) - (Asserv.acceleration_roue_
      +                          D * 0);
   949  000B2A  C0CD  F124         	movff	?a_ass_vitesse,_Asserv+36
   950  000B2E  C0CE  F125         	movff	?a_ass_vitesse+1,_Asserv+37
   951                           ;asserv.c: 212: Asserv.commande_roue_G = (ecart_
      +                          vitesse_roue_G * 1) - (Asserv.acceleration_roue_
      +                          G * 0);
   952  000B32  C004  F122         	movff	btemp+4,_Asserv+34
   953  000B36  C005  F123         	movff	btemp+5,_Asserv+35
   954                           ;asserv.c: 213: }
   955  000B3A  0012               	return	
   956                           ;asserv.c: 215: void ass_saturation_vitesse(void
      +                          )
   957                           ;asserv.c: 216: {
   958  000B3C                     _ass_saturation_vitesse:
   959  000000                     
   960                           ;asserv.c: 220: signed long long vitesse_max_ang
      +                          le = Asserv.tableau_coef_saturation_vitesse[Asse
      +                          rv.offset_coef_saturation_vitesse]*Asserv.vitess
      +                          e_max;
   961  000B3C  0E03               	movlw	3
   962  000B3E  6E02               	movwf	btemp+2
   963  000B40  6A03               	clrf	btemp+3
   964  000B42  EE01  F0E9         	lfsr	0,_Asserv+233
   965  000B46  CFEE F000          	movff	postinc0,btemp
   966  000B4A  CFED F001          	movff	postdec0,btemp+1
   967  000B4E  EC0E  F01F         	call	lwmul
   968  000B52  0EE0               	movlw	low (_Asserv+224)
   969  000B54  2404               	addwf	btemp+4,w
   970  000B56  6EE9               	movwf	fsr0l,c
   971  000B58  0E01               	movlw	high (_Asserv+224)
   972  000B5A  2005               	addwfc	btemp+5,w
   973  000B5C  6EEA               	movwf	fsr0h
   974  000B5E  CFEE F000          	movff	postinc0,btemp
   975  000B62  CFEE F001          	movff	postinc0,btemp+1
   976  000B66  CFEE F002          	movff	postinc0,btemp+2
   977  000B6A  C000  F0D1         	movff	btemp,?a_ass_saturation_vitesse+4
   978  000B6E  C001  F0D2         	movff	btemp+1,?a_ass_saturation_vitesse+5
   979  000B72  C002  F0D3         	movff	btemp+2,?a_ass_saturation_vitesse+6
   980  000B76  C18A  F000         	movff	_Asserv+138,btemp
   981  000B7A  C18B  F001         	movff	_Asserv+139,btemp+1
   982  000B7E  C18C  F002         	movff	_Asserv+140,btemp+2
   983  000B82  C18D  F003         	movff	_Asserv+141,btemp+3
   984  000B86  ECD3  F01E         	call	altoft
   985  000B8A  C0D1  F003         	movff	?a_ass_saturation_vitesse+4,btemp+3
   986  000B8E  C0D2  F004         	movff	?a_ass_saturation_vitesse+5,btemp+4
   987  000B92  C0D3  F005         	movff	?a_ass_saturation_vitesse+6,btemp+5
   988  000B96  ECA2  F01C         	call	ftmul
   989  000B9A  EC34  F01E         	call	fttol
   990  000B9E  C000  F0CD         	movff	btemp,?a_ass_saturation_vitesse
   991  000BA2  C001  F0CE         	movff	btemp+1,?a_ass_saturation_vitesse+1
   992  000BA6  C002  F0CF         	movff	btemp+2,?a_ass_saturation_vitesse+2
   993  000BAA  C003  F0D0         	movff	btemp+3,?a_ass_saturation_vitesse+3
   994                           ;asserv.c: 227: if (fabs(Asserv.commande_distanc
      +                          e) > Asserv.vitesse_max)
   995  000BAE  C19B  F000         	movff	_Asserv+155,btemp
   996  000BB2  C19C  F001         	movff	_Asserv+156,btemp+1
   997  000BB6  C19D  F002         	movff	_Asserv+157,btemp+2
   998  000BBA  C19E  F003         	movff	_Asserv+158,btemp+3
   999  000BBE  ECD3  F01E         	call	altoft
  1000  000BC2  C000  F000         	movff	btemp,?_fabs
  1001  000BC6  C001  F001         	movff	btemp+1,?_fabs+1
  1002  000BCA  C002  F002         	movff	btemp+2,?_fabs+2
  1003  000BCE  EC02  F000         	call	_fabs	;wreg free
  1004  000BD2  C000  F0D1         	movff	btemp,?a_ass_saturation_vitesse+4
  1005  000BD6  C001  F0D2         	movff	btemp+1,?a_ass_saturation_vitesse+5
  1006  000BDA  C002  F0D3         	movff	btemp+2,?a_ass_saturation_vitesse+6
  1007  000BDE  C18A  F000         	movff	_Asserv+138,btemp
  1008  000BE2  C18B  F001         	movff	_Asserv+139,btemp+1
  1009  000BE6  C18C  F002         	movff	_Asserv+140,btemp+2
  1010  000BEA  C18D  F003         	movff	_Asserv+141,btemp+3
  1011  000BEE  ECD3  F01E         	call	altoft
  1012  000BF2  C0D1  F003         	movff	?a_ass_saturation_vitesse+4,btemp+3
  1013  000BF6  C0D2  F004         	movff	?a_ass_saturation_vitesse+5,btemp+4
  1014  000BFA  C0D3  F005         	movff	?a_ass_saturation_vitesse+6,btemp+5
  1015  000BFE  EC9D  F01E         	call	ftcmp
  1016  000C02  B0D8               	btfsc	status,0,c
  1017  000C04  D027               	goto	l36
  1018                           ;asserv.c: 228: {
  1019  000C06  0101               	movlb	(_Asserv+155) shr (0+8)
  1020  000C08  AF9E               	btfss	(_Asserv+158)& (0+255),7,b
  1021  000C0A  D01C               	goto	l37
  1022                           ;asserv.c: 230: Asserv.commande_distance = -Asse
      +                          rv.vitesse_max;
  1023  000C0C  C18A  F000         	movff	_Asserv+138,btemp
  1024  000C10  C18B  F001         	movff	_Asserv+139,btemp+1
  1025  000C14  C18C  F002         	movff	_Asserv+140,btemp+2
  1026  000C18  C18D  F003         	movff	_Asserv+141,btemp+3
  1027  000C1C  1E00               	comf	btemp,f
  1028  000C1E  1E01               	comf	btemp+1,f
  1029  000C20  1E02               	comf	btemp+2,f
  1030  000C22  1E03               	comf	btemp+3,f
  1031  000C24  2A00               	incf	btemp,f
  1032  000C26  B4D8               	btfsc	status,2,c
  1033  000C28  2A01               	incf	btemp+1,f
  1034  000C2A  B4D8               	btfsc	status,2,c
  1035  000C2C  2A02               	incf	btemp+2,f
  1036  000C2E  B4D8               	btfsc	status,2,c
  1037  000C30  2A03               	incf	btemp+3,f
  1038  000C32  C000  F19B         	movff	btemp,_Asserv+155
  1039  000C36  C001  F19C         	movff	btemp+1,_Asserv+156
  1040  000C3A  C002  F19D         	movff	btemp+2,_Asserv+157
  1041  000C3E  C003  F19E         	movff	btemp+3,_Asserv+158
  1042                           ;asserv.c: 231: else
  1043  000C42  D008               	goto	l36
  1044  000C44                     l37:
  1045                           ;asserv.c: 232: Asserv.commande_distance = Asser
      +                          v.vitesse_max;
  1046  000C44  C18A  F19B         	movff	_Asserv+138,_Asserv+155
  1047  000C48  C18B  F19C         	movff	_Asserv+139,_Asserv+156
  1048  000C4C  C18C  F19D         	movff	_Asserv+140,_Asserv+157
  1049  000C50  C18D  F19E         	movff	_Asserv+141,_Asserv+158
  1050  000C54                     l36:
  1051                           ;asserv.c: 233: }
  1052  000C54  C1C2  F000         	movff	_Asserv+194,btemp
  1053  000C58  C1C3  F001         	movff	_Asserv+195,btemp+1
  1054  000C5C  C1C4  F002         	movff	_Asserv+196,btemp+2
  1055  000C60  C1C5  F003         	movff	_Asserv+197,btemp+3
  1056  000C64  ECD3  F01E         	call	altoft
  1057  000C68  C000  F000         	movff	btemp,?_fabs
  1058  000C6C  C001  F001         	movff	btemp+1,?_fabs+1
  1059  000C70  C002  F002         	movff	btemp+2,?_fabs+2
  1060  000C74  EC02  F000         	call	_fabs	;wreg free
  1061  000C78  C000  F0D1         	movff	btemp,?a_ass_saturation_vitesse+4
  1062  000C7C  C001  F0D2         	movff	btemp+1,?a_ass_saturation_vitesse+5
  1063  000C80  C002  F0D3         	movff	btemp+2,?a_ass_saturation_vitesse+6
  1064  000C84  C0CD  F000         	movff	?a_ass_saturation_vitesse,btemp
  1065  000C88  C0CE  F001         	movff	?a_ass_saturation_vitesse+1,btemp+1
  1066  000C8C  C0CF  F002         	movff	?a_ass_saturation_vitesse+2,btemp+2
  1067  000C90  C0D0  F003         	movff	?a_ass_saturation_vitesse+3,btemp+3
  1068  000C94  ECD3  F01E         	call	altoft
  1069  000C98  C0D1  F003         	movff	?a_ass_saturation_vitesse+4,btemp+3
  1070  000C9C  C0D2  F004         	movff	?a_ass_saturation_vitesse+5,btemp+4
  1071  000CA0  C0D3  F005         	movff	?a_ass_saturation_vitesse+6,btemp+5
  1072  000CA4  EC9D  F01E         	call	ftcmp
  1073  000CA8  B0D8               	btfsc	status,0,c
  1074  000CAA  0012               	return	
  1075                           ;asserv.c: 237: {
  1076  000CAC  0101               	movlb	(_Asserv+194) shr (0+8)
  1077  000CAE  AFC5               	btfss	(_Asserv+197)& (0+255),7,b
  1078  000CB0  D01C               	goto	l40
  1079                           ;asserv.c: 239: Asserv.commande_angle = -vitesse
      +                          _max_angle;
  1080  000CB2  C0CD  F000         	movff	?a_ass_saturation_vitesse,btemp
  1081  000CB6  C0CE  F001         	movff	?a_ass_saturation_vitesse+1,btemp+1
  1082  000CBA  C0CF  F002         	movff	?a_ass_saturation_vitesse+2,btemp+2
  1083  000CBE  C0D0  F003         	movff	?a_ass_saturation_vitesse+3,btemp+3
  1084  000CC2  1E00               	comf	btemp,f
  1085  000CC4  1E01               	comf	btemp+1,f
  1086  000CC6  1E02               	comf	btemp+2,f
  1087  000CC8  1E03               	comf	btemp+3,f
  1088  000CCA  2A00               	incf	btemp,f
  1089  000CCC  B4D8               	btfsc	status,2,c
  1090  000CCE  2A01               	incf	btemp+1,f
  1091  000CD0  B4D8               	btfsc	status,2,c
  1092  000CD2  2A02               	incf	btemp+2,f
  1093  000CD4  B4D8               	btfsc	status,2,c
  1094  000CD6  2A03               	incf	btemp+3,f
  1095  000CD8  C000  F1C2         	movff	btemp,_Asserv+194
  1096  000CDC  C001  F1C3         	movff	btemp+1,_Asserv+195
  1097  000CE0  C002  F1C4         	movff	btemp+2,_Asserv+196
  1098  000CE4  C003  F1C5         	movff	btemp+3,_Asserv+197
  1099                           ;asserv.c: 240: else
  1100  000CE8  0012               	return	
  1101  000CEA                     l40:
  1102                           ;asserv.c: 241: Asserv.commande_angle = vitesse_
      +                          max_angle;
  1103  000CEA  C0CD  F1C2         	movff	?a_ass_saturation_vitesse,_Asserv+194
  1104  000CEE  C0CE  F1C3         	movff	?a_ass_saturation_vitesse+1,_Asserv+195
  1105  000CF2  C0CF  F1C4         	movff	?a_ass_saturation_vitesse+2,_Asserv+196
  1106  000CF6  C0D0  F1C5         	movff	?a_ass_saturation_vitesse+3,_Asserv+197
  1107                           ;asserv.c: 242: }
  1108  000CFA  0012               	return	
  1109                           ;asserv.c: 245: void ass_saturation_acceleration
      +                          (void)
  1110                           ;asserv.c: 246: {
  1111  000CFC                     _ass_saturation_acceleration:
  1112  000000                     
  1113                           ;asserv.c: 261: if (fabs(Asserv.vitesse_ass_orie
      +                          ntation-Asserv.vitesse_ass_orientation_precede) 
      +                          > Asserv.acceleration_max)
  1114  000CFC  0101               	movlb	(_Asserv+98) shr (0+8)
  1115  000CFE  C15A  F000         	movff	_Asserv+90,btemp
  1116  000D02  5162               	movf	(_Asserv+98)& (0+255),w,b
  1117  000D04  5E00               	subwf	btemp,f
  1118  000D06  C15B  F001         	movff	_Asserv+91,btemp+1
  1119  000D0A  5163               	movf	(_Asserv+99)& (0+255),w,b
  1120  000D0C  5A01               	subwfb	btemp+1,f
  1121  000D0E  C15C  F002         	movff	_Asserv+92,btemp+2
  1122  000D12  5164               	movf	(_Asserv+100)& (0+255),w,b
  1123  000D14  5A02               	subwfb	btemp+2,f
  1124  000D16  C15D  F003         	movff	_Asserv+93,btemp+3
  1125  000D1A  5165               	movf	(_Asserv+101)& (0+255),w,b
  1126  000D1C  5A03               	subwfb	btemp+3,f
  1127  000D1E  ECD3  F01E         	call	altoft
  1128  000D22  C000  F000         	movff	btemp,?_fabs
  1129  000D26  C001  F001         	movff	btemp+1,?_fabs+1
  1130  000D2A  C002  F002         	movff	btemp+2,?_fabs+2
  1131  000D2E  EC02  F000         	call	_fabs	;wreg free
  1132  000D32  C000  F0CD         	movff	btemp,?a_ass_saturation_acceleration
  1133  000D36  C001  F0CE         	movff	btemp+1,?a_ass_saturation_acceleration+1
  1134  000D3A  C002  F0CF         	movff	btemp+2,?a_ass_saturation_acceleration+2
  1135  000D3E  C18E  F000         	movff	_Asserv+142,btemp
  1136  000D42  C18F  F001         	movff	_Asserv+143,btemp+1
  1137  000D46  C190  F002         	movff	_Asserv+144,btemp+2
  1138  000D4A  C191  F003         	movff	_Asserv+145,btemp+3
  1139  000D4E  ECD3  F01E         	call	altoft
  1140  000D52  C0CD  F003         	movff	?a_ass_saturation_acceleration,btemp+3
  1141  000D56  C0CE  F004         	movff	?a_ass_saturation_acceleration+1,btemp+4
  1142  000D5A  C0CF  F005         	movff	?a_ass_saturation_acceleration+2,btemp+5
  1143  000D5E  EC9D  F01E         	call	ftcmp
  1144  000D62  B0D8               	btfsc	status,0,c
  1145  000D64  0012               	return	
  1146                           ;asserv.c: 262: {
  1147  000D66  0101               	movlb	(_Asserv+249) shr (0+8)
  1148  000D68  51F9               	movf	(_Asserv+249)& (0+255),w,b
  1149  000D6A  0E80               	movlw	128
  1150  000D6C  B4D8               	btfsc	status,2,c
  1151  000D6E  19FA               	xorwf	(_Asserv+250)& (0+255),w,b
  1152  000D70  0E3F               	movlw	63
  1153  000D72  B4D8               	btfsc	status,2,c
  1154  000D74  19FB               	xorwf	(_Asserv+251)& (0+255),w,b
  1155  000D76  B4D8               	btfsc	status,2,c
  1156  000D78  D005               	goto	l44
  1157                           ;asserv.c: 264: Asserv.debug[4] = 1;
  1158  000D7A  6BF9               	clrf	(_Asserv+249)& (0+255),b
  1159  000D7C  0E80               	movlw	128
  1160  000D7E  6FFA               	movwf	(_Asserv+250)& (0+255),b
  1161  000D80  0E3F               	movlw	63
  1162  000D82  6FFB               	movwf	(_Asserv+251)& (0+255),b
  1163  000D84                     l44:
  1164                           ;asserv.c: 266: if (Asserv.vitesse_ass_orientati
      +                          on-Asserv.vitesse_ass_orientation_precede < 0)
  1165  000D84  0101               	movlb	(_Asserv+98) shr (0+8)
  1166  000D86  C15A  F000         	movff	_Asserv+90,btemp
  1167  000D8A  5162               	movf	(_Asserv+98)& (0+255),w,b
  1168  000D8C  5E00               	subwf	btemp,f
  1169  000D8E  C15B  F001         	movff	_Asserv+91,btemp+1
  1170  000D92  5163               	movf	(_Asserv+99)& (0+255),w,b
  1171  000D94  5A01               	subwfb	btemp+1,f
  1172  000D96  C15C  F002         	movff	_Asserv+92,btemp+2
  1173  000D9A  5164               	movf	(_Asserv+100)& (0+255),w,b
  1174  000D9C  5A02               	subwfb	btemp+2,f
  1175  000D9E  C15D  F003         	movff	_Asserv+93,btemp+3
  1176  000DA2  5165               	movf	(_Asserv+101)& (0+255),w,b
  1177  000DA4  5A03               	subwfb	btemp+3,f
  1178  000DA6  AE03               	btfss	btemp+3,7
  1179  000DA8  D015               	goto	l45
  1180                           ;asserv.c: 267: Asserv.commande_angle = Asserv.c
      +                          ommande_angle_precedente - Asserv.acceleration_m
      +                          ax;
  1181  000DAA  EE01  F08E         	lfsr	0,_Asserv+142
  1182  000DAE  50EE               	movf	postinc0,w,c
  1183  000DB0  5DC6               	subwf	(_Asserv+198)& (0+255),w,b
  1184  000DB2  CFE8 F1C2          	movff	wreg,_Asserv+194
  1185  000DB6  50EE               	movf	postinc0,w,c
  1186  000DB8  59C7               	subwfb	(_Asserv+199)& (0+255),w,b
  1187  000DBA  CFE8 F1C3          	movff	wreg,_Asserv+195
  1188  000DBE  50EE               	movf	postinc0,w,c
  1189  000DC0  59C8               	subwfb	(_Asserv+200)& (0+255),w,b
  1190  000DC2  CFE8 F1C4          	movff	wreg,_Asserv+196
  1191  000DC6  50ED               	movf	postdec0,w,c
  1192  000DC8  59C9               	subwfb	(_Asserv+201)& (0+255),w,b
  1193  000DCA  CFE8 F1C5          	movff	wreg,_Asserv+197
  1194  000DCE  52ED               	movf	postdec0,f,c
  1195  000DD0  52ED               	movf	postdec0,f,c
  1196                           ;asserv.c: 268: else
  1197  000DD2  0012               	return	
  1198  000DD4                     l45:
  1199                           ;asserv.c: 269: Asserv.commande_angle = Asserv.c
      +                          ommande_angle_precedente + Asserv.acceleration_m
      +                          ax;
  1200  000DD4  EE01  F08E         	lfsr	0,_Asserv+142
  1201  000DD8  0101               	movlb	(_Asserv+198) shr (0+8)
  1202  000DDA  50EE               	movf	postinc0,w,c
  1203  000DDC  25C6               	addwf	(_Asserv+198)& (0+255),w,b
  1204  000DDE  CFE8 F1C2          	movff	wreg,_Asserv+194
  1205  000DE2  50EE               	movf	postinc0,w,c
  1206  000DE4  21C7               	addwfc	(_Asserv+199)& (0+255),w,b
  1207  000DE6  CFE8 F1C3          	movff	wreg,_Asserv+195
  1208  000DEA  50EE               	movf	postinc0,w,c
  1209  000DEC  21C8               	addwfc	(_Asserv+200)& (0+255),w,b
  1210  000DEE  CFE8 F1C4          	movff	wreg,_Asserv+196
  1211  000DF2  50ED               	movf	postdec0,w,c
  1212  000DF4  21C9               	addwfc	(_Asserv+201)& (0+255),w,b
  1213  000DF6  CFE8 F1C5          	movff	wreg,_Asserv+197
  1214  000DFA  52ED               	movf	postdec0,f,c
  1215  000DFC  52ED               	movf	postdec0,f,c
  1216                           ;asserv.c: 270: }
  1217  000DFE  0012               	return	
  1218                           ;asserv.c: 297: void ass_commande_moteur_polaire
      +                          (void)
  1219                           ;asserv.c: 298: {
  1220  000E00                     _ass_commande_moteur_polaire:
  1221  000000                     
  1222                           ;asserv.c: 302: Asserv.commande_roue_D = Asserv.
      +                          commande_distance + Asserv.commande_angle + Asse
      +                          rv.commande_correction_epis_d;
  1223  000E00  EE01  F02C         	lfsr	0,_Asserv+44
  1224  000E04  CFEE F000          	movff	postinc0,btemp
  1225  000E08  CFED F001          	movff	postdec0,btemp+1
  1226  000E0C  C19B  FFE8         	movff	_Asserv+155,wreg
  1227  000E10  2400               	addwf	btemp,w
  1228  000E12  6E02               	movwf	btemp+2
  1229  000E14  C19C  FFE8         	movff	_Asserv+156,wreg
  1230  000E18  2001               	addwfc	btemp+1,w
  1231  000E1A  6E03               	movwf	btemp+3
  1232  000E1C  C1C2  FFE8         	movff	_Asserv+194,wreg
  1233  000E20  2402               	addwf	btemp+2,w
  1234  000E22  CFE8 F124          	movff	wreg,_Asserv+36
  1235  000E26  C1C3  FFE8         	movff	_Asserv+195,wreg
  1236  000E2A  2003               	addwfc	btemp+3,w
  1237  000E2C  CFE8 F125          	movff	wreg,_Asserv+37
  1238                           ;asserv.c: 303: Asserv.commande_roue_G = Asserv.
      +                          commande_distance - Asserv.commande_angle + Asse
      +                          rv.commande_correction_epis_g;
  1239  000E30  EE01  F09B         	lfsr	0,_Asserv+155
  1240  000E34  CFEE F000          	movff	postinc0,btemp
  1241  000E38  CFED F001          	movff	postdec0,btemp+1
  1242  000E3C  C1C2  FFE8         	movff	_Asserv+194,wreg
  1243  000E40  5C00               	subwf	btemp,w
  1244  000E42  6E02               	movwf	btemp+2
  1245  000E44  C1C3  FFE8         	movff	_Asserv+195,wreg
  1246  000E48  5801               	subwfb	btemp+1,w
  1247  000E4A  6E03               	movwf	btemp+3
  1248  000E4C  C12A  FFE8         	movff	_Asserv+42,wreg
  1249  000E50  2402               	addwf	btemp+2,w
  1250  000E52  CFE8 F122          	movff	wreg,_Asserv+34
  1251  000E56  C12B  FFE8         	movff	_Asserv+43,wreg
  1252  000E5A  2003               	addwfc	btemp+3,w
  1253  000E5C  CFE8 F123          	movff	wreg,_Asserv+35
  1254                           ;asserv.c: 304: }
  1255  000E60  0012               	return	
  1256                           ;asserv.c: 306: void ass_envoi_pwm(void)
  1257                           ;asserv.c: 307: {
  1258  000E62                     _ass_envoi_pwm:
  1259  000000                     
  1260                           ;asserv.c: 311: signed int commande_roue_G;
  1261  000E62  0101               	movlb	(_Asserv+10) shr (0+8)
  1262  000E64  510A               	movf	(_Asserv+10)& (0+255),w,b
  1263  000E66  110B               	iorwf	(_Asserv+11)& (0+255),w,b
  1264  000E68  B4D8               	btfsc	status,2,c
  1265  000E6A  D009               	goto	l49
  1266                           ;asserv.c: 321: {
  1267  000E6C  C11E  FFF3         	movff	_Asserv+30,prodl
  1268  000E70  C11F  FFF4         	movff	_Asserv+31,prodh
  1269                           ;asserv.c: 323: commande_roue_D = Asserv.command
      +                          e_roue_D_clavier;
  1270  000E74  C120  FFF6         	movff	_Asserv+32,tblptrl
  1271  000E78  C121  FFF7         	movff	_Asserv+33,tblptrh
  1272                           ;asserv.c: 324: }
  1273  000E7C  D008               	goto	l50
  1274  000E7E                     l49:
  1275                           ;asserv.c: 326: {
  1276  000E7E  C122  FFF3         	movff	_Asserv+34,prodl
  1277  000E82  C123  FFF4         	movff	_Asserv+35,prodh
  1278                           ;asserv.c: 328: commande_roue_D = Asserv.command
      +                          e_roue_D;
  1279  000E86  C124  FFF6         	movff	_Asserv+36,tblptrl
  1280  000E8A  C125  FFF7         	movff	_Asserv+37,tblptrh
  1281  000E8E                     l50:
  1282                           ;asserv.c: 329: }
  1283                           ;asserv.c: 333: if ((Strategie.etat_match == 1) 
      +                          || (Asserv.flag_stop_asserv))
  1284  000E8E  0100               	movlb	(_Strategie+8) shr (0+8)
  1285  000E90  5158               	movf	(_Strategie+8)& (0+255),w,b
  1286  000E92  0A01               	xorlw	1
  1287  000E94  1159               	iorwf	(_Strategie+9)& (0+255),w,b
  1288  000E96  B4D8               	btfsc	status,2,c
  1289  000E98  D005               	goto	u210
  1290  000E9A  0101               	movlb	_Asserv shr (0+8)
  1291  000E9C  5100               	movf	_Asserv& (0+255),w,b
  1292  000E9E  1101               	iorwf	(_Asserv+1)& (0+255),w,b
  1293  000EA0  B4D8               	btfsc	status,2,c
  1294  000EA2  D004               	goto	l51
  1295  000EA4                     u210:
  1296                           ;asserv.c: 334: {
  1297  000EA4  6AF3               	clrf	prodl,c
  1298  000EA6  6AF4               	clrf	prodh,c
  1299                           ;asserv.c: 336: commande_roue_D = 0;
  1300  000EA8  6AF6               	clrf	tblptrl,c
  1301  000EAA  6AF7               	clrf	tblptrh,c
  1302  000EAC                     l51:
  1303                           ;asserv.c: 337: }
  1304  000EAC  BEF4               	btfsc	prodh,7,c
  1305  000EAE  D006               	goto	l52
  1306                           ;asserv.c: 342: {
  1307  000EB0  8082               	bsf	3970,0,c	;volatile
  1308                           ;asserv.c: 344: PWM_moteurGauche.u16b.Full = com
      +                          mande_roue_G;
  1309  000EB2  CFF3 F0CF          	movff	prodl,?a_ass_envoi_pwm+2
  1310  000EB6  CFF4 F0D0          	movff	prodh,?a_ass_envoi_pwm+3
  1311  000EBA  D00E               	goto	L1
  1312                           ;asserv.c: 345: PDC1H = PWM_moteurGauche.u16b.Oc
      +                          tet.H;
  1313                           ;asserv.c: 346: PDC1L = PWM_moteurGauche.u16b.Oc
      +                          tet.L;
  1314                           ;asserv.c: 347: }
  1315  000EBC                     l52:
  1316                           ;asserv.c: 349: {
  1317  000EBC  9082               	bcf	3970,0,c	;volatile
  1318                           ;asserv.c: 351: PWM_moteurGauche.u16b.Full = -co
      +                          mmande_roue_G;
  1319  000EBE  CFF3 F000          	movff	prodl,btemp
  1320  000EC2  CFF4 F001          	movff	prodh,btemp+1
  1321  000EC6  1E00               	comf	btemp,f
  1322  000EC8  1E01               	comf	btemp+1,f
  1323  000ECA  2A00               	incf	btemp,f
  1324  000ECC  B4D8               	btfsc	status,2,c
  1325  000ECE  2A01               	incf	btemp+1,f
  1326  000ED0  C000  F0CF         	movff	btemp,?a_ass_envoi_pwm+2
  1327  000ED4  C001  F0D0         	movff	btemp+1,?a_ass_envoi_pwm+3
  1328  000ED8                     L1:
  1329                           ;asserv.c: 352: PDC1H = PWM_moteurGauche.u16b.Oc
      +                          tet.H;
  1330  000ED8  0100               	movlb	__Lparam shr (0+8)
  1331  000EDA  51D0               	movf	(?a_ass_envoi_pwm+3)^(__Lparam& (0+65280))
      +                          ,w
  1332  000EDC  6E76               	movwf	3958,c
  1333                           ;asserv.c: 353: PDC1L = PWM_moteurGauche.u16b.Oc
      +                          tet.L;
  1334  000EDE  51CF               	movf	(?a_ass_envoi_pwm+2)^(__Lparam& (0+65280))
      +                          ,w
  1335  000EE0  6E77               	movwf	3959,c
  1336                           ;asserv.c: 354: }
  1337                           ;asserv.c: 358: if (commande_roue_D >= 0)
  1338  000EE2  BEF7               	btfsc	tblptrh,7,c
  1339  000EE4  D00B               	goto	l54
  1340                           ;asserv.c: 359: {
  1341  000EE6  8282               	bsf	3970,1,c	;volatile
  1342                           ;asserv.c: 361: PWM_moteurDroit.u16b.Full = comm
      +                          ande_roue_D;
  1343  000EE8  CFF6 F0CD          	movff	tblptrl,?a_ass_envoi_pwm
  1344  000EEC  CFF7 F0CE          	movff	tblptrh,?a_ass_envoi_pwm+1
  1345                           ;asserv.c: 362: PDC0H = PWM_moteurDroit.u16b.Oct
      +                          et.H;
  1346  000EF0  0100               	movlb	__Lparam shr (0+8)
  1347  000EF2  51CE               	movf	(?a_ass_envoi_pwm+1)^(__Lparam& (0+65280))
      +                          ,w
  1348  000EF4  6E78               	movwf	3960,c
  1349                           ;asserv.c: 363: PDC0L = PWM_moteurDroit.u16b.Oct
      +                          et.L;
  1350  000EF6  51CD               	movf	?a_ass_envoi_pwm^(__Lparam& (0+65280)),w
  1351  000EF8  6E79               	movwf	3961,c
  1352                           ;asserv.c: 364: }
  1353  000EFA  0012               	return	
  1354  000EFC                     l54:
  1355                           ;asserv.c: 366: {
  1356  000EFC  9282               	bcf	3970,1,c	;volatile
  1357                           ;asserv.c: 368: PWM_moteurDroit.u16b.Full = -com
      +                          mande_roue_D;
  1358  000EFE  CFF6 F000          	movff	tblptrl,btemp
  1359  000F02  CFF7 F001          	movff	tblptrh,btemp+1
  1360  000F06  1E00               	comf	btemp,f
  1361  000F08  1E01               	comf	btemp+1,f
  1362  000F0A  2A00               	incf	btemp,f
  1363  000F0C  B4D8               	btfsc	status,2,c
  1364  000F0E  2A01               	incf	btemp+1,f
  1365  000F10  C000  F0CD         	movff	btemp,?a_ass_envoi_pwm
  1366  000F14  C001  F0CE         	movff	btemp+1,?a_ass_envoi_pwm+1
  1367                           ;asserv.c: 369: PDC0H = PWM_moteurDroit.u16b.Oct
      +                          et.H;
  1368  000F18  0100               	movlb	__Lparam shr (0+8)
  1369  000F1A  51CE               	movf	(?a_ass_envoi_pwm+1)^(__Lparam& (0+65280))
      +                          ,w
  1370  000F1C  6E78               	movwf	3960,c
  1371                           ;asserv.c: 370: PDC0L = PWM_moteurDroit.u16b.Oct
      +                          et.L;
  1372  000F1E  51CD               	movf	?a_ass_envoi_pwm^(__Lparam& (0+65280)),w
  1373  000F20  6E79               	movwf	3961,c
  1374                           ;asserv.c: 371: }
  1375                           ;asserv.c: 372: }
  1376  000F22  0012               	return	
  1377  000F24  00C5               	dw	?_inversion_repaire
  1378  000F26                     _inversion_repaire:
  1379  000000                     
  1380                           ;asserv.c: 382: Asserv.angle_inversion_repere = 
      +                          consigne_angle_deg;
  1381  000F26  C0C5  F11C         	movff	?_inversion_repaire,_Asserv+28
  1382  000F2A  C0C6  F11D         	movff	?_inversion_repaire+1,_Asserv+29
  1383                           ;asserv.c: 383: Asserv.inversion_repere = !Asser
      +                          v.inversion_repere;
  1384  000F2E  0101               	movlb	(_Asserv+26) shr (0+8)
  1385  000F30  511A               	movf	(_Asserv+26)& (0+255),w,b
  1386  000F32  111B               	iorwf	(_Asserv+27)& (0+255),w,b
  1387  000F34  0E00               	movlw	0
  1388  000F36  B4D8               	btfsc	status,2,c
  1389  000F38  0E01               	movlw	1
  1390  000F3A  6F1A               	movwf	(_Asserv+26)& (0+255),b
  1391  000F3C  6B1B               	clrf	(_Asserv+27)& (0+255),b
  1392                           ;asserv.c: 418: }
  1393  000F3E  0012               	return	
  1394  000F40  00B0               	dw	?_tourner_angle
  1395  000F42                     _tourner_angle:
  1396  000000                     
  1397                           ;asserv.c: 423: float seuil_angle_bas;
  1398  000F42  0100               	movlb	__Lparam shr (0+8)
  1399  000F44  6BBE               	clrf	(?a_tourner_angle+6)^(__Lparam& (0+65280))
  1400  000F46  6BBF               	clrf	(?a_tourner_angle+7)^(__Lparam& (0+65280))
  1401  000F48  6BC0               	clrf	(?a_tourner_angle+8)^(__Lparam& (0+65280))
  1402  000F4A  6BC1               	clrf	(?a_tourner_angle+9)^(__Lparam& (0+65280))
  1403                           ;asserv.c: 428: consigne_angle_deg *= 10;
  1404  000F4C  0E0A               	movlw	10
  1405  000F4E  6E04               	movwf	btemp+4
  1406  000F50  6A05               	clrf	btemp+5
  1407  000F52  6A06               	clrf	btemp+6
  1408  000F54  6A07               	clrf	btemp+7
  1409  000F56  0EB0               	movlw	low ?_tourner_angle
  1410  000F58  6EE9               	movwf	fsr0l,c
  1411  000F5A  0E00               	movlw	high ?_tourner_angle
  1412  000F5C  6EEA               	movwf	fsr0h,c
  1413  000F5E  EC3B  F01F         	call	almul_f
  1414                           ;asserv.c: 429: consigne_angle_deg *= Asserv.ori
      +                          entation_depart;
  1415  000F62  C192  F004         	movff	_Asserv+146,btemp+4
  1416  000F66  C193  F005         	movff	_Asserv+147,btemp+5
  1417  000F6A  0E00               	movlw	0
  1418  000F6C  BE05               	btfsc	btemp+5,7
  1419  000F6E  0EFF               	movlw	255
  1420  000F70  6E06               	movwf	btemp+6
  1421  000F72  6E07               	movwf	btemp+7
  1422  000F74  0EB0               	movlw	low ?_tourner_angle
  1423  000F76  6EE9               	movwf	fsr0l,c
  1424  000F78  0E00               	movlw	high ?_tourner_angle
  1425  000F7A  6EEA               	movwf	fsr0h,c
  1426  000F7C  EC3B  F01F         	call	almul_f
  1427                           ;asserv.c: 432: if ((consigne_angle_deg > 1700) 
      +                          || (consigne_angle_deg < -1700) || (consigne_ang
      +                          le_deg == 0))
  1428  000F80  51B3               	movf	(?_tourner_angle+3)^(__Lparam& (0+65280)),
      +                          w
  1429  000F82  0A80               	xorlw	128
  1430  000F84  0F80               	addlw	128
  1431  000F86  E108               	bnz	u245
  1432  000F88  0E00               	movlw	0
  1433  000F8A  5DB2               	subwf	(?_tourner_angle+2)^(__Lparam& (0+65280))
      +                          ,w
  1434  000F8C  E105               	bnz	u245
  1435  000F8E  0E06               	movlw	6
  1436  000F90  5DB1               	subwf	(?_tourner_angle+1)^(__Lparam& (0+65280))
      +                          ,w
  1437  000F92  E102               	bnz	u245
  1438  000F94  0EA5               	movlw	165
  1439  000F96  5DB0               	subwf	?_tourner_angle^(__Lparam& (0+65280)),w
  1440  000F98                     u245:
  1441  000F98  B0D8               	btfsc	status,0,c
  1442  000F9A  D015               	goto	u270
  1443  000F9C  51B3               	movf	(?_tourner_angle+3)^(__Lparam& (0+65280)),
      +                          w
  1444  000F9E  0A80               	xorlw	128
  1445  000FA0  0F81               	addlw	-127
  1446  000FA2  E108               	bnz	u255
  1447  000FA4  0EFF               	movlw	255
  1448  000FA6  5DB2               	subwf	(?_tourner_angle+2)^(__Lparam& (0+65280))
      +                          ,w
  1449  000FA8  E105               	bnz	u255
  1450  000FAA  0EF9               	movlw	249
  1451  000FAC  5DB1               	subwf	(?_tourner_angle+1)^(__Lparam& (0+65280))
      +                          ,w
  1452  000FAE  E102               	bnz	u255
  1453  000FB0  0E5C               	movlw	92
  1454  000FB2  5DB0               	subwf	?_tourner_angle^(__Lparam& (0+65280)),w
  1455  000FB4                     u255:
  1456  000FB4  A0D8               	btfss	status,0,c
  1457  000FB6  D007               	goto	u270
  1458  000FB8  0100               	movlb	__Lparam shr (0+8)
  1459  000FBA  51B3               	movf	(?_tourner_angle+3)^(__Lparam& (0+65280)),
      +                          w
  1460  000FBC  11B0               	iorwf	?_tourner_angle^(__Lparam& (0+65280)),w
  1461  000FBE  11B1               	iorwf	(?_tourner_angle+1)^(__Lparam& (0+65280))
      +                          ,w
  1462  000FC0  11B2               	iorwf	(?_tourner_angle+2)^(__Lparam& (0+65280))
      +                          ,w
  1463  000FC2  A4D8               	btfss	status,2,c
  1464  000FC4  D045               	goto	l58
  1465  000FC6                     u270:
  1466                           ;asserv.c: 433: {
  1467  000FC6  C11C  F000         	movff	_Asserv+28,btemp
  1468  000FCA  C11D  F001         	movff	_Asserv+29,btemp+1
  1469  000FCE  0E00               	movlw	0
  1470  000FD0  BE01               	btfsc	btemp+1,7
  1471  000FD2  0EFF               	movlw	255
  1472  000FD4  6E02               	movwf	btemp+2
  1473  000FD6  6E03               	movwf	btemp+3
  1474  000FD8  0100               	movlb	__Lparam shr (0+8)
  1475  000FDA  19B3               	xorwf	(?_tourner_angle+3)^(__Lparam& (0+65280))
      +                          ,w
  1476  000FDC  E108               	bnz	u295
  1477  000FDE  51B2               	movf	(?_tourner_angle+2)^(__Lparam& (0+65280)),
      +                          w
  1478  000FE0  1802               	xorwf	btemp+2,w
  1479  000FE2  E105               	bnz	u295
  1480  000FE4  51B1               	movf	(?_tourner_angle+1)^(__Lparam& (0+65280)),
      +                          w
  1481  000FE6  1801               	xorwf	btemp+1,w
  1482  000FE8  E102               	bnz	u295
  1483  000FEA  51B0               	movf	?_tourner_angle^(__Lparam& (0+65280)),w
  1484  000FEC  1800               	xorwf	btemp,w
  1485  000FEE                     u295:
  1486  000FEE  B4D8               	btfsc	status,2,c
  1487  000FF0  D005               	goto	l59
  1488                           ;asserv.c: 436: inversion_repaire(consigne_angle
      +                          _deg);
  1489  000FF2  C0B0  F0C5         	movff	?_tourner_angle,?_inversion_repaire
  1490  000FF6  C0B1  F0C6         	movff	?_tourner_angle+1,?_inversion_repaire+1
  1491  000FFA  DF95               	call	_inversion_repaire	;wreg free
  1492  000FFC                     l59:
  1493                           ;asserv.c: 439: if (consigne_angle_deg > 1700)
  1494  000FFC  0100               	movlb	__Lparam shr (0+8)
  1495  000FFE  51B3               	movf	(?_tourner_angle+3)^(__Lparam& (0+65280)),
      +                          w
  1496  001000  0A80               	xorlw	128
  1497  001002  0F80               	addlw	128
  1498  001004  E108               	bnz	u305
  1499  001006  0E00               	movlw	0
  1500  001008  5DB2               	subwf	(?_tourner_angle+2)^(__Lparam& (0+65280))
      +                          ,w
  1501  00100A  E105               	bnz	u305
  1502  00100C  0E06               	movlw	6
  1503  00100E  5DB1               	subwf	(?_tourner_angle+1)^(__Lparam& (0+65280))
      +                          ,w
  1504  001010  E102               	bnz	u305
  1505  001012  0EA5               	movlw	165
  1506  001014  5DB0               	subwf	?_tourner_angle^(__Lparam& (0+65280)),w
  1507  001016                     u305:
  1508  001016  A0D8               	btfss	status,0,c
  1509  001018  D005               	goto	l60
  1510                           ;asserv.c: 440: {
  1511  00101A  0EF8               	movlw	248
  1512  00101C  27B0               	addwf	?_tourner_angle^(__Lparam& (0+65280)),f
  1513  00101E  23B1               	addwfc	(?_tourner_angle+1)^(__Lparam& (0+65280)
      +                          ),f
  1514  001020  0EFF               	movlw	255
  1515  001022  D014               	goto	L13
  1516                           ;asserv.c: 442: }
  1517  001024                     l60:
  1518  001024  0100               	movlb	__Lparam shr (0+8)
  1519  001026  51B3               	movf	(?_tourner_angle+3)^(__Lparam& (0+65280)),
      +                          w
  1520  001028  0A80               	xorlw	128
  1521  00102A  0F81               	addlw	-127
  1522  00102C  E108               	bnz	u315
  1523  00102E  0EFF               	movlw	255
  1524  001030  5DB2               	subwf	(?_tourner_angle+2)^(__Lparam& (0+65280))
      +                          ,w
  1525  001032  E105               	bnz	u315
  1526  001034  0EF9               	movlw	249
  1527  001036  5DB1               	subwf	(?_tourner_angle+1)^(__Lparam& (0+65280))
      +                          ,w
  1528  001038  E102               	bnz	u315
  1529  00103A  0E5C               	movlw	92
  1530  00103C  5DB0               	subwf	?_tourner_angle^(__Lparam& (0+65280)),w
  1531  00103E                     u315:
  1532  00103E  B0D8               	btfsc	status,0,c
  1533  001040  D007               	goto	l58
  1534                           ;asserv.c: 444: {
  1535  001042  0E08               	movlw	8
  1536  001044  27B0               	addwf	?_tourner_angle^(__Lparam& (0+65280)),f
  1537  001046  0E07               	movlw	7
  1538  001048  23B1               	addwfc	(?_tourner_angle+1)^(__Lparam& (0+65280)
      +                          ),f
  1539  00104A  0E00               	movlw	0
  1540  00104C                     L13:
  1541  00104C  23B2               	addwfc	(?_tourner_angle+2)^(__Lparam& (0+65280)
      +                          ),f
  1542  00104E  23B3               	addwfc	(?_tourner_angle+3)^(__Lparam& (0+65280)
      +                          ),f
  1543                           ;asserv.c: 446: }
  1544  001050                     l58:
  1545                           ;asserv.c: 450: Asserv.vitesse_max = vitesse;
  1546  001050  C0B4  F18A         	movff	?_tourner_angle+4,_Asserv+138
  1547  001054  C0B5  F18B         	movff	?_tourner_angle+5,_Asserv+139
  1548  001058  C0B6  F18C         	movff	?_tourner_angle+6,_Asserv+140
  1549  00105C  C0B7  F18D         	movff	?_tourner_angle+7,_Asserv+141
  1550                           ;asserv.c: 451: Asserv.consigne_angle = consigne
      +                          _angle_deg;
  1551  001060  C0B0  F000         	movff	?_tourner_angle,btemp
  1552  001064  C0B1  F001         	movff	?_tourner_angle+1,btemp+1
  1553  001068  C0B2  F002         	movff	?_tourner_angle+2,btemp+2
  1554  00106C  C0B3  F003         	movff	?_tourner_angle+3,btemp+3
  1555  001070  ECD3  F01E         	call	altoft
  1556  001074  C000  F1B9         	movff	btemp,_Asserv+185
  1557  001078  C001  F1BA         	movff	btemp+1,_Asserv+186
  1558  00107C  C002  F1BB         	movff	btemp+2,_Asserv+187
  1559                           ;asserv.c: 452: Asserv.flag_ass_angle = 1;
  1560  001080  0101               	movlb	(_Asserv+14) shr (0+8)
  1561  001082  0E01               	movlw	1
  1562  001084  6F0E               	movwf	(_Asserv+14)& (0+255),b
  1563  001086  6B0F               	clrf	(_Asserv+15)& (0+255),b
  1564                           ;asserv.c: 453: Asserv.flag_ass_distance = 0;
  1565  001088  6B0C               	clrf	(_Asserv+12)& (0+255),b
  1566  00108A  6B0D               	clrf	(_Asserv+13)& (0+255),b
  1567                           ;asserv.c: 454: Asserv.flag_ass_commande_moteur_
      +                          polair = 1;
  1568  00108C  0E01               	movlw	1
  1569  00108E  6F16               	movwf	(_Asserv+22)& (0+255),b
  1570  001090  6B17               	clrf	(_Asserv+23)& (0+255),b
  1571                           ;asserv.c: 455: Asserv.flag_ass_saturation_vites
      +                          se = 1;
  1572  001092  6F12               	movwf	(_Asserv+18)& (0+255),b
  1573  001094  6B13               	clrf	(_Asserv+19)& (0+255),b
  1574                           ;asserv.c: 456: Asserv.flag_ass_saturation_accel
      +                          eratio = 0;
  1575  001096  6B14               	clrf	(_Asserv+20)& (0+255),b
  1576  001098  6B15               	clrf	(_Asserv+21)& (0+255),b
  1577                           ;asserv.c: 457: Asserv.offset_correcteur_angle =
      +                           2;
  1578  00109A  6BCD               	clrf	(_Asserv+205)& (0+255),b
  1579  00109C  6BCC               	clrf	(_Asserv+204)& (0+255),b
  1580  00109E  6BCB               	clrf	(_Asserv+203)& (0+255),b
  1581  0010A0  0E02               	movlw	2
  1582  0010A2  6FCA               	movwf	(_Asserv+202)& (0+255),b
  1583                           ;asserv.c: 458: Asserv.offset_coef_saturation_vi
      +                          tesse = 2;
  1584  0010A4  6BEC               	clrf	(_Asserv+236)& (0+255),b
  1585  0010A6  6BEB               	clrf	(_Asserv+235)& (0+255),b
  1586  0010A8  6BEA               	clrf	(_Asserv+234)& (0+255),b
  1587  0010AA  6FE9               	movwf	(_Asserv+233)& (0+255),b
  1588                           ;asserv.c: 461: seuil_angle_bas = Asserv.consign
      +                          e_angle - 10.0;
  1589  0010AC  6A00               	clrf	btemp
  1590  0010AE  0E20               	movlw	32
  1591  0010B0  6E01               	movwf	btemp+1
  1592  0010B2  0E41               	movlw	65
  1593  0010B4  6E02               	movwf	btemp+2
  1594  0010B6  C000  F0C2         	movff	btemp,?a_tourner_angle+10
  1595  0010BA  C001  F0C3         	movff	btemp+1,?a_tourner_angle+11
  1596  0010BE  C002  F0C4         	movff	btemp+2,?a_tourner_angle+12
  1597  0010C2  C1B9  F000         	movff	_Asserv+185,btemp
  1598  0010C6  C1BA  F001         	movff	_Asserv+186,btemp+1
  1599  0010CA  C1BB  F002         	movff	_Asserv+187,btemp+2
  1600  0010CE  C0C2  F003         	movff	?a_tourner_angle+10,btemp+3
  1601  0010D2  C0C3  F004         	movff	?a_tourner_angle+11,btemp+4
  1602  0010D6  C0C4  F005         	movff	?a_tourner_angle+12,btemp+5
  1603  0010DA  ECD7  F01D         	call	ftsub
  1604  0010DE  C000  F0B8         	movff	btemp,?a_tourner_angle
  1605  0010E2  C001  F0B9         	movff	btemp+1,?a_tourner_angle+1
  1606  0010E6  C002  F0BA         	movff	btemp+2,?a_tourner_angle+2
  1607                           ;asserv.c: 462: seuil_angle_haut = Asserv.consig
      +                          ne_angle + 10.0;
  1608  0010EA  6A00               	clrf	btemp
  1609  0010EC  0E20               	movlw	32
  1610  0010EE  6E01               	movwf	btemp+1
  1611  0010F0  0E41               	movlw	65
  1612  0010F2  6E02               	movwf	btemp+2
  1613  0010F4  C000  F0C2         	movff	btemp,?a_tourner_angle+10
  1614  0010F8  C001  F0C3         	movff	btemp+1,?a_tourner_angle+11
  1615  0010FC  C002  F0C4         	movff	btemp+2,?a_tourner_angle+12
  1616  001100  C1B9  F000         	movff	_Asserv+185,btemp
  1617  001104  C1BA  F001         	movff	_Asserv+186,btemp+1
  1618  001108  C1BB  F002         	movff	_Asserv+187,btemp+2
  1619  00110C  C0C2  F003         	movff	?a_tourner_angle+10,btemp+3
  1620  001110  C0C3  F004         	movff	?a_tourner_angle+11,btemp+4
  1621  001114  C0C4  F005         	movff	?a_tourner_angle+12,btemp+5
  1622  001118  ECD9  F01D         	call	ftadd
  1623  00111C  C000  F0BB         	movff	btemp,?a_tourner_angle+3
  1624  001120  C001  F0BC         	movff	btemp+1,?a_tourner_angle+4
  1625  001124  C002  F0BD         	movff	btemp+2,?a_tourner_angle+5
  1626  001128                     l64:
  1627                           ;asserv.c: 465: while(1)
  1628                           ;asserv.c: 466: {
  1629  001128  C136  F000         	movff	_Asserv+54,btemp
  1630  00112C  C137  F001         	movff	_Asserv+55,btemp+1
  1631  001130  C138  F002         	movff	_Asserv+56,btemp+2
  1632  001134  C139  F003         	movff	_Asserv+57,btemp+3
  1633  001138  ECD3  F01E         	call	altoft
  1634  00113C  C0BB  F003         	movff	?a_tourner_angle+3,btemp+3
  1635  001140  C0BC  F004         	movff	?a_tourner_angle+4,btemp+4
  1636  001144  C0BD  F005         	movff	?a_tourner_angle+5,btemp+5
  1637  001148  EC9D  F01E         	call	ftcmp
  1638  00114C  B0D8               	btfsc	status,0,c
  1639  00114E  D036               	goto	l66
  1640  001150  C136  F000         	movff	_Asserv+54,btemp
  1641  001154  C137  F001         	movff	_Asserv+55,btemp+1
  1642  001158  C138  F002         	movff	_Asserv+56,btemp+2
  1643  00115C  C139  F003         	movff	_Asserv+57,btemp+3
  1644  001160  ECD3  F01E         	call	altoft
  1645  001164  C000  F003         	movff	btemp,btemp+3
  1646  001168  C001  F004         	movff	btemp+1,btemp+4
  1647  00116C  C002  F005         	movff	btemp+2,btemp+5
  1648  001170  C0B8  F000         	movff	?a_tourner_angle,btemp
  1649  001174  C0B9  F001         	movff	?a_tourner_angle+1,btemp+1
  1650  001178  C0BA  F002         	movff	?a_tourner_angle+2,btemp+2
  1651  00117C  EC9D  F01E         	call	ftcmp
  1652                           ;asserv.c: 469: {
  1653  001180  0100               	movlb	__Lparam shr (0+8)
  1654  001182  B0D8               	btfsc	status,0,c
  1655  001184  D01C               	goto	L8
  1656  001186  2BBE               	incf	(?a_tourner_angle+6)^(__Lparam& (0+65280))
      +                          ,f
  1657  001188  0E00               	movlw	0
  1658  00118A  23BF               	addwfc	(?a_tourner_angle+7)^(__Lparam& (0+65280
      +                          )),f
  1659  00118C  23C0               	addwfc	(?a_tourner_angle+8)^(__Lparam& (0+65280
      +                          )),f
  1660  00118E  23C1               	addwfc	(?a_tourner_angle+9)^(__Lparam& (0+65280
      +                          )),f
  1661                           ;asserv.c: 474: puts("+");
  1662  001190  0E1B               	movlw	low u19
  1663  001192  6FC5               	movwf	?_puts^(__Lparam& (0+65280))
  1664  001194  0E03               	movlw	high u19
  1665  001196  6FC6               	movwf	(?_puts+1)^(__Lparam& (0+65280))
  1666  001198  ECF3  F01B         	call	_puts	;wreg free
  1667                           ;asserv.c: 477: if (compteur_sortie >= 2000)
  1668  00119C  0100               	movlb	__Lparam shr (0+8)
  1669  00119E  51C1               	movf	(?a_tourner_angle+9)^(__Lparam& (0+65280))
      +                          ,w
  1670  0011A0  0A80               	xorlw	128
  1671  0011A2  0F80               	addlw	128
  1672  0011A4  E108               	bnz	u355
  1673  0011A6  0E00               	movlw	0
  1674  0011A8  5DC0               	subwf	(?a_tourner_angle+8)^(__Lparam& (0+65280)
      +                          ),w
  1675  0011AA  E105               	bnz	u355
  1676  0011AC  0E07               	movlw	7
  1677  0011AE  5DBF               	subwf	(?a_tourner_angle+7)^(__Lparam& (0+65280)
      +                          ),w
  1678  0011B0  E102               	bnz	u355
  1679  0011B2  0ED0               	movlw	208
  1680  0011B4  5DBE               	subwf	(?a_tourner_angle+6)^(__Lparam& (0+65280)
      +                          ),w
  1681  0011B6                     u355:
  1682  0011B6  B0D8               	btfsc	status,0,c
  1683  0011B8  D007               	goto	l65
  1684  0011BA  D7B6               	goto	l64
  1685                           ;asserv.c: 478: break;
  1686                           ;asserv.c: 479: }
  1687                           ;asserv.c: 480: else
  1688  0011BC                     l66:
  1689                           ;asserv.c: 481: {
  1690  0011BC  0100               	movlb	__Lparam shr (0+8)
  1691  0011BE                     L8:
  1692  0011BE  6BBE               	clrf	(?a_tourner_angle+6)^(__Lparam& (0+65280))
  1693  0011C0  6BBF               	clrf	(?a_tourner_angle+7)^(__Lparam& (0+65280))
  1694  0011C2  6BC0               	clrf	(?a_tourner_angle+8)^(__Lparam& (0+65280))
  1695  0011C4  6BC1               	clrf	(?a_tourner_angle+9)^(__Lparam& (0+65280))
  1696                           ;asserv.c: 484: }
  1697                           ;asserv.c: 485: }
  1698  0011C6  D7B0               	goto	l64
  1699  0011C8                     l65:
  1700                           ;asserv.c: 487: Asserv.flag_sortie_evitement_adv
      +                           = 0;
  1701  0011C8  0101               	movlb	(_Asserv+4) shr (0+8)
  1702  0011CA  6B04               	clrf	(_Asserv+4)& (0+255),b
  1703  0011CC  6B05               	clrf	(_Asserv+5)& (0+255),b
  1704                           ;asserv.c: 488: }
  1705  0011CE  0012               	return	
  1706  0011D0  0083               	dw	?_tourner_cible
  1707  0011D2                     _tourner_cible:
  1708  000000                     
  1709                           ;asserv.c: 493: float seuil_angle_bas;
  1710  0011D2  0100               	movlb	__Lparam shr (0+8)
  1711  0011D4  6B95               	clrf	(?a_tourner_cible+6)^(__Lparam& (0+65280))
  1712  0011D6  6B96               	clrf	(?a_tourner_cible+7)^(__Lparam& (0+65280))
  1713  0011D8  6B97               	clrf	(?a_tourner_cible+8)^(__Lparam& (0+65280))
  1714  0011DA  6B98               	clrf	(?a_tourner_cible+9)^(__Lparam& (0+65280))
  1715                           ;asserv.c: 496: signed long long consigne_angle_
      +                          deg = 0;
  1716  0011DC  6A00               	clrf	btemp
  1717  0011DE  6A01               	clrf	btemp+1
  1718  0011E0  6A02               	clrf	btemp+2
  1719  0011E2  6A03               	clrf	btemp+3
  1720                           ;asserv.c: 499: if (Asserv.inversion_repere)
  1721  0011E4  0101               	movlb	(_Asserv+26) shr (0+8)
  1722  0011E6  511A               	movf	(_Asserv+26)& (0+255),w,b
  1723  0011E8  111B               	iorwf	(_Asserv+27)& (0+255),w,b
  1724  0011EA  B4D8               	btfsc	status,2,c
  1725  0011EC  D014               	goto	l70
  1726                           ;asserv.c: 500: {
  1727  0011EE  6804               	setf	btemp+4
  1728  0011F0  6805               	setf	btemp+5
  1729  0011F2  6806               	setf	btemp+6
  1730  0011F4  6807               	setf	btemp+7
  1731  0011F6  0E83               	movlw	low ?_tourner_cible
  1732  0011F8  6EE9               	movwf	fsr0l,c
  1733  0011FA  0E00               	movlw	high ?_tourner_cible
  1734  0011FC  6EEA               	movwf	fsr0h,c
  1735  0011FE  EC3B  F01F         	call	almul_f
  1736                           ;asserv.c: 502: y_consigne_mm *= -1;
  1737  001202  6804               	setf	btemp+4
  1738  001204  6805               	setf	btemp+5
  1739  001206  6806               	setf	btemp+6
  1740  001208  6807               	setf	btemp+7
  1741  00120A  0E87               	movlw	low (?_tourner_cible+4)
  1742  00120C  6EE9               	movwf	fsr0l,c
  1743  00120E  0E00               	movlw	high (?_tourner_cible+4)
  1744  001210  6EEA               	movwf	fsr0h,c
  1745  001212  EC3B  F01F         	call	almul_f
  1746  001216                     l70:
  1747                           ;asserv.c: 503: }
  1748  001216  0E0A               	movlw	10
  1749  001218  6E04               	movwf	btemp+4
  1750  00121A  6A05               	clrf	btemp+5
  1751  00121C  6A06               	clrf	btemp+6
  1752  00121E  6A07               	clrf	btemp+7
  1753  001220  0E83               	movlw	low ?_tourner_cible
  1754  001222  6EE9               	movwf	fsr0l,c
  1755  001224  0E00               	movlw	high ?_tourner_cible
  1756  001226  6EEA               	movwf	fsr0h,c
  1757  001228  EC3B  F01F         	call	almul_f
  1758                           ;asserv.c: 507: y_consigne_mm *= 10;
  1759  00122C  0E0A               	movlw	10
  1760  00122E  6E04               	movwf	btemp+4
  1761  001230  6A05               	clrf	btemp+5
  1762  001232  6A06               	clrf	btemp+6
  1763  001234  6A07               	clrf	btemp+7
  1764  001236  0E87               	movlw	low (?_tourner_cible+4)
  1765  001238  6EE9               	movwf	fsr0l,c
  1766  00123A  0E00               	movlw	high (?_tourner_cible+4)
  1767  00123C  6EEA               	movwf	fsr0h,c
  1768  00123E  EC3B  F01F         	call	almul_f
  1769                           ;asserv.c: 508: y_consigne_mm *= Asserv.orientat
      +                          ion_depart;
  1770  001242  C192  F004         	movff	_Asserv+146,btemp+4
  1771  001246  C193  F005         	movff	_Asserv+147,btemp+5
  1772  00124A  0E00               	movlw	0
  1773  00124C  BE05               	btfsc	btemp+5,7
  1774  00124E  0EFF               	movlw	255
  1775  001250  6E06               	movwf	btemp+6
  1776  001252  6E07               	movwf	btemp+7
  1777  001254  0E87               	movlw	low (?_tourner_cible+4)
  1778  001256  6EE9               	movwf	fsr0l,c
  1779  001258  0E00               	movlw	high (?_tourner_cible+4)
  1780  00125A  6EEA               	movwf	fsr0h,c
  1781  00125C  EC3B  F01F         	call	almul_f
  1782                           ;asserv.c: 511: Asserv.x_consigne = x_consigne_m
      +                          m;
  1783  001260  C083  F17E         	movff	?_tourner_cible,_Asserv+126
  1784  001264  C084  F17F         	movff	?_tourner_cible+1,_Asserv+127
  1785  001268  C085  F180         	movff	?_tourner_cible+2,_Asserv+128
  1786  00126C  C086  F181         	movff	?_tourner_cible+3,_Asserv+129
  1787                           ;asserv.c: 512: Asserv.y_consigne = y_consigne_m
      +                          m;
  1788  001270  C087  F182         	movff	?_tourner_cible+4,_Asserv+130
  1789  001274  C088  F183         	movff	?_tourner_cible+5,_Asserv+131
  1790  001278  C089  F184         	movff	?_tourner_cible+6,_Asserv+132
  1791  00127C  C08A  F185         	movff	?_tourner_cible+7,_Asserv+133
  1792                           ;asserv.c: 515: Asserv.flag_calcul_atan2 = 0;
  1793  001280  0101               	movlb	(_Asserv+6) shr (0+8)
  1794  001282  6B06               	clrf	(_Asserv+6)& (0+255),b
  1795  001284  6B07               	clrf	(_Asserv+7)& (0+255),b
  1796                           ;asserv.c: 516: while (!Asserv.flag_calcul_atan2
      +                          );
  1797  001286                     l71:
  1798  001286  0101               	movlb	(_Asserv+6) shr (0+8)
  1799  001288  5106               	movf	(_Asserv+6)& (0+255),w,b
  1800  00128A  1107               	iorwf	(_Asserv+7)& (0+255),w,b
  1801  00128C  B4D8               	btfsc	status,2,c
  1802  00128E  D7FB               	goto	l71
  1803                           ;asserv.c: 519: consigne_angle_deg = (int)(Asser
      +                          v.consigne_angle_atan2);
  1804  001290  C1BC  F000         	movff	_Asserv+188,btemp
  1805  001294  C1BD  F001         	movff	_Asserv+189,btemp+1
  1806  001298  C1BE  F002         	movff	_Asserv+190,btemp+2
  1807  00129C  EC34  F01E         	call	fttol
  1808  0012A0  0100               	movlb	__Lparam shr (0+8)
  1809  0012A2  C000  F099         	movff	btemp,?a_tourner_cible+10
  1810  0012A6  C001  F09A         	movff	btemp+1,?a_tourner_cible+11
  1811  0012AA  0E00               	movlw	0
  1812  0012AC  BF9A               	btfsc	(?a_tourner_cible+11)^(__Lparam& (0+65280
      +                          )),7
  1813  0012AE  0EFF               	movlw	-1
  1814  0012B0  6F9B               	movwf	(?a_tourner_cible+12)^(__Lparam& (0+65280
      +                          ))
  1815  0012B2  6F9C               	movwf	(?a_tourner_cible+13)^(__Lparam& (0+65280
      +                          ))
  1816                           ;asserv.c: 524: if ((consigne_angle_deg > 1700) 
      +                          || (consigne_angle_deg < -1700) || (consigne_ang
      +                          le_deg == 0))
  1817  0012B4  519C               	movf	(?a_tourner_cible+13)^(__Lparam& (0+65280)
      +                          ),w
  1818  0012B6  0A80               	xorlw	128
  1819  0012B8  0F80               	addlw	128
  1820  0012BA  E108               	bnz	u385
  1821  0012BC  0E00               	movlw	0
  1822  0012BE  5D9B               	subwf	(?a_tourner_cible+12)^(__Lparam& (0+65280
      +                          )),w
  1823  0012C0  E105               	bnz	u385
  1824  0012C2  0E06               	movlw	6
  1825  0012C4  5D9A               	subwf	(?a_tourner_cible+11)^(__Lparam& (0+65280
      +                          )),w
  1826  0012C6  E102               	bnz	u385
  1827  0012C8  0EA5               	movlw	165
  1828  0012CA  5D99               	subwf	(?a_tourner_cible+10)^(__Lparam& (0+65280
      +                          )),w
  1829  0012CC                     u385:
  1830  0012CC  B0D8               	btfsc	status,0,c
  1831  0012CE  D015               	goto	u410
  1832  0012D0  519C               	movf	(?a_tourner_cible+13)^(__Lparam& (0+65280)
      +                          ),w
  1833  0012D2  0A80               	xorlw	128
  1834  0012D4  0F81               	addlw	-127
  1835  0012D6  E108               	bnz	u395
  1836  0012D8  0EFF               	movlw	255
  1837  0012DA  5D9B               	subwf	(?a_tourner_cible+12)^(__Lparam& (0+65280
      +                          )),w
  1838  0012DC  E105               	bnz	u395
  1839  0012DE  0EF9               	movlw	249
  1840  0012E0  5D9A               	subwf	(?a_tourner_cible+11)^(__Lparam& (0+65280
      +                          )),w
  1841  0012E2  E102               	bnz	u395
  1842  0012E4  0E5C               	movlw	92
  1843  0012E6  5D99               	subwf	(?a_tourner_cible+10)^(__Lparam& (0+65280
      +                          )),w
  1844  0012E8                     u395:
  1845  0012E8  A0D8               	btfss	status,0,c
  1846  0012EA  D007               	goto	u410
  1847  0012EC  0100               	movlb	__Lparam shr (0+8)
  1848  0012EE  519C               	movf	(?a_tourner_cible+13)^(__Lparam& (0+65280)
      +                          ),w
  1849  0012F0  1199               	iorwf	(?a_tourner_cible+10)^(__Lparam& (0+65280
      +                          )),w
  1850  0012F2  119A               	iorwf	(?a_tourner_cible+11)^(__Lparam& (0+65280
      +                          )),w
  1851  0012F4  119B               	iorwf	(?a_tourner_cible+12)^(__Lparam& (0+65280
      +                          )),w
  1852  0012F6  A4D8               	btfss	status,2,c
  1853  0012F8  D045               	goto	l74
  1854  0012FA                     u410:
  1855                           ;asserv.c: 525: {
  1856  0012FA  C11C  F000         	movff	_Asserv+28,btemp
  1857  0012FE  C11D  F001         	movff	_Asserv+29,btemp+1
  1858  001302  0E00               	movlw	0
  1859  001304  BE01               	btfsc	btemp+1,7
  1860  001306  0EFF               	movlw	255
  1861  001308  6E02               	movwf	btemp+2
  1862  00130A  6E03               	movwf	btemp+3
  1863  00130C  0100               	movlb	__Lparam shr (0+8)
  1864  00130E  199C               	xorwf	(?a_tourner_cible+13)^(__Lparam& (0+65280
      +                          )),w
  1865  001310  E108               	bnz	u435
  1866  001312  519B               	movf	(?a_tourner_cible+12)^(__Lparam& (0+65280)
      +                          ),w
  1867  001314  1802               	xorwf	btemp+2,w
  1868  001316  E105               	bnz	u435
  1869  001318  519A               	movf	(?a_tourner_cible+11)^(__Lparam& (0+65280)
      +                          ),w
  1870  00131A  1801               	xorwf	btemp+1,w
  1871  00131C  E102               	bnz	u435
  1872  00131E  5199               	movf	(?a_tourner_cible+10)^(__Lparam& (0+65280)
      +                          ),w
  1873  001320  1800               	xorwf	btemp,w
  1874  001322                     u435:
  1875  001322  B4D8               	btfsc	status,2,c
  1876  001324  D005               	goto	l75
  1877                           ;asserv.c: 528: inversion_repaire(consigne_angle
      +                          _deg);
  1878  001326  C099  F0C5         	movff	?a_tourner_cible+10,?_inversion_repaire
  1879  00132A  C09A  F0C6         	movff	?a_tourner_cible+11,?_inversion_repaire+1
  1880  00132E  DDFB               	call	_inversion_repaire	;wreg free
  1881  001330                     l75:
  1882                           ;asserv.c: 531: if (consigne_angle_deg > 1700)
  1883  001330  0100               	movlb	__Lparam shr (0+8)
  1884  001332  519C               	movf	(?a_tourner_cible+13)^(__Lparam& (0+65280)
      +                          ),w
  1885  001334  0A80               	xorlw	128
  1886  001336  0F80               	addlw	128
  1887  001338  E108               	bnz	u445
  1888  00133A  0E00               	movlw	0
  1889  00133C  5D9B               	subwf	(?a_tourner_cible+12)^(__Lparam& (0+65280
      +                          )),w
  1890  00133E  E105               	bnz	u445
  1891  001340  0E06               	movlw	6
  1892  001342  5D9A               	subwf	(?a_tourner_cible+11)^(__Lparam& (0+65280
      +                          )),w
  1893  001344  E102               	bnz	u445
  1894  001346  0EA5               	movlw	165
  1895  001348  5D99               	subwf	(?a_tourner_cible+10)^(__Lparam& (0+65280
      +                          )),w
  1896  00134A                     u445:
  1897  00134A  A0D8               	btfss	status,0,c
  1898  00134C  D005               	goto	l76
  1899                           ;asserv.c: 532: {
  1900  00134E  0EF8               	movlw	248
  1901  001350  2799               	addwf	(?a_tourner_cible+10)^(__Lparam& (0+65280
      +                          )),f
  1902  001352  239A               	addwfc	(?a_tourner_cible+11)^(__Lparam& (0+6528
      +                          0)),f
  1903  001354  0EFF               	movlw	255
  1904  001356  D014               	goto	L14
  1905                           ;asserv.c: 534: }
  1906  001358                     l76:
  1907  001358  0100               	movlb	__Lparam shr (0+8)
  1908  00135A  519C               	movf	(?a_tourner_cible+13)^(__Lparam& (0+65280)
      +                          ),w
  1909  00135C  0A80               	xorlw	128
  1910  00135E  0F81               	addlw	-127
  1911  001360  E108               	bnz	u455
  1912  001362  0EFF               	movlw	255
  1913  001364  5D9B               	subwf	(?a_tourner_cible+12)^(__Lparam& (0+65280
      +                          )),w
  1914  001366  E105               	bnz	u455
  1915  001368  0EF9               	movlw	249
  1916  00136A  5D9A               	subwf	(?a_tourner_cible+11)^(__Lparam& (0+65280
      +                          )),w
  1917  00136C  E102               	bnz	u455
  1918  00136E  0E5C               	movlw	92
  1919  001370  5D99               	subwf	(?a_tourner_cible+10)^(__Lparam& (0+65280
      +                          )),w
  1920  001372                     u455:
  1921  001372  B0D8               	btfsc	status,0,c
  1922  001374  D007               	goto	l74
  1923                           ;asserv.c: 536: {
  1924  001376  0E08               	movlw	8
  1925  001378  2799               	addwf	(?a_tourner_cible+10)^(__Lparam& (0+65280
      +                          )),f
  1926  00137A  0E07               	movlw	7
  1927  00137C  239A               	addwfc	(?a_tourner_cible+11)^(__Lparam& (0+6528
      +                          0)),f
  1928  00137E  0E00               	movlw	0
  1929  001380                     L14:
  1930  001380  239B               	addwfc	(?a_tourner_cible+12)^(__Lparam& (0+6528
      +                          0)),f
  1931  001382  239C               	addwfc	(?a_tourner_cible+13)^(__Lparam& (0+6528
      +                          0)),f
  1932                           ;asserv.c: 538: }
  1933  001384                     l74:
  1934                           ;asserv.c: 542: Asserv.vitesse_max = vitesse;
  1935  001384  C08B  F18A         	movff	?_tourner_cible+8,_Asserv+138
  1936  001388  C08C  F18B         	movff	?_tourner_cible+9,_Asserv+139
  1937  00138C  C08D  F18C         	movff	?_tourner_cible+10,_Asserv+140
  1938  001390  C08E  F18D         	movff	?_tourner_cible+11,_Asserv+141
  1939                           ;asserv.c: 543: Asserv.consigne_angle = consigne
      +                          _angle_deg;
  1940  001394  C099  F000         	movff	?a_tourner_cible+10,btemp
  1941  001398  C09A  F001         	movff	?a_tourner_cible+11,btemp+1
  1942  00139C  C09B  F002         	movff	?a_tourner_cible+12,btemp+2
  1943  0013A0  C09C  F003         	movff	?a_tourner_cible+13,btemp+3
  1944  0013A4  ECD3  F01E         	call	altoft
  1945  0013A8  C000  F1B9         	movff	btemp,_Asserv+185
  1946  0013AC  C001  F1BA         	movff	btemp+1,_Asserv+186
  1947  0013B0  C002  F1BB         	movff	btemp+2,_Asserv+187
  1948                           ;asserv.c: 544: Asserv.flag_ass_angle = 1;
  1949  0013B4  0101               	movlb	(_Asserv+14) shr (0+8)
  1950  0013B6  0E01               	movlw	1
  1951  0013B8  6F0E               	movwf	(_Asserv+14)& (0+255),b
  1952  0013BA  6B0F               	clrf	(_Asserv+15)& (0+255),b
  1953                           ;asserv.c: 545: Asserv.flag_ass_distance = 0;
  1954  0013BC  6B0C               	clrf	(_Asserv+12)& (0+255),b
  1955  0013BE  6B0D               	clrf	(_Asserv+13)& (0+255),b
  1956                           ;asserv.c: 546: Asserv.flag_ass_commande_moteur_
      +                          polair = 1;
  1957  0013C0  0E01               	movlw	1
  1958  0013C2  6F16               	movwf	(_Asserv+22)& (0+255),b
  1959  0013C4  6B17               	clrf	(_Asserv+23)& (0+255),b
  1960                           ;asserv.c: 547: Asserv.flag_ass_saturation_vites
      +                          se = 1;
  1961  0013C6  6F12               	movwf	(_Asserv+18)& (0+255),b
  1962  0013C8  6B13               	clrf	(_Asserv+19)& (0+255),b
  1963                           ;asserv.c: 548: Asserv.flag_ass_saturation_accel
      +                          eratio = 0;
  1964  0013CA  6B14               	clrf	(_Asserv+20)& (0+255),b
  1965  0013CC  6B15               	clrf	(_Asserv+21)& (0+255),b
  1966                           ;asserv.c: 549: Asserv.offset_correcteur_angle =
      +                           2;
  1967  0013CE  6BCD               	clrf	(_Asserv+205)& (0+255),b
  1968  0013D0  6BCC               	clrf	(_Asserv+204)& (0+255),b
  1969  0013D2  6BCB               	clrf	(_Asserv+203)& (0+255),b
  1970  0013D4  0E02               	movlw	2
  1971  0013D6  6FCA               	movwf	(_Asserv+202)& (0+255),b
  1972                           ;asserv.c: 550: Asserv.offset_coef_saturation_vi
      +                          tesse = 2;
  1973  0013D8  6BEC               	clrf	(_Asserv+236)& (0+255),b
  1974  0013DA  6BEB               	clrf	(_Asserv+235)& (0+255),b
  1975  0013DC  6BEA               	clrf	(_Asserv+234)& (0+255),b
  1976  0013DE  6FE9               	movwf	(_Asserv+233)& (0+255),b
  1977                           ;asserv.c: 553: seuil_angle_bas = Asserv.consign
      +                          e_angle - 10.0;
  1978  0013E0  6A00               	clrf	btemp
  1979  0013E2  0E20               	movlw	32
  1980  0013E4  6E01               	movwf	btemp+1
  1981  0013E6  0E41               	movlw	65
  1982  0013E8  6E02               	movwf	btemp+2
  1983  0013EA  C000  F09D         	movff	btemp,?a_tourner_cible+14
  1984  0013EE  C001  F09E         	movff	btemp+1,?a_tourner_cible+15
  1985  0013F2  C002  F09F         	movff	btemp+2,?a_tourner_cible+16
  1986  0013F6  C1B9  F000         	movff	_Asserv+185,btemp
  1987  0013FA  C1BA  F001         	movff	_Asserv+186,btemp+1
  1988  0013FE  C1BB  F002         	movff	_Asserv+187,btemp+2
  1989  001402  C09D  F003         	movff	?a_tourner_cible+14,btemp+3
  1990  001406  C09E  F004         	movff	?a_tourner_cible+15,btemp+4
  1991  00140A  C09F  F005         	movff	?a_tourner_cible+16,btemp+5
  1992  00140E  ECD7  F01D         	call	ftsub
  1993  001412  C000  F08F         	movff	btemp,?a_tourner_cible
  1994  001416  C001  F090         	movff	btemp+1,?a_tourner_cible+1
  1995  00141A  C002  F091         	movff	btemp+2,?a_tourner_cible+2
  1996                           ;asserv.c: 554: seuil_angle_haut = Asserv.consig
      +                          ne_angle + 10.0;
  1997  00141E  6A00               	clrf	btemp
  1998  001420  0E20               	movlw	32
  1999  001422  6E01               	movwf	btemp+1
  2000  001424  0E41               	movlw	65
  2001  001426  6E02               	movwf	btemp+2
  2002  001428  C000  F09D         	movff	btemp,?a_tourner_cible+14
  2003  00142C  C001  F09E         	movff	btemp+1,?a_tourner_cible+15
  2004  001430  C002  F09F         	movff	btemp+2,?a_tourner_cible+16
  2005  001434  C1B9  F000         	movff	_Asserv+185,btemp
  2006  001438  C1BA  F001         	movff	_Asserv+186,btemp+1
  2007  00143C  C1BB  F002         	movff	_Asserv+187,btemp+2
  2008  001440  C09D  F003         	movff	?a_tourner_cible+14,btemp+3
  2009  001444  C09E  F004         	movff	?a_tourner_cible+15,btemp+4
  2010  001448  C09F  F005         	movff	?a_tourner_cible+16,btemp+5
  2011  00144C  ECD9  F01D         	call	ftadd
  2012  001450  C000  F092         	movff	btemp,?a_tourner_cible+3
  2013  001454  C001  F093         	movff	btemp+1,?a_tourner_cible+4
  2014  001458  C002  F094         	movff	btemp+2,?a_tourner_cible+5
  2015  00145C                     l80:
  2016                           ;asserv.c: 557: while(1)
  2017                           ;asserv.c: 558: {
  2018  00145C  C136  F000         	movff	_Asserv+54,btemp
  2019  001460  C137  F001         	movff	_Asserv+55,btemp+1
  2020  001464  C138  F002         	movff	_Asserv+56,btemp+2
  2021  001468  C139  F003         	movff	_Asserv+57,btemp+3
  2022  00146C  ECD3  F01E         	call	altoft
  2023  001470  C092  F003         	movff	?a_tourner_cible+3,btemp+3
  2024  001474  C093  F004         	movff	?a_tourner_cible+4,btemp+4
  2025  001478  C094  F005         	movff	?a_tourner_cible+5,btemp+5
  2026  00147C  EC9D  F01E         	call	ftcmp
  2027  001480  B0D8               	btfsc	status,0,c
  2028  001482  D036               	goto	l82
  2029  001484  C136  F000         	movff	_Asserv+54,btemp
  2030  001488  C137  F001         	movff	_Asserv+55,btemp+1
  2031  00148C  C138  F002         	movff	_Asserv+56,btemp+2
  2032  001490  C139  F003         	movff	_Asserv+57,btemp+3
  2033  001494  ECD3  F01E         	call	altoft
  2034  001498  C000  F003         	movff	btemp,btemp+3
  2035  00149C  C001  F004         	movff	btemp+1,btemp+4
  2036  0014A0  C002  F005         	movff	btemp+2,btemp+5
  2037  0014A4  C08F  F000         	movff	?a_tourner_cible,btemp
  2038  0014A8  C090  F001         	movff	?a_tourner_cible+1,btemp+1
  2039  0014AC  C091  F002         	movff	?a_tourner_cible+2,btemp+2
  2040  0014B0  EC9D  F01E         	call	ftcmp
  2041                           ;asserv.c: 561: {
  2042  0014B4  0100               	movlb	__Lparam shr (0+8)
  2043  0014B6  B0D8               	btfsc	status,0,c
  2044  0014B8  D01C               	goto	L9
  2045  0014BA  2B95               	incf	(?a_tourner_cible+6)^(__Lparam& (0+65280))
      +                          ,f
  2046  0014BC  0E00               	movlw	0
  2047  0014BE  2396               	addwfc	(?a_tourner_cible+7)^(__Lparam& (0+65280
      +                          )),f
  2048  0014C0  2397               	addwfc	(?a_tourner_cible+8)^(__Lparam& (0+65280
      +                          )),f
  2049  0014C2  2398               	addwfc	(?a_tourner_cible+9)^(__Lparam& (0+65280
      +                          )),f
  2050                           ;asserv.c: 566: puts("+");
  2051  0014C4  0E1B               	movlw	low u29
  2052  0014C6  6FC5               	movwf	?_puts^(__Lparam& (0+65280))
  2053  0014C8  0E03               	movlw	high u29
  2054  0014CA  6FC6               	movwf	(?_puts+1)^(__Lparam& (0+65280))
  2055  0014CC  ECF3  F01B         	call	_puts	;wreg free
  2056                           ;asserv.c: 576: if (compteur_sortie >= 2000)
  2057  0014D0  0100               	movlb	__Lparam shr (0+8)
  2058  0014D2  5198               	movf	(?a_tourner_cible+9)^(__Lparam& (0+65280))
      +                          ,w
  2059  0014D4  0A80               	xorlw	128
  2060  0014D6  0F80               	addlw	128
  2061  0014D8  E108               	bnz	u495
  2062  0014DA  0E00               	movlw	0
  2063  0014DC  5D97               	subwf	(?a_tourner_cible+8)^(__Lparam& (0+65280)
      +                          ),w
  2064  0014DE  E105               	bnz	u495
  2065  0014E0  0E07               	movlw	7
  2066  0014E2  5D96               	subwf	(?a_tourner_cible+7)^(__Lparam& (0+65280)
      +                          ),w
  2067  0014E4  E102               	bnz	u495
  2068  0014E6  0ED0               	movlw	208
  2069  0014E8  5D95               	subwf	(?a_tourner_cible+6)^(__Lparam& (0+65280)
      +                          ),w
  2070  0014EA                     u495:
  2071  0014EA  B0D8               	btfsc	status,0,c
  2072  0014EC  D007               	goto	l81
  2073  0014EE  D7B6               	goto	l80
  2074                           ;asserv.c: 577: break;
  2075                           ;asserv.c: 578: }
  2076                           ;asserv.c: 579: else
  2077  0014F0                     l82:
  2078                           ;asserv.c: 580: {
  2079  0014F0  0100               	movlb	__Lparam shr (0+8)
  2080  0014F2                     L9:
  2081  0014F2  6B95               	clrf	(?a_tourner_cible+6)^(__Lparam& (0+65280))
  2082  0014F4  6B96               	clrf	(?a_tourner_cible+7)^(__Lparam& (0+65280))
  2083  0014F6  6B97               	clrf	(?a_tourner_cible+8)^(__Lparam& (0+65280))
  2084  0014F8  6B98               	clrf	(?a_tourner_cible+9)^(__Lparam& (0+65280))
  2085                           ;asserv.c: 583: }
  2086                           ;asserv.c: 584: }
  2087  0014FA  D7B0               	goto	l80
  2088  0014FC                     l81:
  2089                           ;asserv.c: 586: Asserv.flag_sortie_evitement_adv
      +                           = 0;
  2090  0014FC  0101               	movlb	(_Asserv+4) shr (0+8)
  2091  0014FE  6B04               	clrf	(_Asserv+4)& (0+255),b
  2092  001500  6B05               	clrf	(_Asserv+5)& (0+255),b
  2093                           ;asserv.c: 587: }
  2094  001502  0012               	return	
  2095  001504  0083               	dw	?_vas_vers
  2096  001506                     _vas_vers:
  2097  000000                     
  2098                           ;asserv.c: 592: float seuil_angle_bas;
  2099  001506  0100               	movlb	__Lparam shr (0+8)
  2100  001508  6BA9               	clrf	(?a_vas_vers+22)^(__Lparam& (0+65280))
  2101  00150A  6BAA               	clrf	(?a_vas_vers+23)^(__Lparam& (0+65280))
  2102  00150C  6BAB               	clrf	(?a_vas_vers+24)^(__Lparam& (0+65280))
  2103  00150E  6BAC               	clrf	(?a_vas_vers+25)^(__Lparam& (0+65280))
  2104                           ;asserv.c: 599: signed long long timeout_local =
      +                           0;
  2105  001510  6A00               	clrf	btemp
  2106  001512  6A01               	clrf	btemp+1
  2107  001514  6A02               	clrf	btemp+2
  2108  001516  6A03               	clrf	btemp+3
  2109                           ;asserv.c: 600: int sortie_vas_vers = 0;
  2110  001518  6AF6               	clrf	tblptrl,c
  2111  00151A  6AF7               	clrf	tblptrh,c
  2112                           ;asserv.c: 603: if (Asserv.inversion_repere)
  2113  00151C  0101               	movlb	(_Asserv+26) shr (0+8)
  2114  00151E  511A               	movf	(_Asserv+26)& (0+255),w,b
  2115  001520  111B               	iorwf	(_Asserv+27)& (0+255),w,b
  2116  001522  B4D8               	btfsc	status,2,c
  2117  001524  D014               	goto	l86
  2118                           ;asserv.c: 604: {
  2119  001526  6804               	setf	btemp+4
  2120  001528  6805               	setf	btemp+5
  2121  00152A  6806               	setf	btemp+6
  2122  00152C  6807               	setf	btemp+7
  2123  00152E  0E83               	movlw	low ?_vas_vers
  2124  001530  6EE9               	movwf	fsr0l,c
  2125  001532  0E00               	movlw	high ?_vas_vers
  2126  001534  6EEA               	movwf	fsr0h,c
  2127  001536  EC3B  F01F         	call	almul_f
  2128                           ;asserv.c: 606: y_consigne_mm *= -1;
  2129  00153A  6804               	setf	btemp+4
  2130  00153C  6805               	setf	btemp+5
  2131  00153E  6806               	setf	btemp+6
  2132  001540  6807               	setf	btemp+7
  2133  001542  0E87               	movlw	low (?_vas_vers+4)
  2134  001544  6EE9               	movwf	fsr0l,c
  2135  001546  0E00               	movlw	high (?_vas_vers+4)
  2136  001548  6EEA               	movwf	fsr0h,c
  2137  00154A  EC3B  F01F         	call	almul_f
  2138  00154E                     l86:
  2139                           ;asserv.c: 607: }
  2140  00154E  0E0A               	movlw	10
  2141  001550  6E04               	movwf	btemp+4
  2142  001552  6A05               	clrf	btemp+5
  2143  001554  6A06               	clrf	btemp+6
  2144  001556  6A07               	clrf	btemp+7
  2145  001558  0E83               	movlw	low ?_vas_vers
  2146  00155A  6EE9               	movwf	fsr0l,c
  2147  00155C  0E00               	movlw	high ?_vas_vers
  2148  00155E  6EEA               	movwf	fsr0h,c
  2149  001560  EC3B  F01F         	call	almul_f
  2150                           ;asserv.c: 615: y_consigne_mm *= 10;
  2151  001564  0E0A               	movlw	10
  2152  001566  6E04               	movwf	btemp+4
  2153  001568  6A05               	clrf	btemp+5
  2154  00156A  6A06               	clrf	btemp+6
  2155  00156C  6A07               	clrf	btemp+7
  2156  00156E  0E87               	movlw	low (?_vas_vers+4)
  2157  001570  6EE9               	movwf	fsr0l,c
  2158  001572  0E00               	movlw	high (?_vas_vers+4)
  2159  001574  6EEA               	movwf	fsr0h,c
  2160  001576  EC3B  F01F         	call	almul_f
  2161                           ;asserv.c: 616: y_consigne_mm *= Asserv.orientat
      +                          ion_depart;
  2162  00157A  C192  F004         	movff	_Asserv+146,btemp+4
  2163  00157E  C193  F005         	movff	_Asserv+147,btemp+5
  2164  001582  0E00               	movlw	0
  2165  001584  BE05               	btfsc	btemp+5,7
  2166  001586  0EFF               	movlw	255
  2167  001588  6E06               	movwf	btemp+6
  2168  00158A  6E07               	movwf	btemp+7
  2169  00158C  0E87               	movlw	low (?_vas_vers+4)
  2170  00158E  6EE9               	movwf	fsr0l,c
  2171  001590  0E00               	movlw	high (?_vas_vers+4)
  2172  001592  6EEA               	movwf	fsr0h,c
  2173  001594  EC3B  F01F         	call	almul_f
  2174                           ;asserv.c: 618: seuil_angle_bas = Asserv.consign
      +                          e_angle - 10.0*2;
  2175  001598  6A00               	clrf	btemp
  2176  00159A  0EA0               	movlw	160
  2177  00159C  6E01               	movwf	btemp+1
  2178  00159E  0E41               	movlw	65
  2179  0015A0  6E02               	movwf	btemp+2
  2180  0015A2  C000  F0AD         	movff	btemp,?a_vas_vers+26
  2181  0015A6  C001  F0AE         	movff	btemp+1,?a_vas_vers+27
  2182  0015AA  C002  F0AF         	movff	btemp+2,?a_vas_vers+28
  2183  0015AE  C1B9  F000         	movff	_Asserv+185,btemp
  2184  0015B2  C1BA  F001         	movff	_Asserv+186,btemp+1
  2185  0015B6  C1BB  F002         	movff	_Asserv+187,btemp+2
  2186  0015BA  C0AD  F003         	movff	?a_vas_vers+26,btemp+3
  2187  0015BE  C0AE  F004         	movff	?a_vas_vers+27,btemp+4
  2188  0015C2  C0AF  F005         	movff	?a_vas_vers+28,btemp+5
  2189  0015C6  ECD7  F01D         	call	ftsub
  2190  0015CA  C000  F093         	movff	btemp,?a_vas_vers
  2191  0015CE  C001  F094         	movff	btemp+1,?a_vas_vers+1
  2192  0015D2  C002  F095         	movff	btemp+2,?a_vas_vers+2
  2193                           ;asserv.c: 619: seuil_angle_haut = Asserv.consig
      +                          ne_angle + 10.0*2;
  2194  0015D6  6A00               	clrf	btemp
  2195  0015D8  0EA0               	movlw	160
  2196  0015DA  6E01               	movwf	btemp+1
  2197  0015DC  0E41               	movlw	65
  2198  0015DE  6E02               	movwf	btemp+2
  2199  0015E0  C000  F0AD         	movff	btemp,?a_vas_vers+26
  2200  0015E4  C001  F0AE         	movff	btemp+1,?a_vas_vers+27
  2201  0015E8  C002  F0AF         	movff	btemp+2,?a_vas_vers+28
  2202  0015EC  C1B9  F000         	movff	_Asserv+185,btemp
  2203  0015F0  C1BA  F001         	movff	_Asserv+186,btemp+1
  2204  0015F4  C1BB  F002         	movff	_Asserv+187,btemp+2
  2205  0015F8  C0AD  F003         	movff	?a_vas_vers+26,btemp+3
  2206  0015FC  C0AE  F004         	movff	?a_vas_vers+27,btemp+4
  2207  001600  C0AF  F005         	movff	?a_vas_vers+28,btemp+5
  2208  001604  ECD9  F01D         	call	ftadd
  2209  001608  C000  F096         	movff	btemp,?a_vas_vers+3
  2210  00160C  C001  F097         	movff	btemp+1,?a_vas_vers+4
  2211  001610  C002  F098         	movff	btemp+2,?a_vas_vers+5
  2212                           ;asserv.c: 621: while (!sortie_vas_vers)
  2213  001614                     l87:
  2214                           ;asserv.c: 733: }
  2215  001614  50F7               	movf	tblptrh,w,c
  2216  001616  10F6               	iorwf	tblptrl,w,c
  2217  001618  A4D8               	btfss	status,2,c
  2218  00161A  D111               	goto	u600
  2219                           ;asserv.c: 622: {
  2220  00161C  C08B  F18A         	movff	?_vas_vers+8,_Asserv+138
  2221  001620  C08C  F18B         	movff	?_vas_vers+9,_Asserv+139
  2222  001624  C08D  F18C         	movff	?_vas_vers+10,_Asserv+140
  2223  001628  C08E  F18D         	movff	?_vas_vers+11,_Asserv+141
  2224                           ;asserv.c: 625: Asserv.x_consigne = x_consigne_m
      +                          m;
  2225  00162C  C083  F17E         	movff	?_vas_vers,_Asserv+126
  2226  001630  C084  F17F         	movff	?_vas_vers+1,_Asserv+127
  2227  001634  C085  F180         	movff	?_vas_vers+2,_Asserv+128
  2228  001638  C086  F181         	movff	?_vas_vers+3,_Asserv+129
  2229                           ;asserv.c: 626: Asserv.y_consigne = y_consigne_m
      +                          m;
  2230  00163C  C087  F182         	movff	?_vas_vers+4,_Asserv+130
  2231  001640  C088  F183         	movff	?_vas_vers+5,_Asserv+131
  2232  001644  C089  F184         	movff	?_vas_vers+6,_Asserv+132
  2233  001648  C08A  F185         	movff	?_vas_vers+7,_Asserv+133
  2234                           ;asserv.c: 628: if (angle_force_deg == 10002)
  2235  00164C  0100               	movlb	__Lparam shr (0+8)
  2236  00164E  5190               	movf	(?_vas_vers+13)^(__Lparam& (0+65280)),w
  2237  001650  0A27               	xorlw	39
  2238  001652  0E12               	movlw	18
  2239  001654  B4D8               	btfsc	status,2,c
  2240  001656  198F               	xorwf	(?_vas_vers+12)^(__Lparam& (0+65280)),w
  2241  001658  1191               	iorwf	(?_vas_vers+14)^(__Lparam& (0+65280)),w
  2242  00165A  1192               	iorwf	(?_vas_vers+15)^(__Lparam& (0+65280)),w
  2243  00165C  A4D8               	btfss	status,2,c
  2244  00165E  D004               	goto	l90
  2245                           ;asserv.c: 629: Asserv.flag_ass_angle = 0;
  2246  001660  0101               	movlb	(_Asserv+14) shr (0+8)
  2247  001662  6B0E               	clrf	(_Asserv+14)& (0+255),b
  2248  001664  6B0F               	clrf	(_Asserv+15)& (0+255),b
  2249                           ;asserv.c: 630: else
  2250  001666  D004               	goto	l91
  2251  001668                     l90:
  2252                           ;asserv.c: 631: Asserv.flag_ass_angle = 1;
  2253  001668  0101               	movlb	(_Asserv+14) shr (0+8)
  2254  00166A  0E01               	movlw	1
  2255  00166C  6F0E               	movwf	(_Asserv+14)& (0+255),b
  2256  00166E  6B0F               	clrf	(_Asserv+15)& (0+255),b
  2257  001670                     l91:
  2258                           ;asserv.c: 633: Asserv.flag_ass_distance = 1;
  2259  001670  0101               	movlb	(_Asserv+12) shr (0+8)
  2260  001672  0E01               	movlw	1
  2261  001674  6F0C               	movwf	(_Asserv+12)& (0+255),b
  2262  001676  6B0D               	clrf	(_Asserv+13)& (0+255),b
  2263                           ;asserv.c: 634: Asserv.flag_ass_commande_moteur_
      +                          polair = 1;
  2264  001678  6F16               	movwf	(_Asserv+22)& (0+255),b
  2265  00167A  6B17               	clrf	(_Asserv+23)& (0+255),b
  2266                           ;asserv.c: 635: Asserv.flag_ass_saturation_vites
      +                          se = 1;
  2267  00167C  6F12               	movwf	(_Asserv+18)& (0+255),b
  2268  00167E  6B13               	clrf	(_Asserv+19)& (0+255),b
  2269                           ;asserv.c: 636: Asserv.flag_ass_saturation_accel
      +                          eratio = 1;
  2270  001680  6F14               	movwf	(_Asserv+20)& (0+255),b
  2271  001682  6B15               	clrf	(_Asserv+21)& (0+255),b
  2272                           ;asserv.c: 637: Asserv.offset_correcteur_angle =
      +                           0;
  2273  001684  6BCA               	clrf	(_Asserv+202)& (0+255),b
  2274  001686  6BCB               	clrf	(_Asserv+203)& (0+255),b
  2275  001688  6BCC               	clrf	(_Asserv+204)& (0+255),b
  2276  00168A  6BCD               	clrf	(_Asserv+205)& (0+255),b
  2277                           ;asserv.c: 638: Asserv.offset_coef_saturation_vi
      +                          tesse = 0;
  2278  00168C  6BE9               	clrf	(_Asserv+233)& (0+255),b
  2279  00168E  6BEA               	clrf	(_Asserv+234)& (0+255),b
  2280  001690  6BEB               	clrf	(_Asserv+235)& (0+255),b
  2281  001692  6BEC               	clrf	(_Asserv+236)& (0+255),b
  2282                           ;asserv.c: 639: Asserv.offset_correcteur_distanc
      +                          e = 0;
  2283  001694  6BA3               	clrf	(_Asserv+163)& (0+255),b
  2284  001696  6BA4               	clrf	(_Asserv+164)& (0+255),b
  2285  001698  6BA5               	clrf	(_Asserv+165)& (0+255),b
  2286  00169A  6BA6               	clrf	(_Asserv+166)& (0+255),b
  2287                           ;asserv.c: 642: consigne_finale = Asserv.consign
      +                          e_distance ;
  2288  00169C  C198  F09F         	movff	_Asserv+152,?a_vas_vers+12
  2289  0016A0  C199  F0A0         	movff	_Asserv+153,?a_vas_vers+13
  2290  0016A4  C19A  F0A1         	movff	_Asserv+154,?a_vas_vers+14
  2291                           ;asserv.c: 643: seuil_distance_av = consigne_fin
      +                          ale + 300.0;
  2292  0016A8  6A00               	clrf	btemp
  2293  0016AA  0E96               	movlw	150
  2294  0016AC  6E01               	movwf	btemp+1
  2295  0016AE  0E43               	movlw	67
  2296  0016B0  6E02               	movwf	btemp+2
  2297  0016B2  C09F  F003         	movff	?a_vas_vers+12,btemp+3
  2298  0016B6  C0A0  F004         	movff	?a_vas_vers+13,btemp+4
  2299  0016BA  C0A1  F005         	movff	?a_vas_vers+14,btemp+5
  2300  0016BE  ECD9  F01D         	call	ftadd
  2301  0016C2  C000  F09C         	movff	btemp,?a_vas_vers+9
  2302  0016C6  C001  F09D         	movff	btemp+1,?a_vas_vers+10
  2303  0016CA  C002  F09E         	movff	btemp+2,?a_vas_vers+11
  2304                           ;asserv.c: 644: seuil_distance_ar = consigne_fin
      +                          ale - 300.0;
  2305  0016CE  6A00               	clrf	btemp
  2306  0016D0  0E96               	movlw	150
  2307  0016D2  6E01               	movwf	btemp+1
  2308  0016D4  0E43               	movlw	67
  2309  0016D6  6E02               	movwf	btemp+2
  2310  0016D8  C000  F0AD         	movff	btemp,?a_vas_vers+26
  2311  0016DC  C001  F0AE         	movff	btemp+1,?a_vas_vers+27
  2312  0016E0  C002  F0AF         	movff	btemp+2,?a_vas_vers+28
  2313  0016E4  C09F  F000         	movff	?a_vas_vers+12,btemp
  2314  0016E8  C0A0  F001         	movff	?a_vas_vers+13,btemp+1
  2315  0016EC  C0A1  F002         	movff	?a_vas_vers+14,btemp+2
  2316  0016F0  C0AD  F003         	movff	?a_vas_vers+26,btemp+3
  2317  0016F4  C0AE  F004         	movff	?a_vas_vers+27,btemp+4
  2318  0016F8  C0AF  F005         	movff	?a_vas_vers+28,btemp+5
  2319  0016FC  ECD7  F01D         	call	ftsub
  2320  001700  C000  F099         	movff	btemp,?a_vas_vers+6
  2321  001704  C001  F09A         	movff	btemp+1,?a_vas_vers+7
  2322  001708  C002  F09B         	movff	btemp+2,?a_vas_vers+8
  2323                           ;asserv.c: 647: if ((vitesse > 320) && (vitesse 
      +                          < 400))
  2324  00170C  0100               	movlb	__Lparam shr (0+8)
  2325  00170E  518E               	movf	(?_vas_vers+11)^(__Lparam& (0+65280)),w
  2326  001710  0A80               	xorlw	128
  2327  001712  0F80               	addlw	128
  2328  001714  E108               	bnz	u525
  2329  001716  0E00               	movlw	0
  2330  001718  5D8D               	subwf	(?_vas_vers+10)^(__Lparam& (0+65280)),w
  2331  00171A  E105               	bnz	u525
  2332  00171C  0E01               	movlw	1
  2333  00171E  5D8C               	subwf	(?_vas_vers+9)^(__Lparam& (0+65280)),w
  2334  001720  E102               	bnz	u525
  2335  001722  0E41               	movlw	65
  2336  001724  5D8B               	subwf	(?_vas_vers+8)^(__Lparam& (0+65280)),w
  2337  001726                     u525:
  2338  001726  A0D8               	btfss	status,0,c
  2339  001728  D013               	goto	l92
  2340  00172A  518E               	movf	(?_vas_vers+11)^(__Lparam& (0+65280)),w
  2341  00172C  0A80               	xorlw	128
  2342  00172E  0F80               	addlw	128
  2343  001730  E108               	bnz	u535
  2344  001732  0E00               	movlw	0
  2345  001734  5D8D               	subwf	(?_vas_vers+10)^(__Lparam& (0+65280)),w
  2346  001736  E105               	bnz	u535
  2347  001738  0E01               	movlw	1
  2348  00173A  5D8C               	subwf	(?_vas_vers+9)^(__Lparam& (0+65280)),w
  2349  00173C  E102               	bnz	u535
  2350  00173E  0E90               	movlw	144
  2351  001740  5D8B               	subwf	(?_vas_vers+8)^(__Lparam& (0+65280)),w
  2352  001742                     u535:
  2353                           ;asserv.c: 648: timeout_local = 547;
  2354  001742  0100               	movlb	__Lparam shr (0+8)
  2355  001744  B0D8               	btfsc	status,0,c
  2356  001746  D005               	goto	L10
  2357  001748  0E23               	movlw	35
  2358  00174A  6FA5               	movwf	(?a_vas_vers+18)^(__Lparam& (0+65280))
  2359  00174C  0E02               	movlw	2
  2360  00174E  D004               	goto	L5
  2361                           ;asserv.c: 649: else
  2362  001750                     l92:
  2363                           ;asserv.c: 650: timeout_local = 1000;
  2364  001750  0100               	movlb	__Lparam shr (0+8)
  2365  001752                     L10:
  2366  001752  0EE8               	movlw	232
  2367  001754  6FA5               	movwf	(?a_vas_vers+18)^(__Lparam& (0+65280))
  2368  001756  0E03               	movlw	3
  2369  001758                     L5:
  2370  001758  6FA6               	movwf	(?a_vas_vers+19)^(__Lparam& (0+65280))
  2371  00175A  6BA7               	clrf	(?a_vas_vers+20)^(__Lparam& (0+65280))
  2372  00175C  6BA8               	clrf	(?a_vas_vers+21)^(__Lparam& (0+65280))
  2373  00175E                     l95:
  2374                           ;asserv.c: 653: while(1)
  2375                           ;asserv.c: 654: {
  2376  00175E  6A03               	clrf	btemp+3
  2377  001760  0E96               	movlw	150
  2378  001762  6E04               	movwf	btemp+4
  2379  001764  0E43               	movlw	67
  2380  001766  6E05               	movwf	btemp+5
  2381  001768  C198  F000         	movff	_Asserv+152,btemp
  2382  00176C  C199  F001         	movff	_Asserv+153,btemp+1
  2383  001770  C19A  F002         	movff	_Asserv+154,btemp+2
  2384  001774  EC9D  F01E         	call	ftcmp
  2385  001778  B0D8               	btfsc	status,0,c
  2386  00177A  D00D               	goto	l97
  2387                           ;asserv.c: 692: {
  2388  00177C  C1BF  F0A2         	movff	_Asserv+191,?a_vas_vers+15
  2389  001780  C1C0  F0A3         	movff	_Asserv+192,?a_vas_vers+16
  2390  001784  C1C1  F0A4         	movff	_Asserv+193,?a_vas_vers+17
  2391                           ;asserv.c: 694: Asserv.consigne_angle = Asserv.c
      +                          onsigne_angle_precedent;
  2392  001788  C1BF  F1B9         	movff	_Asserv+191,_Asserv+185
  2393  00178C  C1C0  F1BA         	movff	_Asserv+192,_Asserv+186
  2394  001790  C1C1  F1BB         	movff	_Asserv+193,_Asserv+187
  2395                           ;asserv.c: 695: }
  2396  001794  D00C               	goto	l98
  2397  001796                     l97:
  2398                           ;asserv.c: 697: {
  2399  001796  C1BC  F1B9         	movff	_Asserv+188,_Asserv+185
  2400  00179A  C1BD  F1BA         	movff	_Asserv+189,_Asserv+186
  2401  00179E  C1BE  F1BB         	movff	_Asserv+190,_Asserv+187
  2402                           ;asserv.c: 699: Asserv.consigne_angle_precedent 
      +                          = Asserv.consigne_angle;
  2403  0017A2  C1B9  F1BF         	movff	_Asserv+185,_Asserv+191
  2404  0017A6  C1BA  F1C0         	movff	_Asserv+186,_Asserv+192
  2405  0017AA  C1BB  F1C1         	movff	_Asserv+187,_Asserv+193
  2406  0017AE                     l98:
  2407                           ;asserv.c: 700: }
  2408                           ;asserv.c: 703: if ((Asserv.consigne_distance < 
      +                          seuil_distance_av) && (Asserv.consigne_distance 
      +                          > seuil_distance_ar))
  2409  0017AE  C09C  F003         	movff	?a_vas_vers+9,btemp+3
  2410  0017B2  C09D  F004         	movff	?a_vas_vers+10,btemp+4
  2411  0017B6  C09E  F005         	movff	?a_vas_vers+11,btemp+5
  2412  0017BA  C198  F000         	movff	_Asserv+152,btemp
  2413  0017BE  C199  F001         	movff	_Asserv+153,btemp+1
  2414  0017C2  C19A  F002         	movff	_Asserv+154,btemp+2
  2415  0017C6  EC9D  F01E         	call	ftcmp
  2416  0017CA  B0D8               	btfsc	status,0,c
  2417  0017CC  D032               	goto	l99
  2418  0017CE  C198  F003         	movff	_Asserv+152,btemp+3
  2419  0017D2  C199  F004         	movff	_Asserv+153,btemp+4
  2420  0017D6  C19A  F005         	movff	_Asserv+154,btemp+5
  2421  0017DA  C099  F000         	movff	?a_vas_vers+6,btemp
  2422  0017DE  C09A  F001         	movff	?a_vas_vers+7,btemp+1
  2423  0017E2  C09B  F002         	movff	?a_vas_vers+8,btemp+2
  2424  0017E6  EC9D  F01E         	call	ftcmp
  2425                           ;asserv.c: 704: {
  2426  0017EA  0100               	movlb	__Lparam shr (0+8)
  2427  0017EC  B0D8               	btfsc	status,0,c
  2428  0017EE  D022               	goto	L11
  2429  0017F0  2BA9               	incf	(?a_vas_vers+22)^(__Lparam& (0+65280)),f
  2430  0017F2  0E00               	movlw	0
  2431  0017F4  23AA               	addwfc	(?a_vas_vers+23)^(__Lparam& (0+65280)),f
  2432  0017F6  23AB               	addwfc	(?a_vas_vers+24)^(__Lparam& (0+65280)),f
  2433  0017F8  23AC               	addwfc	(?a_vas_vers+25)^(__Lparam& (0+65280)),f
  2434                           ;asserv.c: 709: puts("+");
  2435  0017FA  0E1B               	movlw	low u39
  2436  0017FC  6FC5               	movwf	?_puts^(__Lparam& (0+65280))
  2437  0017FE  0E03               	movlw	high u39
  2438  001800  6FC6               	movwf	(?_puts+1)^(__Lparam& (0+65280))
  2439  001802  ECF3  F01B         	call	_puts	;wreg free
  2440                           ;asserv.c: 712: if (compteur_sortie >= timeout_l
      +                          ocal)
  2441  001806  0100               	movlb	__Lparam shr (0+8)
  2442  001808  51AC               	movf	(?a_vas_vers+25)^(__Lparam& (0+65280)),w
  2443  00180A  0A80               	xorlw	128
  2444  00180C  6E00               	movwf	btemp
  2445  00180E  51A8               	movf	(?a_vas_vers+21)^(__Lparam& (0+65280)),w
  2446  001810  0A80               	xorlw	128
  2447  001812  5C00               	subwf	btemp,w
  2448  001814  E108               	bnz	u595
  2449  001816  51A7               	movf	(?a_vas_vers+20)^(__Lparam& (0+65280)),w
  2450  001818  5DAB               	subwf	(?a_vas_vers+24)^(__Lparam& (0+65280)),w
  2451  00181A  E105               	bnz	u595
  2452  00181C  51A6               	movf	(?a_vas_vers+19)^(__Lparam& (0+65280)),w
  2453  00181E  5DAA               	subwf	(?a_vas_vers+23)^(__Lparam& (0+65280)),w
  2454  001820  E102               	bnz	u595
  2455  001822  51A5               	movf	(?a_vas_vers+18)^(__Lparam& (0+65280)),w
  2456  001824  5DA9               	subwf	(?a_vas_vers+22)^(__Lparam& (0+65280)),w
  2457  001826                     u595:
  2458  001826  A0D8               	btfss	status,0,c
  2459  001828  D79A               	goto	l95
  2460                           ;asserv.c: 713: {
  2461  00182A  0E01               	movlw	1
  2462  00182C  6EF6               	movwf	tblptrl,c
  2463  00182E  6AF7               	clrf	tblptrh,c
  2464                           ;asserv.c: 715: break;
  2465  001830  D6F1               	goto	l87
  2466                           ;asserv.c: 716: }
  2467                           ;asserv.c: 718: else
  2468  001832                     l99:
  2469                           ;asserv.c: 719: {
  2470  001832  0100               	movlb	__Lparam shr (0+8)
  2471  001834                     L11:
  2472  001834  6BA9               	clrf	(?a_vas_vers+22)^(__Lparam& (0+65280))
  2473  001836  6BAA               	clrf	(?a_vas_vers+23)^(__Lparam& (0+65280))
  2474  001838  6BAB               	clrf	(?a_vas_vers+24)^(__Lparam& (0+65280))
  2475  00183A  6BAC               	clrf	(?a_vas_vers+25)^(__Lparam& (0+65280))
  2476                           ;asserv.c: 722: }
  2477                           ;asserv.c: 732: }
  2478  00183C  D790               	goto	l95
  2479  00183E                     u600:
  2480                           ;asserv.c: 740: Asserv.flag_ass_distance = 0;
  2481  00183E  0101               	movlb	(_Asserv+12) shr (0+8)
  2482  001840  6B0C               	clrf	(_Asserv+12)& (0+255),b
  2483  001842  6B0D               	clrf	(_Asserv+13)& (0+255),b
  2484                           ;asserv.c: 743: if ((timeout.blocage_timeout_cal
      +                          lage) && (angle_force_deg != 10001) && (angle_fo
      +                          rce_deg != 10002))
  2485  001844  0100               	movlb	(_timeout+30) shr (0+8)
  2486  001846  517D               	movf	(_timeout+30)& (0+255),w,b
  2487  001848  117E               	iorwf	(_timeout+31)& (0+255),w,b
  2488  00184A  B4D8               	btfsc	status,2,c
  2489  00184C  0012               	return	
  2490  00184E  0100               	movlb	__Lparam shr (0+8)
  2491  001850  5190               	movf	(?_vas_vers+13)^(__Lparam& (0+65280)),w
  2492  001852  0A27               	xorlw	39
  2493  001854  0E11               	movlw	17
  2494  001856  B4D8               	btfsc	status,2,c
  2495  001858  198F               	xorwf	(?_vas_vers+12)^(__Lparam& (0+65280)),w
  2496  00185A  1191               	iorwf	(?_vas_vers+14)^(__Lparam& (0+65280)),w
  2497  00185C  1192               	iorwf	(?_vas_vers+15)^(__Lparam& (0+65280)),w
  2498  00185E  B4D8               	btfsc	status,2,c
  2499  001860  0012               	return	
  2500  001862  5190               	movf	(?_vas_vers+13)^(__Lparam& (0+65280)),w
  2501  001864  0A27               	xorlw	39
  2502  001866  0E12               	movlw	18
  2503  001868  B4D8               	btfsc	status,2,c
  2504  00186A  198F               	xorwf	(?_vas_vers+12)^(__Lparam& (0+65280)),w
  2505  00186C  1191               	iorwf	(?_vas_vers+14)^(__Lparam& (0+65280)),w
  2506  00186E  1192               	iorwf	(?_vas_vers+15)^(__Lparam& (0+65280)),w
  2507  001870  B4D8               	btfsc	status,2,c
  2508  001872  0012               	return	
  2509                           ;asserv.c: 744: {
  2510  001874  EE01  F092         	lfsr	0,_Asserv+146
  2511  001878  CFEE F000          	movff	postinc0,btemp
  2512  00187C  CFED F001          	movff	postdec0,btemp+1
  2513  001880  EC1C  F01F         	call	awtoft
  2514  001884  C000  F003         	movff	btemp,btemp+3
  2515  001888  C001  F004         	movff	btemp+1,btemp+4
  2516  00188C  C002  F005         	movff	btemp+2,btemp+5
  2517  001890  0EA2               	movlw	low (?a_vas_vers+15)
  2518  001892  6EE9               	movwf	fsr0l,c
  2519  001894  0E00               	movlw	high (?a_vas_vers+15)
  2520  001896  6EEA               	movwf	fsr0h,c
  2521  001898  EC4F  F01F         	call	ftmul_f
  2522                           ;asserv.c: 748: if (angle_force_deg == 10000)
  2523  00189C  0100               	movlb	__Lparam shr (0+8)
  2524  00189E  5190               	movf	(?_vas_vers+13)^(__Lparam& (0+65280)),w
  2525  0018A0  0A27               	xorlw	39
  2526  0018A2  0E10               	movlw	16
  2527  0018A4  B4D8               	btfsc	status,2,c
  2528  0018A6  198F               	xorwf	(?_vas_vers+12)^(__Lparam& (0+65280)),w
  2529  0018A8  1191               	iorwf	(?_vas_vers+14)^(__Lparam& (0+65280)),w
  2530  0018AA  1192               	iorwf	(?_vas_vers+15)^(__Lparam& (0+65280)),w
  2531  0018AC  A4D8               	btfss	status,2,c
  2532  0018AE  D024               	goto	l103
  2533                           ;asserv.c: 749: tourner_angle((long)(angle_arriv
      +                          e/10), vitesse);
  2534  0018B0  6A00               	clrf	btemp
  2535  0018B2  0E20               	movlw	32
  2536  0018B4  6E01               	movwf	btemp+1
  2537  0018B6  0E41               	movlw	65
  2538  0018B8  6E02               	movwf	btemp+2
  2539  0018BA  C000  F0AD         	movff	btemp,?a_vas_vers+26
  2540  0018BE  C001  F0AE         	movff	btemp+1,?a_vas_vers+27
  2541  0018C2  C002  F0AF         	movff	btemp+2,?a_vas_vers+28
  2542  0018C6  C0A2  F000         	movff	?a_vas_vers+15,btemp
  2543  0018CA  C0A3  F001         	movff	?a_vas_vers+16,btemp+1
  2544  0018CE  C0A4  F002         	movff	?a_vas_vers+17,btemp+2
  2545  0018D2  C0AD  F003         	movff	?a_vas_vers+26,btemp+3
  2546  0018D6  C0AE  F004         	movff	?a_vas_vers+27,btemp+4
  2547  0018DA  C0AF  F005         	movff	?a_vas_vers+28,btemp+5
  2548  0018DE  EC7E  F01D         	call	ftdiv
  2549  0018E2  EC34  F01E         	call	fttol
  2550  0018E6  C000  F0B0         	movff	btemp,?_tourner_angle
  2551  0018EA  C001  F0B1         	movff	btemp+1,?_tourner_angle+1
  2552  0018EE  C002  F0B2         	movff	btemp+2,?_tourner_angle+2
  2553  0018F2  C003  F0B3         	movff	btemp+3,?_tourner_angle+3
  2554  0018F6  D008               	goto	L15
  2555                           ;asserv.c: 750: else
  2556  0018F8                     l103:
  2557                           ;asserv.c: 751: {
  2558  0018F8  C08F  F0B0         	movff	?_vas_vers+12,?_tourner_angle
  2559  0018FC  C090  F0B1         	movff	?_vas_vers+13,?_tourner_angle+1
  2560  001900  C091  F0B2         	movff	?_vas_vers+14,?_tourner_angle+2
  2561  001904  C092  F0B3         	movff	?_vas_vers+15,?_tourner_angle+3
  2562  001908                     L15:
  2563  001908  C08B  F0B4         	movff	?_vas_vers+8,?_tourner_angle+4
  2564  00190C  C08C  F0B5         	movff	?_vas_vers+9,?_tourner_angle+5
  2565  001910  C08D  F0B6         	movff	?_vas_vers+10,?_tourner_angle+6
  2566  001914  C08E  F0B7         	movff	?_vas_vers+11,?_tourner_angle+7
  2567  001918  EFA1  F007         	goto	_tourner_angle	;wreg free
  2568                           ;asserv.c: 753: }
  2569                           ;asserv.c: 754: }
  2570  00191C  0083               	dw	?_avance_callage
  2571  00191E                     _avance_callage:
  2572  000000                     
  2573                           ;asserv.c: 760: Asserv.vitesse_max = 300;
  2574  00191E  0101               	movlb	(_Asserv+138) shr (0+8)
  2575  001920  6B8D               	clrf	(_Asserv+141)& (0+255),b
  2576  001922  6B8C               	clrf	(_Asserv+140)& (0+255),b
  2577  001924  0E01               	movlw	1
  2578  001926  6F8B               	movwf	(_Asserv+139)& (0+255),b
  2579  001928  0E2C               	movlw	44
  2580  00192A  6F8A               	movwf	(_Asserv+138)& (0+255),b
  2581                           ;asserv.c: 761: Asserv.flag_ass_angle = 1;
  2582  00192C  0E01               	movlw	1
  2583  00192E  6F0E               	movwf	(_Asserv+14)& (0+255),b
  2584  001930  6B0F               	clrf	(_Asserv+15)& (0+255),b
  2585                           ;asserv.c: 762: Asserv.flag_ass_distance = 0;
  2586  001932  6B0C               	clrf	(_Asserv+12)& (0+255),b
  2587  001934  6B0D               	clrf	(_Asserv+13)& (0+255),b
  2588                           ;asserv.c: 763: Asserv.flag_ass_commande_moteur_
      +                          polair = 1;
  2589  001936  0E01               	movlw	1
  2590  001938  6F16               	movwf	(_Asserv+22)& (0+255),b
  2591  00193A  6B17               	clrf	(_Asserv+23)& (0+255),b
  2592                           ;asserv.c: 764: Asserv.flag_ass_saturation_vites
      +                          se = 1;
  2593  00193C  6F12               	movwf	(_Asserv+18)& (0+255),b
  2594  00193E  6B13               	clrf	(_Asserv+19)& (0+255),b
  2595                           ;asserv.c: 765: Asserv.flag_ass_saturation_accel
      +                          eratio = 0;
  2596  001940  6B14               	clrf	(_Asserv+20)& (0+255),b
  2597  001942  6B15               	clrf	(_Asserv+21)& (0+255),b
  2598                           ;asserv.c: 766: Asserv.flag_ass_callage = 1;
  2599  001944  0E01               	movlw	1
  2600  001946  6F18               	movwf	(_Asserv+24)& (0+255),b
  2601  001948  6B19               	clrf	(_Asserv+25)& (0+255),b
  2602                           ;asserv.c: 769: timeout.callage = 0;
  2603  00194A  0100               	movlb	(_timeout+12) shr (0+8)
  2604  00194C  6B6B               	clrf	(_timeout+12)& (0+255),b
  2605  00194E  6B6C               	clrf	(_timeout+13)& (0+255),b
  2606  001950  6B6D               	clrf	(_timeout+14)& (0+255),b
  2607  001952  6B6E               	clrf	(_timeout+15)& (0+255),b
  2608                           ;asserv.c: 770: timeout.blocage_timeout_callage 
      +                          = 0;
  2609  001954  0100               	movlb	(_timeout+30) shr (0+8)
  2610  001956  6B7D               	clrf	(_timeout+30)& (0+255),b
  2611  001958  6B7E               	clrf	(_timeout+31)& (0+255),b
  2612                           ;asserv.c: 772: while (timeout.callage < timeout
      +                          _final)
  2613  00195A                     l106:
  2614                           ;asserv.c: 776: }
  2615  00195A  EE00  F06E         	lfsr	0,_timeout+15
  2616  00195E  0100               	movlb	__Lparam shr (0+8)
  2617  001960  5186               	movf	(?_avance_callage+3)^(__Lparam& (0+65280))
      +                          ,w
  2618  001962  5CED               	subwf	postdec0,w,c
  2619  001964  E108               	bnz	u675
  2620  001966  5185               	movf	(?_avance_callage+2)^(__Lparam& (0+65280))
      +                          ,w
  2621  001968  5CED               	subwf	postdec0,w,c
  2622  00196A  E105               	bnz	u675
  2623  00196C  5184               	movf	(?_avance_callage+1)^(__Lparam& (0+65280))
      +                          ,w
  2624  00196E  5CED               	subwf	postdec0,w,c
  2625  001970  E102               	bnz	u675
  2626  001972  5183               	movf	?_avance_callage^(__Lparam& (0+65280)),w
  2627  001974  5CEF               	subwf	indf0,w,c
  2628  001976                     u675:
  2629                           ;asserv.c: 773: {
  2630  001976  0101               	movlb	(_Asserv+42) shr (0+8)
  2631  001978  B0D8               	btfsc	status,0,c
  2632  00197A  D006               	goto	L12
  2633  00197C  0EC8               	movlw	200
  2634  00197E  6F2A               	movwf	(_Asserv+42)& (0+255),b
  2635  001980  6B2B               	clrf	(_Asserv+43)& (0+255),b
  2636                           ;asserv.c: 775: Asserv.commande_correction_epis_
      +                          d = 200;
  2637  001982  6F2C               	movwf	(_Asserv+44)& (0+255),b
  2638  001984  6B2D               	clrf	(_Asserv+45)& (0+255),b
  2639  001986  D7E9               	goto	l106
  2640                           ;asserv.c: 779: Asserv.commande_correction_epis_
      +                          g = 0;
  2641  001988                     L12:
  2642  001988  6B2A               	clrf	(_Asserv+42)& (0+255),b
  2643  00198A  6B2B               	clrf	(_Asserv+43)& (0+255),b
  2644                           ;asserv.c: 780: Asserv.commande_correction_epis_
      +                          d = 0;
  2645  00198C  6B2C               	clrf	(_Asserv+44)& (0+255),b
  2646  00198E  6B2D               	clrf	(_Asserv+45)& (0+255),b
  2647                           ;asserv.c: 782: timeout.callage = 0;
  2648  001990  0100               	movlb	(_timeout+12) shr (0+8)
  2649  001992  6B6B               	clrf	(_timeout+12)& (0+255),b
  2650  001994  6B6C               	clrf	(_timeout+13)& (0+255),b
  2651  001996  6B6D               	clrf	(_timeout+14)& (0+255),b
  2652  001998  6B6E               	clrf	(_timeout+15)& (0+255),b
  2653                           ;asserv.c: 783: timeout.blocage_timeout_callage 
      +                          = 1;
  2654  00199A  0100               	movlb	(_timeout+30) shr (0+8)
  2655  00199C  0E01               	movlw	1
  2656  00199E  6F7D               	movwf	(_timeout+30)& (0+255),b
  2657  0019A0  0E00               	movlw	0
  2658  0019A2  6B7E               	clrf	(_timeout+31)& (0+255),b
  2659                           ;asserv.c: 784: }
  2660  0019A4  0012               	return	
  2661  0019A6  0083               	dw	?_recule_callage
  2662  0019A8                     _recule_callage:
  2663  000000                     
  2664                           ;asserv.c: 789: int detection_back = 0;
  2665  0019A8  6AF6               	clrf	tblptrl,c
  2666  0019AA  6AF7               	clrf	tblptrh,c
  2667                           ;asserv.c: 792: Asserv.vitesse_max = 300;
  2668  0019AC  0101               	movlb	(_Asserv+138) shr (0+8)
  2669  0019AE  6B8D               	clrf	(_Asserv+141)& (0+255),b
  2670  0019B0  6B8C               	clrf	(_Asserv+140)& (0+255),b
  2671  0019B2  0E01               	movlw	1
  2672  0019B4  6F8B               	movwf	(_Asserv+139)& (0+255),b
  2673  0019B6  0E2C               	movlw	44
  2674  0019B8  6F8A               	movwf	(_Asserv+138)& (0+255),b
  2675                           ;asserv.c: 793: Asserv.flag_ass_angle = 1;
  2676  0019BA  0E01               	movlw	1
  2677  0019BC  6F0E               	movwf	(_Asserv+14)& (0+255),b
  2678  0019BE  6B0F               	clrf	(_Asserv+15)& (0+255),b
  2679                           ;asserv.c: 794: Asserv.flag_ass_distance = 0;
  2680  0019C0  6B0C               	clrf	(_Asserv+12)& (0+255),b
  2681  0019C2  6B0D               	clrf	(_Asserv+13)& (0+255),b
  2682                           ;asserv.c: 795: Asserv.flag_ass_commande_moteur_
      +                          polair = 1;
  2683  0019C4  0E01               	movlw	1
  2684  0019C6  6F16               	movwf	(_Asserv+22)& (0+255),b
  2685  0019C8  6B17               	clrf	(_Asserv+23)& (0+255),b
  2686                           ;asserv.c: 796: Asserv.flag_ass_saturation_vites
      +                          se = 1;
  2687  0019CA  6F12               	movwf	(_Asserv+18)& (0+255),b
  2688  0019CC  6B13               	clrf	(_Asserv+19)& (0+255),b
  2689                           ;asserv.c: 797: Asserv.flag_ass_saturation_accel
      +                          eratio = 0;
  2690  0019CE  6B14               	clrf	(_Asserv+20)& (0+255),b
  2691  0019D0  6B15               	clrf	(_Asserv+21)& (0+255),b
  2692                           ;asserv.c: 798: Asserv.flag_ass_callage = 1;
  2693  0019D2  0E01               	movlw	1
  2694  0019D4  6F18               	movwf	(_Asserv+24)& (0+255),b
  2695  0019D6  6B19               	clrf	(_Asserv+25)& (0+255),b
  2696                           ;asserv.c: 801: timeout.deplacement = 0;
  2697  0019D8  0100               	movlb	(_timeout+8) shr (0+8)
  2698  0019DA  6B67               	clrf	(_timeout+8)& (0+255),b
  2699  0019DC  6B68               	clrf	(_timeout+9)& (0+255),b
  2700  0019DE  6B69               	clrf	(_timeout+10)& (0+255),b
  2701  0019E0  6B6A               	clrf	(_timeout+11)& (0+255),b
  2702                           ;asserv.c: 802: timeout.callage = 0;
  2703  0019E2  0100               	movlb	(_timeout+12) shr (0+8)
  2704  0019E4  6B6B               	clrf	(_timeout+12)& (0+255),b
  2705  0019E6  6B6C               	clrf	(_timeout+13)& (0+255),b
  2706  0019E8  6B6D               	clrf	(_timeout+14)& (0+255),b
  2707  0019EA  6B6E               	clrf	(_timeout+15)& (0+255),b
  2708                           ;asserv.c: 803: timeout.blocage_timeout_callage 
      +                          = 0;
  2709  0019EC  0100               	movlb	(_timeout+30) shr (0+8)
  2710  0019EE  6B7D               	clrf	(_timeout+30)& (0+255),b
  2711  0019F0  6B7E               	clrf	(_timeout+31)& (0+255),b
  2712                           ;asserv.c: 806: Asserv.consigne_angle = angle*10
      +                          ;
  2713  0019F2  0E0A               	movlw	10
  2714  0019F4  6E04               	movwf	btemp+4
  2715  0019F6  6A05               	clrf	btemp+5
  2716  0019F8  6A06               	clrf	btemp+6
  2717  0019FA  6A07               	clrf	btemp+7
  2718  0019FC  C083  F000         	movff	?_recule_callage,btemp
  2719  001A00  C084  F001         	movff	?_recule_callage+1,btemp+1
  2720  001A04  C085  F002         	movff	?_recule_callage+2,btemp+2
  2721  001A08  C086  F003         	movff	?_recule_callage+3,btemp+3
  2722  001A0C  EC3B  F01D         	call	almul
  2723  001A10  ECD3  F01E         	call	altoft
  2724  001A14  C000  F1B9         	movff	btemp,_Asserv+185
  2725  001A18  C001  F1BA         	movff	btemp+1,_Asserv+186
  2726  001A1C  C002  F1BB         	movff	btemp+2,_Asserv+187
  2727                           ;asserv.c: 807: Asserv.consigne_angle *= Asserv.
      +                          orientation_depart;
  2728  001A20  EE01  F092         	lfsr	0,_Asserv+146
  2729  001A24  CFEE F000          	movff	postinc0,btemp
  2730  001A28  CFED F001          	movff	postdec0,btemp+1
  2731  001A2C  EC1C  F01F         	call	awtoft
  2732  001A30  C000  F003         	movff	btemp,btemp+3
  2733  001A34  C001  F004         	movff	btemp+1,btemp+4
  2734  001A38  C002  F005         	movff	btemp+2,btemp+5
  2735  001A3C  EE01  F0B9         	lfsr	0,_Asserv+185
  2736  001A40  EC4F  F01F         	call	ftmul_f
  2737                           ;asserv.c: 810: x_mm *= 10;
  2738  001A44  0E0A               	movlw	10
  2739  001A46  6E04               	movwf	btemp+4
  2740  001A48  6A05               	clrf	btemp+5
  2741  001A4A  6A06               	clrf	btemp+6
  2742  001A4C  6A07               	clrf	btemp+7
  2743  001A4E  0E87               	movlw	low (?_recule_callage+4)
  2744  001A50  6EE9               	movwf	fsr0l,c
  2745  001A52  0E00               	movlw	high (?_recule_callage+4)
  2746  001A54  6EEA               	movwf	fsr0h,c
  2747  001A56  EC3B  F01F         	call	almul_f
  2748                           ;asserv.c: 811: y_mm *= 10;
  2749  001A5A  0E0A               	movlw	10
  2750  001A5C  6E04               	movwf	btemp+4
  2751  001A5E  6A05               	clrf	btemp+5
  2752  001A60  6A06               	clrf	btemp+6
  2753  001A62  6A07               	clrf	btemp+7
  2754  001A64  0E8B               	movlw	low (?_recule_callage+8)
  2755  001A66  6EE9               	movwf	fsr0l,c
  2756  001A68  0E00               	movlw	high (?_recule_callage+8)
  2757  001A6A  6EEA               	movwf	fsr0h,c
  2758  001A6C  EC3B  F01F         	call	almul_f
  2759                           ;asserv.c: 812: y_mm *= Asserv.orientation_depar
      +                          t;
  2760  001A70  C192  F004         	movff	_Asserv+146,btemp+4
  2761  001A74  C193  F005         	movff	_Asserv+147,btemp+5
  2762  001A78  0E00               	movlw	0
  2763  001A7A  BE05               	btfsc	btemp+5,7
  2764  001A7C  0EFF               	movlw	255
  2765  001A7E  6E06               	movwf	btemp+6
  2766  001A80  6E07               	movwf	btemp+7
  2767  001A82  0E8B               	movlw	low (?_recule_callage+8)
  2768  001A84  6EE9               	movwf	fsr0l,c
  2769  001A86  0E00               	movlw	high (?_recule_callage+8)
  2770  001A88  6EEA               	movwf	fsr0h,c
  2771  001A8A  EC3B  F01F         	call	almul_f
  2772                           ;asserv.c: 815: while (timeout.callage < timeout
      +                          _final)
  2773                           ;asserv.c: 907: }
  2774  001A8E                     l110:
  2775                           ;asserv.c: 908: }
  2776  001A8E  EE00  F06E         	lfsr	0,_timeout+15
  2777  001A92  0100               	movlb	__Lparam shr (0+8)
  2778  001A94  5192               	movf	(?_recule_callage+15)^(__Lparam& (0+65280)
      +                          ),w
  2779  001A96  5CED               	subwf	postdec0,w,c
  2780  001A98  E108               	bnz	u895
  2781  001A9A  5191               	movf	(?_recule_callage+14)^(__Lparam& (0+65280)
      +                          ),w
  2782  001A9C  5CED               	subwf	postdec0,w,c
  2783  001A9E  E105               	bnz	u895
  2784  001AA0  5190               	movf	(?_recule_callage+13)^(__Lparam& (0+65280)
      +                          ),w
  2785  001AA2  5CED               	subwf	postdec0,w,c
  2786  001AA4  E102               	bnz	u895
  2787  001AA6  518F               	movf	(?_recule_callage+12)^(__Lparam& (0+65280)
      +                          ),w
  2788  001AA8  5CEF               	subwf	indf0,w,c
  2789  001AAA                     u895:
  2790  001AAA  B0D8               	btfsc	status,0,c
  2791  001AAC  D0F9               	goto	l112
  2792                           ;asserv.c: 816: {
  2793  001AAE  0100               	movlb	__Lparam shr (0+8)
  2794  001AB0  5193               	movf	(?_recule_callage+16)^(__Lparam& (0+65280)
      +                          ),w
  2795  001AB2  0A02               	xorlw	2
  2796  001AB4  1194               	iorwf	(?_recule_callage+17)^(__Lparam& (0+65280
      +                          )),w
  2797  001AB6  A4D8               	btfss	status,2,c
  2798  001AB8  D0DE               	goto	l113
  2799                           ;asserv.c: 819: {
  2800  001ABA  0101               	movlb	(_Asserv+14) shr (0+8)
  2801  001ABC  6B0E               	clrf	(_Asserv+14)& (0+255),b
  2802  001ABE  6B0F               	clrf	(_Asserv+15)& (0+255),b
  2803                           ;asserv.c: 822: Asserv.flag_ass_callage = 0;
  2804  001AC0  6B18               	clrf	(_Asserv+24)& (0+255),b
  2805  001AC2  6B19               	clrf	(_Asserv+25)& (0+255),b
  2806                           ;asserv.c: 825: if (Strat.Sys_1.bits.bit5)
  2807  001AC4  0100               	movlb	(_Strat+1) shr (0+8)
  2808  001AC6  A549               	btfss	(_Strat+1)& (0+255),2,b
  2809  001AC8  D010               	goto	l114
  2810                           ;asserv.c: 826: {
  2811  001ACA  0E01               	movlw	1
  2812  001ACC  6EF6               	movwf	tblptrl,c
  2813  001ACE  6AF7               	clrf	tblptrh,c
  2814                           ;asserv.c: 828: timeout.deplacement = 0;
  2815  001AD0  0100               	movlb	(_timeout+8) shr (0+8)
  2816  001AD2  6B67               	clrf	(_timeout+8)& (0+255),b
  2817  001AD4  6B68               	clrf	(_timeout+9)& (0+255),b
  2818  001AD6  6B69               	clrf	(_timeout+10)& (0+255),b
  2819  001AD8  6B6A               	clrf	(_timeout+11)& (0+255),b
  2820                           ;asserv.c: 829: Asserv.commande_correction_epis_
      +                          g = -100;
  2821  001ADA  0101               	movlb	(_Asserv+42) shr (0+8)
  2822  001ADC  0E9C               	movlw	156
  2823  001ADE  6F2A               	movwf	(_Asserv+42)& (0+255),b
  2824  001AE0  692B               	setf	(_Asserv+43)& (0+255),b
  2825                           ;asserv.c: 830: Asserv.commande_correction_epis_
      +                          d = 325;
  2826  001AE2  0E45               	movlw	69
  2827  001AE4  6F2C               	movwf	(_Asserv+44)& (0+255),b
  2828  001AE6  0E01               	movlw	1
  2829  001AE8  D045               	goto	L6
  2830                           ;asserv.c: 831: }
  2831  001AEA                     l114:
  2832  001AEA  0100               	movlb	(_Strat+1) shr (0+8)
  2833  001AEC  A749               	btfss	(_Strat+1)& (0+255),3,b
  2834  001AEE  D00F               	goto	l116
  2835                           ;asserv.c: 835: {
  2836  001AF0  0E02               	movlw	2
  2837  001AF2  6EF6               	movwf	tblptrl,c
  2838  001AF4  6AF7               	clrf	tblptrh,c
  2839                           ;asserv.c: 837: timeout.deplacement = 0;
  2840  001AF6  0100               	movlb	(_timeout+8) shr (0+8)
  2841  001AF8  6B67               	clrf	(_timeout+8)& (0+255),b
  2842  001AFA  6B68               	clrf	(_timeout+9)& (0+255),b
  2843  001AFC  6B69               	clrf	(_timeout+10)& (0+255),b
  2844  001AFE  6B6A               	clrf	(_timeout+11)& (0+255),b
  2845                           ;asserv.c: 838: Asserv.commande_correction_epis_
      +                          g = 325;
  2846  001B00  0101               	movlb	(_Asserv+42) shr (0+8)
  2847  001B02  0E45               	movlw	69
  2848  001B04  6F2A               	movwf	(_Asserv+42)& (0+255),b
  2849  001B06  0E01               	movlw	1
  2850  001B08  6F2B               	movwf	(_Asserv+43)& (0+255),b
  2851                           ;asserv.c: 839: Asserv.commande_correction_epis_
      +                          d = -100;
  2852  001B0A  0E9C               	movlw	156
  2853  001B0C  D031               	goto	L7
  2854                           ;asserv.c: 840: }
  2855  001B0E                     l116:
  2856                           ;asserv.c: 844: {
  2857  001B0E  04F6               	decf	tblptrl,w,c
  2858  001B10  10F7               	iorwf	tblptrh,w,c
  2859  001B12  A4D8               	btfss	status,2,c
  2860  001B14  D003               	goto	u731
  2861  001B16  0100               	movlb	(_Strat+1) shr (0+8)
  2862  001B18  A549               	btfss	(_Strat+1)& (0+255),2,b
  2863  001B1A  D008               	goto	u770
  2864  001B1C                     u731:
  2865  001B1C  50F6               	movf	tblptrl,w,c
  2866  001B1E  0A02               	xorlw	2
  2867  001B20  10F7               	iorwf	tblptrh,w,c
  2868  001B22  A4D8               	btfss	status,2,c
  2869  001B24  D021               	goto	l118
  2870  001B26  0100               	movlb	(_Strat+1) shr (0+8)
  2871  001B28  B749               	btfsc	(_Strat+1)& (0+255),3,b
  2872  001B2A  D01E               	goto	l118
  2873  001B2C                     u770:
  2874                           ;asserv.c: 847: {
  2875  001B2C  0100               	movlb	(_timeout+28) shr (0+8)
  2876  001B2E  6B7B               	clrf	(_timeout+28)& (0+255),b
  2877  001B30  6B7C               	clrf	(_timeout+29)& (0+255),b
  2878                           ;asserv.c: 851: if (timeout.deplacement > 25/25)
  2879  001B32  EE00  F06A         	lfsr	0,_timeout+11
  2880  001B36  0E00               	movlw	0
  2881  001B38  5CED               	subwf	postdec0,w,c
  2882  001B3A  E108               	bnz	u785
  2883  001B3C  0E00               	movlw	0
  2884  001B3E  5CED               	subwf	postdec0,w,c
  2885  001B40  E105               	bnz	u785
  2886  001B42  0E00               	movlw	0
  2887  001B44  5CED               	subwf	postdec0,w,c
  2888  001B46  E102               	bnz	u785
  2889  001B48  0E02               	movlw	2
  2890  001B4A  5CEF               	subwf	indf0,w,c
  2891  001B4C                     u785:
  2892  001B4C  A0D8               	btfss	status,0,c
  2893  001B4E  D013               	goto	l115
  2894                           ;asserv.c: 852: {
  2895  001B50  0100               	movlb	(_timeout+8) shr (0+8)
  2896  001B52  6B67               	clrf	(_timeout+8)& (0+255),b
  2897  001B54  6B68               	clrf	(_timeout+9)& (0+255),b
  2898  001B56  6B69               	clrf	(_timeout+10)& (0+255),b
  2899  001B58  6B6A               	clrf	(_timeout+11)& (0+255),b
  2900                           ;asserv.c: 855: timeout.blocage_timeout_deplacem
      +                          ent = 1;
  2901  001B5A  0100               	movlb	(_timeout+28) shr (0+8)
  2902  001B5C  0E01               	movlw	1
  2903  001B5E  6F7B               	movwf	(_timeout+28)& (0+255),b
  2904  001B60  6B7C               	clrf	(_timeout+29)& (0+255),b
  2905                           ;asserv.c: 856: detection_back = 0;
  2906  001B62  6AF6               	clrf	tblptrl,c
  2907  001B64  6AF7               	clrf	tblptrh,c
  2908                           ;asserv.c: 857: }
  2909                           ;asserv.c: 859: else
  2910  001B66  D007               	goto	l115
  2911  001B68                     l118:
  2912                           ;asserv.c: 860: {
  2913  001B68  0101               	movlb	(_Asserv+42) shr (0+8)
  2914  001B6A  0E24               	movlw	36
  2915  001B6C  6F2A               	movwf	(_Asserv+42)& (0+255),b
  2916  001B6E  692B               	setf	(_Asserv+43)& (0+255),b
  2917                           ;asserv.c: 864: Asserv.commande_correction_epis_
      +                          d = -220;
  2918  001B70                     L7:
  2919  001B70  6F2C               	movwf	(_Asserv+44)& (0+255),b
  2920  001B72  0EFF               	movlw	255
  2921  001B74                     L6:
  2922  001B74  6F2D               	movwf	(_Asserv+45)& (0+255),b
  2923                           ;asserv.c: 871: }
  2924                           ;asserv.c: 872: }
  2925  001B76                     l115:
  2926                           ;asserv.c: 876: if ((Asserv.x_actuel <= x_mm+150
      +                          0) && (Asserv.x_actuel >= x_mm-1500) &&
  2927  001B76  EE01  F045         	lfsr	0,_Asserv+69
  2928  001B7A  0100               	movlb	__Lparam shr (0+8)
  2929  001B7C  0EDC               	movlw	220
  2930  001B7E  2587               	addwf	(?_recule_callage+4)^(__Lparam& (0+65280)
      +                          ),w
  2931  001B80  6E00               	movwf	btemp
  2932  001B82  0E05               	movlw	5
  2933  001B84  2188               	addwfc	(?_recule_callage+5)^(__Lparam& (0+65280
      +                          )),w
  2934  001B86  6E01               	movwf	btemp+1
  2935  001B88  0E00               	movlw	0
  2936  001B8A  2189               	addwfc	(?_recule_callage+6)^(__Lparam& (0+65280
      +                          )),w
  2937  001B8C  6E02               	movwf	btemp+2
  2938  001B8E  0E00               	movlw	0
  2939  001B90  218A               	addwfc	(?_recule_callage+7)^(__Lparam& (0+65280
      +                          )),w
  2940  001B92  6E03               	movwf	btemp+3
  2941  001B94  5003               	movf	btemp+3,w
  2942  001B96  0A80               	xorlw	128
  2943  001B98  6E04               	movwf	btemp+4
  2944  001B9A  50ED               	movf	postdec0,w,c
  2945  001B9C  0A80               	xorlw	128
  2946  001B9E  5C04               	subwf	btemp+4,w
  2947  001BA0  E108               	bnz	u795
  2948  001BA2  50ED               	movf	postdec0,w,c
  2949  001BA4  5C02               	subwf	btemp+2,w
  2950  001BA6  E105               	bnz	u795
  2951  001BA8  50ED               	movf	postdec0,w,c
  2952  001BAA  5C01               	subwf	btemp+1,w
  2953  001BAC  E102               	bnz	u795
  2954  001BAE  50EF               	movf	indf0,w,c
  2955  001BB0  5C00               	subwf	btemp,w
  2956  001BB2                     u795:
  2957  001BB2  A0D8               	btfss	status,0,c
  2958  001BB4  D76C               	goto	l110
  2959  001BB6  0E24               	movlw	36
  2960  001BB8  2587               	addwf	(?_recule_callage+4)^(__Lparam& (0+65280)
      +                          ),w
  2961  001BBA  6E00               	movwf	btemp
  2962  001BBC  0EFA               	movlw	250
  2963  001BBE  2188               	addwfc	(?_recule_callage+5)^(__Lparam& (0+65280
      +                          )),w
  2964  001BC0  6E01               	movwf	btemp+1
  2965  001BC2  0EFF               	movlw	255
  2966  001BC4  2189               	addwfc	(?_recule_callage+6)^(__Lparam& (0+65280
      +                          )),w
  2967  001BC6  6E02               	movwf	btemp+2
  2968  001BC8  0EFF               	movlw	255
  2969  001BCA  218A               	addwfc	(?_recule_callage+7)^(__Lparam& (0+65280
      +                          )),w
  2970  001BCC  6E03               	movwf	btemp+3
  2971  001BCE  EE01  F045         	lfsr	0,_Asserv+69
  2972  001BD2  50ED               	movf	postdec0,w,c
  2973  001BD4  0A80               	xorlw	128
  2974  001BD6  6E04               	movwf	btemp+4
  2975  001BD8  5003               	movf	btemp+3,w
  2976  001BDA  0A80               	xorlw	128
  2977  001BDC  5C04               	subwf	btemp+4,w
  2978  001BDE  E108               	bnz	u805
  2979  001BE0  5002               	movf	btemp+2,w
  2980  001BE2  5CED               	subwf	postdec0,w,c
  2981  001BE4  E105               	bnz	u805
  2982  001BE6  5001               	movf	btemp+1,w
  2983  001BE8  5CED               	subwf	postdec0,w,c
  2984  001BEA  E102               	bnz	u805
  2985  001BEC  5000               	movf	btemp,w
  2986  001BEE  5CEF               	subwf	indf0,w,c
  2987  001BF0                     u805:
  2988  001BF0  A0D8               	btfss	status,0,c
  2989  001BF2  D74D               	goto	l110
  2990  001BF4  EE01  F049         	lfsr	0,_Asserv+73
  2991  001BF8  0100               	movlb	__Lparam shr (0+8)
  2992  001BFA  0EDC               	movlw	220
  2993  001BFC  258B               	addwf	(?_recule_callage+8)^(__Lparam& (0+65280)
      +                          ),w
  2994  001BFE  6E00               	movwf	btemp
  2995  001C00  0E05               	movlw	5
  2996  001C02  218C               	addwfc	(?_recule_callage+9)^(__Lparam& (0+65280
      +                          )),w
  2997  001C04  6E01               	movwf	btemp+1
  2998  001C06  0E00               	movlw	0
  2999  001C08  218D               	addwfc	(?_recule_callage+10)^(__Lparam& (0+6528
      +                          0)),w
  3000  001C0A  6E02               	movwf	btemp+2
  3001  001C0C  0E00               	movlw	0
  3002  001C0E  218E               	addwfc	(?_recule_callage+11)^(__Lparam& (0+6528
      +                          0)),w
  3003  001C10  6E03               	movwf	btemp+3
  3004  001C12  5003               	movf	btemp+3,w
  3005  001C14  0A80               	xorlw	128
  3006  001C16  6E04               	movwf	btemp+4
  3007  001C18  50ED               	movf	postdec0,w,c
  3008  001C1A  0A80               	xorlw	128
  3009  001C1C  5C04               	subwf	btemp+4,w
  3010  001C1E  E108               	bnz	u825
  3011  001C20  50ED               	movf	postdec0,w,c
  3012  001C22  5C02               	subwf	btemp+2,w
  3013  001C24  E105               	bnz	u825
  3014  001C26  50ED               	movf	postdec0,w,c
  3015  001C28  5C01               	subwf	btemp+1,w
  3016  001C2A  E102               	bnz	u825
  3017  001C2C  50EF               	movf	indf0,w,c
  3018  001C2E  5C00               	subwf	btemp,w
  3019  001C30                     u825:
  3020  001C30  A0D8               	btfss	status,0,c
  3021  001C32  D72D               	goto	l110
  3022  001C34  0100               	movlb	__Lparam shr (0+8)
  3023  001C36  0E24               	movlw	36
  3024  001C38  258B               	addwf	(?_recule_callage+8)^(__Lparam& (0+65280)
      +                          ),w
  3025  001C3A  6E00               	movwf	btemp
  3026  001C3C  0EFA               	movlw	250
  3027  001C3E  218C               	addwfc	(?_recule_callage+9)^(__Lparam& (0+65280
      +                          )),w
  3028  001C40  6E01               	movwf	btemp+1
  3029  001C42  0EFF               	movlw	255
  3030  001C44  218D               	addwfc	(?_recule_callage+10)^(__Lparam& (0+6528
      +                          0)),w
  3031  001C46  6E02               	movwf	btemp+2
  3032  001C48  0EFF               	movlw	255
  3033  001C4A  218E               	addwfc	(?_recule_callage+11)^(__Lparam& (0+6528
      +                          0)),w
  3034  001C4C  6E03               	movwf	btemp+3
  3035  001C4E  EE01  F049         	lfsr	0,_Asserv+73
  3036  001C52  50ED               	movf	postdec0,w,c
  3037  001C54  0A80               	xorlw	128
  3038  001C56  6E04               	movwf	btemp+4
  3039  001C58  5003               	movf	btemp+3,w
  3040  001C5A  0A80               	xorlw	128
  3041  001C5C  5C04               	subwf	btemp+4,w
  3042  001C5E  E108               	bnz	u845
  3043  001C60  5002               	movf	btemp+2,w
  3044  001C62  5CED               	subwf	postdec0,w,c
  3045  001C64  E105               	bnz	u845
  3046  001C66  5001               	movf	btemp+1,w
  3047  001C68  5CED               	subwf	postdec0,w,c
  3048  001C6A  E102               	bnz	u845
  3049  001C6C  5000               	movf	btemp,w
  3050  001C6E  5CEF               	subwf	indf0,w,c
  3051  001C70                     u845:
  3052  001C70  A0D8               	btfss	status,0,c
  3053  001C72  D70D               	goto	l110
  3054  001C74  D015               	goto	l112
  3055                           ;asserv.c: 878: {
  3056                           ;asserv.c: 880: }
  3057                           ;asserv.c: 884: else if (mode == 1)
  3058  001C76                     l113:
  3059  001C76  0100               	movlb	__Lparam shr (0+8)
  3060  001C78  0593               	decf	(?_recule_callage+16)^(__Lparam& (0+65280)
      +                          ),w
  3061  001C7A  1194               	iorwf	(?_recule_callage+17)^(__Lparam& (0+65280
      +                          )),w
  3062  001C7C  B4D8               	btfsc	status,2,c
  3063  001C7E  D009               	goto	l127
  3064                           ;asserv.c: 885: {
  3065                           ;asserv.c: 887: }
  3066  001C80  0100               	movlb	__Lparam shr (0+8)
  3067  001C82  5193               	movf	(?_recule_callage+16)^(__Lparam& (0+65280)
      +                          ),w
  3068  001C84  0A03               	xorlw	3
  3069  001C86  1194               	iorwf	(?_recule_callage+17)^(__Lparam& (0+65280
      +                          )),w
  3070  001C88  B4D8               	btfsc	status,2,c
  3071  001C8A  D003               	goto	l127
  3072                           ;asserv.c: 890: {
  3073                           ;asserv.c: 894: }
  3074  001C8C  0100               	movlb	__Lparam shr (0+8)
  3075  001C8E  5193               	movf	(?_recule_callage+16)^(__Lparam& (0+65280)
      +                          ),w
  3076  001C90  0A04               	xorlw	4
  3077                           ;asserv.c: 897: {
  3078                           ;asserv.c: 901: }
  3079  001C92                     l127:
  3080                           ;asserv.c: 905: {
  3081  001C92  0101               	movlb	(_Asserv+155) shr (0+8)
  3082  001C94  699E               	setf	(_Asserv+158)& (0+255),b
  3083  001C96  699D               	setf	(_Asserv+157)& (0+255),b
  3084  001C98  699C               	setf	(_Asserv+156)& (0+255),b
  3085  001C9A  0E10               	movlw	16
  3086  001C9C  6F9B               	movwf	(_Asserv+155)& (0+255),b
  3087  001C9E  D6F7               	goto	l110
  3088  001CA0                     l112:
  3089                           ;asserv.c: 911: Asserv.commande_correction_epis_
      +                          g = 0;
  3090  001CA0  0101               	movlb	(_Asserv+42) shr (0+8)
  3091  001CA2  6B2A               	clrf	(_Asserv+42)& (0+255),b
  3092  001CA4  6B2B               	clrf	(_Asserv+43)& (0+255),b
  3093                           ;asserv.c: 912: Asserv.commande_correction_epis_
      +                          d = 0;
  3094  001CA6  6B2C               	clrf	(_Asserv+44)& (0+255),b
  3095  001CA8  6B2D               	clrf	(_Asserv+45)& (0+255),b
  3096                           ;asserv.c: 915: Asserv.commande_distance = 0;
  3097  001CAA  6B9B               	clrf	(_Asserv+155)& (0+255),b
  3098  001CAC  6B9C               	clrf	(_Asserv+156)& (0+255),b
  3099  001CAE  6B9D               	clrf	(_Asserv+157)& (0+255),b
  3100  001CB0  6B9E               	clrf	(_Asserv+158)& (0+255),b
  3101                           ;asserv.c: 916: Asserv.flag_ass_angle = 0;
  3102  001CB2  6B0E               	clrf	(_Asserv+14)& (0+255),b
  3103  001CB4  6B0F               	clrf	(_Asserv+15)& (0+255),b
  3104                           ;asserv.c: 919: timeout.blocage_timeout_callage 
      +                          = 1;
  3105  001CB6  0100               	movlb	(_timeout+30) shr (0+8)
  3106  001CB8  0E01               	movlw	1
  3107  001CBA  6F7D               	movwf	(_timeout+30)& (0+255),b
  3108  001CBC  6B7E               	clrf	(_timeout+31)& (0+255),b
  3109                           ;asserv.c: 920: timeout.blocage_timeout_deplacem
      +                          ent = 1;
  3110  001CBE  0100               	movlb	(_timeout+28) shr (0+8)
  3111  001CC0  6F7B               	movwf	(_timeout+28)& (0+255),b
  3112  001CC2  0E00               	movlw	0
  3113  001CC4  6B7C               	clrf	(_timeout+29)& (0+255),b
  3114                           ;asserv.c: 921: timeout.callage = 0;
  3115  001CC6  0100               	movlb	(_timeout+12) shr (0+8)
  3116  001CC8  6B6B               	clrf	(_timeout+12)& (0+255),b
  3117  001CCA  6B6C               	clrf	(_timeout+13)& (0+255),b
  3118  001CCC  6B6D               	clrf	(_timeout+14)& (0+255),b
  3119  001CCE  6B6E               	clrf	(_timeout+15)& (0+255),b
  3120                           ;asserv.c: 922: timeout.deplacement = 0;
  3121  001CD0  0100               	movlb	(_timeout+8) shr (0+8)
  3122  001CD2  6B67               	clrf	(_timeout+8)& (0+255),b
  3123  001CD4  6B68               	clrf	(_timeout+9)& (0+255),b
  3124  001CD6  6B69               	clrf	(_timeout+10)& (0+255),b
  3125  001CD8  6B6A               	clrf	(_timeout+11)& (0+255),b
  3126                           ;asserv.c: 925: Asserv.flag_ass_callage = 0;
  3127  001CDA  0101               	movlb	(_Asserv+24) shr (0+8)
  3128  001CDC  6B18               	clrf	(_Asserv+24)& (0+255),b
  3129  001CDE  6B19               	clrf	(_Asserv+25)& (0+255),b
  3130                           ;asserv.c: 926: }
  3131  001CE0  0012               	return	
  3132  001CE2  0083               	dw	?_Stop
  3133  001CE4                     _Stop:
  3134  000000                     
  3135                           ;asserv.c: 931: int time = (timeout_sec*1000)/25
      +                          ;
  3136  001CE4  0EE8               	movlw	232
  3137  001CE6  6E02               	movwf	btemp+2
  3138  001CE8  0E03               	movlw	3
  3139  001CEA  6E03               	movwf	btemp+3
  3140  001CEC  C083  F000         	movff	?_Stop,btemp
  3141  001CF0  C084  F001         	movff	?_Stop+1,btemp+1
  3142  001CF4  EC0E  F01F         	call	awmul
  3143  001CF8  C004  F000         	movff	btemp+4,btemp
  3144  001CFC  C005  F001         	movff	btemp+5,btemp+1
  3145  001D00  0E19               	movlw	25
  3146  001D02  6E02               	movwf	btemp+2
  3147  001D04  6A03               	clrf	btemp+3
  3148  001D06  ECE9  F01E         	call	awdiv
  3149  001D0A  C004  FFF6         	movff	btemp+4,tblptrl
  3150  001D0E  C005  FFF7         	movff	btemp+5,tblptrh
  3151                           ;asserv.c: 934: timeout.deplacement = 0;
  3152  001D12  0100               	movlb	(_timeout+8) shr (0+8)
  3153  001D14  6B67               	clrf	(_timeout+8)& (0+255),b
  3154  001D16  6B68               	clrf	(_timeout+9)& (0+255),b
  3155  001D18  6B69               	clrf	(_timeout+10)& (0+255),b
  3156  001D1A  6B6A               	clrf	(_timeout+11)& (0+255),b
  3157                           ;asserv.c: 935: timeout.blocage_timeout_deplacem
      +                          ent = 0;
  3158  001D1C  0100               	movlb	(_timeout+28) shr (0+8)
  3159  001D1E  6B7B               	clrf	(_timeout+28)& (0+255),b
  3160  001D20  6B7C               	clrf	(_timeout+29)& (0+255),b
  3161                           ;asserv.c: 937: Asserv.flag_stop_asserv = 1;
  3162  001D22  0101               	movlb	_Asserv shr (0+8)
  3163  001D24  0E01               	movlw	1
  3164  001D26  6F00               	movwf	_Asserv& (0+255),b
  3165  001D28  6B01               	clrf	(_Asserv+1)& (0+255),b
  3166                           ;asserv.c: 940: while (timeout.deplacement <= ti
      +                          me);
  3167  001D2A                     l130:
  3168  001D2A  EE00  F06A         	lfsr	0,_timeout+11
  3169  001D2E  CFF6 F000          	movff	tblptrl,btemp
  3170  001D32  CFF7 F001          	movff	tblptrh,btemp+1
  3171  001D36  0E00               	movlw	0
  3172  001D38  BE01               	btfsc	btemp+1,7
  3173  001D3A  0EFF               	movlw	255
  3174  001D3C  6E02               	movwf	btemp+2
  3175  001D3E  6E03               	movwf	btemp+3
  3176  001D40  50ED               	movf	postdec0,w,c
  3177  001D42  5C03               	subwf	btemp+3,w
  3178  001D44  E108               	bnz	u905
  3179  001D46  50ED               	movf	postdec0,w,c
  3180  001D48  5C02               	subwf	btemp+2,w
  3181  001D4A  E105               	bnz	u905
  3182  001D4C  50ED               	movf	postdec0,w,c
  3183  001D4E  5C01               	subwf	btemp+1,w
  3184  001D50  E102               	bnz	u905
  3185  001D52  50EF               	movf	indf0,w,c
  3186  001D54  5C00               	subwf	btemp,w
  3187  001D56                     u905:
  3188  001D56  B0D8               	btfsc	status,0,c
  3189  001D58  D7E8               	goto	l130
  3190                           ;asserv.c: 942: Asserv.flag_stop_asserv = 0;
  3191  001D5A  0101               	movlb	_Asserv shr (0+8)
  3192  001D5C  6B00               	clrf	_Asserv& (0+255),b
  3193  001D5E  6B01               	clrf	(_Asserv+1)& (0+255),b
  3194                           ;asserv.c: 945: timeout.deplacement = 0;
  3195  001D60  0100               	movlb	(_timeout+8) shr (0+8)
  3196  001D62  6B67               	clrf	(_timeout+8)& (0+255),b
  3197  001D64  6B68               	clrf	(_timeout+9)& (0+255),b
  3198  001D66  6B69               	clrf	(_timeout+10)& (0+255),b
  3199  001D68  6B6A               	clrf	(_timeout+11)& (0+255),b
  3200                           ;asserv.c: 946: timeout.blocage_timeout_deplacem
      +                          ent = 1;
  3201  001D6A  0100               	movlb	(_timeout+28) shr (0+8)
  3202  001D6C  0E01               	movlw	1
  3203  001D6E  6F7B               	movwf	(_timeout+28)& (0+255),b
  3204  001D70  0E00               	movlw	0
  3205  001D72  6B7C               	clrf	(_timeout+29)& (0+255),b
  3206                           ;asserv.c: 947: }
  3207  001D74  0012               	return	
  3208                           ;asserv.c: 949: void StopAdv(void)
  3209                           ;asserv.c: 950: {
  3210  001D76                     _StopAdv:
  3211  000000                     
  3212                           ;asserv.c: 952: if ((Asserv.flag_evitement_adv =
      +                          = 1) || (Asserv.flag_evitement_adv == 2))
  3213  001D76  0101               	movlb	(_Asserv+2) shr (0+8)
  3214  001D78  5102               	movf	(_Asserv+2)& (0+255),w,b
  3215  001D7A  0A01               	xorlw	1
  3216  001D7C  1103               	iorwf	(_Asserv+3)& (0+255),w,b
  3217  001D7E  B4D8               	btfsc	status,2,c
  3218  001D80  D005               	goto	u930
  3219  001D82  5102               	movf	(_Asserv+2)& (0+255),w,b
  3220  001D84  0A02               	xorlw	2
  3221  001D86  1103               	iorwf	(_Asserv+3)& (0+255),w,b
  3222  001D88  A4D8               	btfss	status,2,c
  3223  001D8A  0012               	return	
  3224  001D8C                     u930:
  3225                           ;asserv.c: 953: {
  3226  001D8C  0100               	movlb	(_Strat+1) shr (0+8)
  3227  001D8E  AF49               	btfss	(_Strat+1)& (0+255),7,b
  3228  001D90  D010               	goto	l135
  3229                           ;asserv.c: 956: {
  3230  001D92  8280               	bsf	3968,1,c	;volatile
  3231                           ;asserv.c: 959: RA0 = 1;
  3232  001D94  8080               	bsf	3968,0,c	;volatile
  3233                           ;asserv.c: 962: Asserv.commande_roue_D = 0;
  3234  001D96  0101               	movlb	(_Asserv+36) shr (0+8)
  3235  001D98  6B24               	clrf	(_Asserv+36)& (0+255),b
  3236  001D9A  6B25               	clrf	(_Asserv+37)& (0+255),b
  3237                           ;asserv.c: 963: Asserv.commande_roue_G = 0;
  3238  001D9C  6B22               	clrf	(_Asserv+34)& (0+255),b
  3239  001D9E  6B23               	clrf	(_Asserv+35)& (0+255),b
  3240                           ;asserv.c: 965: timeout.blocage_timeout_evitemen
      +                          t = 0;
  3241  001DA0  0100               	movlb	(_timeout+26) shr (0+8)
  3242  001DA2  6B79               	clrf	(_timeout+26)& (0+255),b
  3243  001DA4  6B7A               	clrf	(_timeout+27)& (0+255),b
  3244                           ;asserv.c: 966: timeout.evitement = 0;
  3245  001DA6  0100               	movlb	(_timeout+4) shr (0+8)
  3246  001DA8  6B63               	clrf	(_timeout+4)& (0+255),b
  3247  001DAA  6B64               	clrf	(_timeout+5)& (0+255),b
  3248  001DAC  6B65               	clrf	(_timeout+6)& (0+255),b
  3249  001DAE  6B66               	clrf	(_timeout+7)& (0+255),b
  3250                           ;asserv.c: 967: }
  3251  001DB0  0012               	return	
  3252  001DB2                     l135:
  3253                           ;asserv.c: 969: {
  3254  001DB2  EE00  F066         	lfsr	0,_timeout+7
  3255  001DB6  0E00               	movlw	0
  3256  001DB8  5CED               	subwf	postdec0,w,c
  3257  001DBA  E108               	bnz	u955
  3258  001DBC  0E00               	movlw	0
  3259  001DBE  5CED               	subwf	postdec0,w,c
  3260  001DC0  E105               	bnz	u955
  3261  001DC2  0E00               	movlw	0
  3262  001DC4  5CED               	subwf	postdec0,w,c
  3263  001DC6  E102               	bnz	u955
  3264  001DC8  0E14               	movlw	20
  3265  001DCA  5CEF               	subwf	indf0,w,c
  3266  001DCC                     u955:
  3267  001DCC  A0D8               	btfss	status,0,c
  3268  001DCE  D01C               	goto	l137
  3269  001DD0  0100               	movlb	(_timeout+26) shr (0+8)
  3270  001DD2  5179               	movf	(_timeout+26)& (0+255),w,b
  3271  001DD4  117A               	iorwf	(_timeout+27)& (0+255),w,b
  3272  001DD6  A4D8               	btfss	status,2,c
  3273  001DD8  D017               	goto	l137
  3274                           ;asserv.c: 971: {
  3275  001DDA  0100               	movlb	(_Strat+1) shr (0+8)
  3276  001DDC  B349               	btfsc	(_Strat+1)& (0+255),1,b
  3277  001DDE  D003               	goto	l138
  3278                           ;asserv.c: 974: {
  3279  001DE0  9280               	bcf	3968,1,c	;volatile
  3280                           ;asserv.c: 976: RA0 = 1;
  3281  001DE2  8080               	bsf	3968,0,c	;volatile
  3282                           ;asserv.c: 977: }
  3283  001DE4  D002               	goto	l139
  3284  001DE6                     l138:
  3285                           ;asserv.c: 979: {
  3286  001DE6  8280               	bsf	3968,1,c	;volatile
  3287                           ;asserv.c: 981: RA0 = 0;
  3288  001DE8  9080               	bcf	3968,0,c	;volatile
  3289  001DEA                     l139:
  3290                           ;asserv.c: 982: }
  3291                           ;asserv.c: 985: timeout.blocage_timeout_deplacem
      +                          ent = 0;
  3292  001DEA  0100               	movlb	(_timeout+28) shr (0+8)
  3293  001DEC  6B7B               	clrf	(_timeout+28)& (0+255),b
  3294  001DEE  6B7C               	clrf	(_timeout+29)& (0+255),b
  3295                           ;asserv.c: 986: timeout.blocage_timeout_callage 
      +                          = 0;
  3296  001DF0  0100               	movlb	(_timeout+30) shr (0+8)
  3297  001DF2  6B7D               	clrf	(_timeout+30)& (0+255),b
  3298  001DF4  6B7E               	clrf	(_timeout+31)& (0+255),b
  3299                           ;asserv.c: 989: Asserv.flag_sortie_evitement_adv
      +                           = 1;
  3300  001DF6  0101               	movlb	(_Asserv+4) shr (0+8)
  3301  001DF8  0E01               	movlw	1
  3302  001DFA  6F04               	movwf	(_Asserv+4)& (0+255),b
  3303  001DFC  6B05               	clrf	(_Asserv+5)& (0+255),b
  3304                           ;asserv.c: 992: timeout.blocage_timeout_evitemen
      +                          t = 1;
  3305  001DFE  0100               	movlb	(_timeout+26) shr (0+8)
  3306  001E00  6F79               	movwf	(_timeout+26)& (0+255),b
  3307  001E02  0E00               	movlw	0
  3308  001E04  6B7A               	clrf	(_timeout+27)& (0+255),b
  3309                           ;asserv.c: 993: }
  3310  001E06  0012               	return	
  3311  001E08                     l137:
  3312                           ;asserv.c: 995: {
  3313  001E08  0100               	movlb	(_timeout+26) shr (0+8)
  3314  001E0A  5179               	movf	(_timeout+26)& (0+255),w,b
  3315  001E0C  117A               	iorwf	(_timeout+27)& (0+255),w,b
  3316  001E0E  A4D8               	btfss	status,2,c
  3317  001E10  0012               	return	
  3318                           ;asserv.c: 997: {
  3319  001E12  0100               	movlb	(_timeout+4) shr (0+8)
  3320  001E14  2B63               	incf	(_timeout+4)& (0+255),f,b
  3321  001E16  0E00               	movlw	0
  3322  001E18  2364               	addwfc	(_timeout+5)& (0+255),f,b
  3323  001E1A  2365               	addwfc	(_timeout+6)& (0+255),f,b
  3324  001E1C  2366               	addwfc	(_timeout+7)& (0+255),f,b
  3325                           ;asserv.c: 999: Asserv.commande_roue_D = 0;
  3326  001E1E  0101               	movlb	(_Asserv+36) shr (0+8)
  3327  001E20  6B24               	clrf	(_Asserv+36)& (0+255),b
  3328  001E22  6B25               	clrf	(_Asserv+37)& (0+255),b
  3329                           ;asserv.c: 1000: Asserv.commande_roue_G = 0;
  3330  001E24  6B22               	clrf	(_Asserv+34)& (0+255),b
  3331  001E26  6B23               	clrf	(_Asserv+35)& (0+255),b
  3332                           ;asserv.c: 1005: }
  3333                           ;asserv.c: 1007: }
  3334                           ;asserv.c: 1008: }
  3335  001E28  0012               	return	
  3336  001E2A  0083               	dw	?_Attente
  3337  001E2C                     _Attente:
  3338  000000                     
  3339                           ;asserv.c: 1014: int commande = 15;
  3340  001E2C  0E0F               	movlw	15
  3341  001E2E  6EF3               	movwf	prodl,c
  3342  001E30  6AF4               	clrf	prodh,c
  3343                           ;asserv.c: 1015: Struct_16bit PWM_moteurGauche;
  3344  001E32  0101               	movlb	(_Asserv+138) shr (0+8)
  3345  001E34  6B8D               	clrf	(_Asserv+141)& (0+255),b
  3346  001E36  6B8C               	clrf	(_Asserv+140)& (0+255),b
  3347  001E38  0E01               	movlw	1
  3348  001E3A  6F8B               	movwf	(_Asserv+139)& (0+255),b
  3349  001E3C  0E2C               	movlw	44
  3350  001E3E  6F8A               	movwf	(_Asserv+138)& (0+255),b
  3351                           ;asserv.c: 1020: Asserv.flag_ass_angle = 1;
  3352  001E40  0E01               	movlw	1
  3353  001E42  6F0E               	movwf	(_Asserv+14)& (0+255),b
  3354  001E44  6B0F               	clrf	(_Asserv+15)& (0+255),b
  3355                           ;asserv.c: 1021: Asserv.flag_ass_distance = 0;
  3356  001E46  6B0C               	clrf	(_Asserv+12)& (0+255),b
  3357  001E48  6B0D               	clrf	(_Asserv+13)& (0+255),b
  3358                           ;asserv.c: 1022: Asserv.flag_ass_commande_moteur
      +                          _polair = 1;
  3359  001E4A  0E01               	movlw	1
  3360  001E4C  6F16               	movwf	(_Asserv+22)& (0+255),b
  3361  001E4E  6B17               	clrf	(_Asserv+23)& (0+255),b
  3362                           ;asserv.c: 1023: Asserv.flag_ass_saturation_vite
      +                          sse = 1;
  3363  001E50  6F12               	movwf	(_Asserv+18)& (0+255),b
  3364  001E52  6B13               	clrf	(_Asserv+19)& (0+255),b
  3365                           ;asserv.c: 1024: Asserv.flag_ass_saturation_acce
      +                          leratio = 0;
  3366  001E54  6B14               	clrf	(_Asserv+20)& (0+255),b
  3367  001E56  6B15               	clrf	(_Asserv+21)& (0+255),b
  3368                           ;asserv.c: 1027: timeout.blocage_timeout_callage
      +                           = 0;
  3369  001E58  0100               	movlb	(_timeout+30) shr (0+8)
  3370  001E5A  6B7D               	clrf	(_timeout+30)& (0+255),b
  3371  001E5C  6B7E               	clrf	(_timeout+31)& (0+255),b
  3372                           ;asserv.c: 1031: RC0 = 0;
  3373  001E5E  9082               	bcf	3970,0,c	;volatile
  3374                           ;asserv.c: 1032: PWM_moteurGauche.u16b.Full = co
      +                          mmande;
  3375  001E60  0E0F               	movlw	15
  3376  001E62  0100               	movlb	__Lparam shr (0+8)
  3377  001E64  6F89               	movwf	(?a_Attente+2)^(__Lparam& (0+65280))
  3378  001E66  6B8A               	clrf	(?a_Attente+3)^(__Lparam& (0+65280))
  3379                           ;asserv.c: 1033: PDC1H = PWM_moteurGauche.u16b.O
      +                          ctet.H;
  3380  001E68  518A               	movf	(?a_Attente+3)^(__Lparam& (0+65280)),w
  3381  001E6A  6E76               	movwf	3958,c
  3382                           ;asserv.c: 1034: PDC1L = PWM_moteurGauche.u16b.O
      +                          ctet.L;
  3383  001E6C  5189               	movf	(?a_Attente+2)^(__Lparam& (0+65280)),w
  3384  001E6E  6E77               	movwf	3959,c
  3385                           ;asserv.c: 1037: RC1 = 0;
  3386  001E70  9282               	bcf	3970,1,c	;volatile
  3387                           ;asserv.c: 1038: PWM_moteurDroit.u16b.Full = com
      +                          mande;
  3388  001E72  0E0F               	movlw	15
  3389  001E74  6F87               	movwf	?a_Attente^(__Lparam& (0+65280))
  3390  001E76  6B88               	clrf	(?a_Attente+1)^(__Lparam& (0+65280))
  3391                           ;asserv.c: 1039: PDC0H = PWM_moteurDroit.u16b.Oc
      +                          tet.H;
  3392  001E78  5188               	movf	(?a_Attente+1)^(__Lparam& (0+65280)),w
  3393  001E7A  6E78               	movwf	3960,c
  3394                           ;asserv.c: 1040: PDC0L = PWM_moteurDroit.u16b.Oc
      +                          tet.L;
  3395  001E7C  5187               	movf	?a_Attente^(__Lparam& (0+65280)),w
  3396  001E7E  6E79               	movwf	3961,c
  3397                           ;asserv.c: 1043: while (timeout.callage < timeou
      +                          t_final)
  3398  001E80                     l143:
  3399                           ;asserv.c: 1046: }
  3400  001E80  EE00  F06E         	lfsr	0,_timeout+15
  3401  001E84  0100               	movlb	__Lparam shr (0+8)
  3402  001E86  5186               	movf	(?_Attente+3)^(__Lparam& (0+65280)),w
  3403  001E88  5CED               	subwf	postdec0,w,c
  3404  001E8A  E108               	bnz	u1005
  3405  001E8C  5185               	movf	(?_Attente+2)^(__Lparam& (0+65280)),w
  3406  001E8E  5CED               	subwf	postdec0,w,c
  3407  001E90  E105               	bnz	u1005
  3408  001E92  5184               	movf	(?_Attente+1)^(__Lparam& (0+65280)),w
  3409  001E94  5CED               	subwf	postdec0,w,c
  3410  001E96  E102               	bnz	u1005
  3411  001E98  5183               	movf	?_Attente^(__Lparam& (0+65280)),w
  3412  001E9A  5CEF               	subwf	indf0,w,c
  3413  001E9C                     u1005:
  3414  001E9C  B0D8               	btfsc	status,0,c
  3415  001E9E  D002               	goto	u1000
  3416                           ;asserv.c: 1044: {
  3417  001EA0  F000               	nop		;#
  3418  001EA2  D7EE               	goto	l143
  3419  001EA4                     u1000:
  3420                           ;asserv.c: 1049: timeout.blocage_timeout_callage
      +                           = 1;
  3421  001EA4  0100               	movlb	(_timeout+30) shr (0+8)
  3422  001EA6  0E01               	movlw	1
  3423  001EA8  6F7D               	movwf	(_timeout+30)& (0+255),b
  3424  001EAA  0E00               	movlw	0
  3425  001EAC  6B7E               	clrf	(_timeout+31)& (0+255),b
  3426                           ;asserv.c: 1050: timeout.callage = 0;
  3427  001EAE  0100               	movlb	(_timeout+12) shr (0+8)
  3428  001EB0  6B6B               	clrf	(_timeout+12)& (0+255),b
  3429  001EB2  6B6C               	clrf	(_timeout+13)& (0+255),b
  3430  001EB4  6B6D               	clrf	(_timeout+14)& (0+255),b
  3431  001EB6  6B6E               	clrf	(_timeout+15)& (0+255),b
  3432                           ;asserv.c: 1051: }
  3433  001EB8  0012               	return	
  3434                           
  3435                           	psect	const
  3436  00031B                     u39:
  3437  00031B                     u29:
  3438  00031B                     u19:
  3439  00031B  2B                 	db	43
  3440  00031C  00                 	db	0
  3441  000000                     
  3442  000000                     
  3443  000000                     
  3444  000000                     
  3445  000000                     
  3446  000000                     
  3447  000000                     
  3448  000000                     
  3449  000000                     
  3450  000000                     
  3451  000000                     
  3452  000000                     
  3453  000000                     
  3454  000000                     
  3455  000000                     
  3456  000000                     
  3457  000000                     
  3458  000000                     
  3459  000000                     
  3460  000000                     
  3461  000000                     
  3462  000000                     
  3463  000000                     
  3464  000000                     
  3465  000000                     
  3466  000000                     
  3467  000000                     
  3468  000000                     
  3469  000000                     
  3470  000000                     
  3471  000000                     
  3472  000000                     
  3473  000000                     
  3474  000000                     
  3475  000000                     
  3476  000000                     
  3477  000000                     
  3478  000000                     
  3479  000000                     
  3480  000000                     
  3481  000000                     
  3482  000000                     
  3483  000000                     
  3484  000000                     
  3485  000000                     
  3486  000000                     
  3487  000000                     
  3488  000000                     
  3489  000000                     
  3490  000000                     
  3491  000000                     
  3492  000000                     
  3493  000000                     
  3494  000000                     
  3495  000000                     
  3496  000000                     
  3497  000000                     
  3498  000000                     
  3499  000000                     
  3500  000000                     
  3501  000000                     
  3502  000000                     
  3503  000000                     
  3504  000000                     
  3505  000000                     
  3506  000000                     
  3507  000000                     
  3508  000000                     
  3509  000000                     
  3510  000000                     
  3511  000000                     
  3512  000000                     
  3513  000000                     
  3514  000000                     
  3515  000000                     
  3516  000000                     
  3517  000000                     
  3518  000000                     
  3519  000000                     
  3520  000000                     
  3521  000000                     
  3522  000000                     
  3523  000000                     
  3524  000000                     
  3525  000000                     
  3526  000000                     
  3527  000000                     
  3528  000000                     
  3529  000000                     
  3530  000000                     
  3531  000000                     
  3532  000000                     
  3533  000000                     
  3534  000000                     
  3535  000000                     
  3536  000000                     
  3537  000000                     
  3538  000000                     
  3539  000000                     
  3540  000000                     
  3541  000000                     
  3542  000000                     
  3543  000000                     
  3544  000000                     
  3545  000000                     
  3546  000000                     
  3547  000000                     
  3548  000000                     
  3549  000000                     
  3550  000000                     
  3551  000000                     
  3552  000000                     
  3553  000000                     
  3554  000000                     
  3555  000000                     
  3556  000000                     
  3557  000000                     
  3558  000000                     
  3559  000000                     
  3560  000000                     
  3561  000000                     
  3562  000000                     
  3563  000000                     
  3564  000000                     
  3565  000000                     
  3566  000000                     
  3567  000000                     
  3568  000000                     
  3569  000000                     
  3570  000000                     
  3571  000000                     
  3572  000000                     
  3573  000000                     
  3574  000000                     
  3575  000000                     
  3576  000000                     
  3577  000000                     
  3578  000000                     
  3579  000000                     
  3580  000000                     
  3581  000000                     
  3582  000000                     
  3583  000000                     
  3584  000000                     
  3585  000000                     
  3586  000000                     
  3587  000000                     
  3588  000000                     
  3589  000000                     
  3590  000000                     
  3591  000000                     
  3592  000000                     
  3593  000000                     
  3594  000000                     
  3595  000000                     
  3596  000000                     
  3597  000000                     
  3598  000000                     
  3599  000000                     
  3600  000000                     
  3601  000000                     
  3602  000000                     
  3603  000000                     
  3604  000000                     
  3605  000000                     
  3606  000000                     
  3607  000000                     
  3608  000000                     
  3609  000000                     
  3610  000000                     
  3611  000000                     
  3612  000000                     
  3613  000000                     
  3614  000000                     
  3615  000000                     
  3616  000000                     
  3617  000000                     
  3618  000000                     
  3619  000000                     
  3620  000000                     
  3621  000000                     
  3622  000000                     
  3623  000000                     
  3624  000000                     
  3625  000000                     
  3626  000000                     
  3627  000000                     
  3628  000000                     
  3629  000000                     
  3630  000000                     
  3631  000000                     
  3632  000000                     
  3633  000000                     
  3634  000000                     
  3635  000000                     
  3636  000000                     
  3637  000000                     
  3638  000000                     
  3639  000000                     
  3640  000000                     
  3641  000000                     
  3642  000000                     
  3643  000000                     
  3644  000000                     
  3645  000000                     
  3646  000000                     
  3647  000000                     
  3648  000000                     
  3649  000000                     
  3650  000000                     
  3651  000000                     
  3652  000000                     
  3653  000000                     
  3654  000000                     
  3655  000000                     
  3656  000000                     
  3657  000000                     
  3658  000000                     
  3659  000000                     
  3660  000000                     
  3661  000000                     
  3662  000000                     
  3663  000000                     
  3664  000000                     
  3665  000000                     
  3666  000000                     
  3667  000000                     
  3668  000000                     
  3669  000000                     
  3670  000000                     
  3671  000000                     
  3672  000000                     
  3673  000000                     
  3674  000000                     
  3675  000000                     
  3676  000000                     
  3677  000000                     
  3678  000000                     
  3679  000000                     
  3680  000000                     
  3681  000000                     
  3682  000000                     
  3683  000000                     
  3684  000000                     
  3685  000000                     
  3686  000000                     
  3687  000000                     
  3688  000000                     
  3689  000000                     
  3690  000000                     
  3691  000000                     
  3692  000000                     
  3693  000000                     
  3694  000000                     
  3695  000000                     
  3696  000000                     
  3697  000000                     
  3698  000000                     
  3699  000000                     
  3700  000000                     
  3701  000000                     
  3702  000000                     
  3703  000000                     
  3704  000000                     
  3705  000000                     
  3706  000000                     
  3707  000000                     
  3708  000000                     
  3709  000000                     
  3710  000000                     
  3711  000000                     
  3712  000000                     
  3713  000000                     
  3714  000000                     
  3715  000000                     
  3716  000000                     
  3717  000000                     
  3718  000000                     
  3719  000000                     
  3720  000000                     
  3721  000000                     
  3722  000000                     
  3723  000000                     
  3724  000000                     
  3725  000000                     
  3726  000000                     
  3727  000000                     
  3728  000000                     
  3729  000000                     
  3730  000000                     
  3731  000000                     
  3732  000000                     
  3733  000000                     
  3734  000000                     
  3735  000000                     
  3736  000000                     
  3737  000000                     
  3738  000000                     
  3739  000000                     
  3740  000000                     
  3741  000000                     
  3742  000000                     
  3743  000000                     
  3744  000000                     
  3745  000000                     
  3746  000000                     
  3747  000000                     
  3748  000000                     
  3749  000000                     
  3750  000000                     
  3751  000000                     
  3752  000000                     
  3753  000000                     
  3754  000000                     
  3755  000000                     
  3756  000000                     
  3757  000000                     
  3758  000000                     
  3759  000000                     
  3760  000000                     
  3761  000000                     
  3762  000000                     
  3763  000000                     
  3764  000000                     
  3765  000000                     
  3766  000000                     
  3767  000000                     
  3768  000000                     
  3769  000000                     
  3770  000000                     
  3771  000000                     
  3772  000000                     
  3773  000000                     
  3774  000000                     
  3775  000000                     
  3776  000000                     
  3777  000000                     
  3778  000000                     
  3779  000000                     
  3780  000000                     
  3781  000000                     
  3782  000000                     
  3783  000000                     
  3784  000000                     
  3785  000000                     
  3786  000000                     
  3787  000000                     
  3788  000000                     
  3789  000000                     
  3790  000000                     
  3791  000000                     
  3792  000000                     
  3793  000000                     
  3794  000000                     
  3795  000000                     
  3796  000000                     
  3797  000000                     
  3798  000000                     
  3799  000000                     
  3800  000000                     
  3801  000000                     
  3802  000000                     
  3803  000000                     
  3804  000000                     
  3805  000000                     
  3806  000000                     
  3807  000000                     
  3808  000000                     
  3809  000000                     
  3810  000000                     
  3811  000000                     
  3812  000000                     
  3813  000000                     
  3814  000000                     
  3815  000000                     
  3816  000000                     
  3817  000000                     
  3818  000000                     
  3819  000000                     
  3820  000000                     
  3821  000000                     
  3822  000000                     
  3823  000000                     
  3824  000000                     
  3825  000000                     
  3826  000000                     
  3827  000000                     
  3828  000000                     
  3829  000000                     
  3830  000000                     
  3831  000000                     
  3832  000000                     
  3833  000000                     
  3834  000000                     
  3835  000000                     
  3836  000000                     
  3837  000000                     
  3838  000000                     
  3839  000000                     
  3840  000000                     
  3841  000000                     
  3842  000000                     
  3843  000000                     
  3844  000000                     
  3845  000000                     
  3846  000000                     
  3847  000000                     
  3848  000000                     
  3849  000000                     
  3850  000000                     
  3851  000000                     
  3852  000000                     
  3853  000000                     
  3854  000000                     
  3855  000000                     
  3856  000000                     
  3857  000000                     
  3858  000000                     
  3859  000000                     
  3860  000000                     
  3861  000000                     
  3862  000000                     
  3863  000000                     
  3864  000000                     
  3865  000000                     
  3866  000000                     
  3867  000000                     
  3868  000000                     
  3869  000000                     
  3870  000000                     
  3871  000000                     
  3872  000000                     
  3873  000000                     
  3874  000000                     
  3875  000000                     
  3876  000000                     
  3877  000000                     
  3878  000000                     
  3879  000000                     
  3880  000000                     
  3881  000000                     
  3882  000000                     
  3883  000000                     
  3884  000000                     
  3885  000000                     
  3886  000000                     
  3887  000000                     
  3888  000000                     
  3889  000000                     
  3890  000000                     
  3891  000000                     
  3892  000000                     
  3893  000000                     
  3894  000000                     
  3895  000000                     
  3896  000000                     
  3897  000000                     
  3898  000000                     
  3899  000000                     
  3900  000000                     
  3901  000000                     
  3902  000000                     
  3903  000000                     
  3904  000000                     
  3905  000000                     
  3906  000000                     
  3907  000000                     
  3908  000000                     
  3909  000000                     
  3910  000000                     
  3911  000000                     
  3912  000000                     
  3913  000000                     
  3914  000000                     
  3915  000000                     
  3916  000000                     
  3917  000000                     
  3918  000000                     
  3919  000000                     
  3920  000000                     
  3921  000000                     
  3922  000000                     
  3923  000000                     
  3924  000000                     
  3925  000000                     
  3926  000000                     
  3927  000000                     
  3928  000000                     
  3929  000000                     
  3930  000000                     
  3931  000000                     
  3932  000000                     
  3933  000000                     
  3934  000000                     
  3935  000000                     
  3936  000000                     
  3937  000000                     
  3938  000000                     
  3939  000000                     
  3940  000000                     
  3941  000000                     
  3942  000000                     
  3943  000000                     
  3944  000000                     
  3945  000000                     
  3946  000000                     
  3947  000000                     
  3948  000000                     
  3949  000000                     
  3950  000000                     
  3951  000000                     
  3952  000000                     
  3953  000000                     
  3954  000000                     
  3955  000000                     
  3956  000000                     
  3957  000000                     
  3958  000000                     
  3959  000000                     
  3960  000000                     
  3961  000000                     
  3962  000000                     
  3963  000000                     
  3964  000000                     
  3965  000000                     
  3966  000000                     
  3967  000000                     
  3968  000000                     
  3969  000000                     
  3970  000000                     
  3971  000000                     
  3972  000000                     
  3973  000000                     
  3974  000000                     
  3975  000000                     
  3976  000000                     
  3977  000000                     
  3978  000000                     
  3979  000000                     
  3980  000000                     
  3981                           
  3982                           	psect	bss
  3983  000100                     _Asserv:
  3984  000100                     	ds	243
  3985                           
  3986                           	psect	temp
  3987  000000                     btemp:
  3988  000000                     	ds	12
  3989                           tblptrh	equ	0xFF7
  3990                           tblptrl	equ	0xFF6
  3991                           prodh	equ	0xFF4
  3992                           prodl	equ	0xFF3
  3993                           indf0	equ	0xFEF
  3994                           postinc0	equ	0xFEE
  3995                           postdec0	equ	0xFED
  3996                           fsr0h	equ	0xFEA
  3997                           fsr0l	equ	0xFE9
  3998                           wreg	equ	0xFE8
  3999                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V8.35PL3
Symbol Table                                           Fri May 14 07:16:30 2010

                               ?a_Attente 0087  
                                      l20 03F0  
                                      l21 0402  
                                      l31 0572  
                                      l23 0410  
                                      l40 0CEA  
                                      l32 06CA  
                                      l24 041A  
                                      l50 0E8E  
                                      l51 0EAC  
                                      l60 1024  
                                      l52 0EBC  
                                      l44 0D84  
                                      l36 0C54  
                                      l45 0DD4  
                                      l37 0C44  
                                      l70 1216  
                                      l54 0EFC  
                                      l71 1286  
                                      l80 145C  
                                      l64 1128  
                                      l81 14FC  
                                      l65 11C8  
                                      l49 0E7E  
                                      l90 1668  
                                      l82 14F0  
                                      l74 1384  
                                      l66 11BC  
                                      l58 1050  
                                      l91 1670  
                                      l75 1330  
                                      l59 0FFC  
                                      l92 1750  
                                      l76 1358  
                                      l86 154E  
                                      l95 175E  
                                      l87 1614  
                                      l97 1796  
                                      l98 17AE  
                                      l99 1832  
                                      u19 031B  
                                      u29 031B  
                                      u39 031B  
                                     l110 1A8E  
                                     l103 18F8  
                                     l112 1CA0  
                                     l113 1C76  
                                     l130 1D2A  
                                     l114 1AEA  
                                     l106 195A  
                                     l115 1B76  
                                     l116 1B0E  
                                     l118 1B68  
                                     l143 1E80  
                                     l135 1DB2  
                                     l127 1C92  
                                     l137 1E08  
                                     l138 1DE6  
                                     l139 1DEA  
                                     u210 0EA4  
                                     u305 1016  
                                     u410 12FA  
                                     u315 103E  
                                     u245 0F98  
                                     u270 0FC6  
                                     u255 0FB4  
                                     u600 183E  
                                     u435 1322  
                                     u355 11B6  
                                     u525 1726  
                                     u445 134A  
                                     u535 1742  
                                     u455 1372  
                                     u295 0FEE  
                                     u385 12CC  
                                     u731 1B1C  
                                     u395 12E8  
                                     u805 1BF0  
                                     u495 14EA  
                                     u905 1D56  
                                     u825 1C30  
                                     u930 1D8C  
                                     u770 1B2C  
                                     u675 1976  
                                     u595 1826  
                                     u845 1C70  
                                     u785 1B4C  
                                     u955 1DCC  
                                     u795 1BB2  
                                     u895 1AAA  
                           _tourner_cible 11D2  
                           _tourner_angle 0F42  
             _ass_commande_moteur_polaire 0E00  
                                     wreg 000FE8  
                        ?a_Asservissement 00C7  
                          ?a_ass_distance 00CD  
                                    f5523 00D9  
                                    f5533 00DC  
                                    f5633 00C2  
                                    f5653 009D  
                                    f5573 00D1  
                                    f5663 00AD  
                                    f5583 00CD  
                               _Strategie 0050  
                                    u1000 1EA4  
                                    u1005 1E9C  
                                    _Stop 1CE4  
                                    _fabs 0004  
                                    aldiv 3CFE  
                                    almul 3A76  
                                    fsr0h 000FEA  
                                    indf0 000FEF  
                                    fsr0l 000FE9  
                                    btemp 0000  
                                    _puts 37E6  
                                    awdiv 3DD2  
                                    _sqrt 0064  
                                    ftadd 3BB2  
           ?a_ass_saturation_acceleration 00CD  
                                    awmul 3E1C  
                                    ftcmp 3D3A  
                                    ftdiv 3AFC  
                                    ftmul 3944  
                                    ftsub 3BAE  
                                    fttol 3C68  
                                    prodl 000FF3  
                                    lwmul 3E1C  
                                clear_bss 0038  
                ?a_ass_saturation_vitesse 00CD  
                          _recule_callage 19A8  
                                _vas_vers 1506  
                         ?_recule_callage 0083  
                               ?_vas_vers 0083  
                                   ?_Stop 0083  
                         ?a_ass_envoi_pwm 00CD  
                                   ?_fabs 0000  
                                   ?_puts 00C5  
                                   ?_sqrt 00E8  
                  _ass_saturation_vitesse 0B3C  
                               _ass_angle 0456  
                              used_btemp0 0001  
                              used_btemp1 0001  
                              used_btemp2 0001  
                              used_btemp3 0001  
                              used_btemp4 0001  
                              used_btemp5 0001  
                              used_btemp6 0001  
                              used_btemp7 0001  
                              used_btemp8 0001  
                              used_btemp9 0001  
             _ass_saturation_acceleration 0CFC  
                                   _Strat 0048  
                                   _atan2 3258  
                                   altoft 3DA6  
                              ?a_vas_vers 0093  
                                   awtoft 3E38  
                         ?a_tourner_cible 008F  
                         ?a_tourner_angle 00B8  
                          _Asservissement 033E  
                                   status 000FD8  
                                 _Attente 1E2C  
                                ?_Attente 0083  
                                 __Lparam 0083  
                                 _StopAdv 1D76  
                             _ass_vitesse 0AC8  
                                 __ramtop 0300  
                          ?_tourner_cible 0083  
                          ?_tourner_angle 00B0  
                       _inversion_repaire 0F26  
                           ?a_ass_vitesse 00CD  
                             ?a_ass_angle 00CD  
                                  ?_atan2 00CD  
                                 _timeout 005F  
                      ?_inversion_repaire 00C5  
                                  _Asserv 0100  
                             used_btemp10 0001  
                             used_btemp11 0001  
                                 postdec0 000FED  
                                 postinc0 000FEE  
                                  almul_f 3E76  
                                  ftmul_f 3E9E  
                                  ftsub_f 3E62  
                                  tblptrl 000FF6  
                          _avance_callage 191E  
                         ?_avance_callage 0083  
                            _ass_distance 074C  
                           _ass_envoi_pwm 0E62  
